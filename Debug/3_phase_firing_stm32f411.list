
3_phase_firing_stm32f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009940  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b28  08009b28  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b30  08009b30  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b30  08009b30  00019b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b34  08009b34  00019b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  20000100  08009c38  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ee4  08009c38  00021ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153b8  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320c  00000000  00000000  000354e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  000386f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  00039918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5ab  00000000  00000000  0003a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bf6  00000000  00000000  00054f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6bb  00000000  00000000  0006ab89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba4  00000000  00000000  00106294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009ac0 	.word	0x08009ac0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08009ac0 	.word	0x08009ac0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f001 f89e 	bl	8001620 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 f854 	bl	8000590 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 fbb2 	bl	8000c50 <MX_GPIO_Init>
	MX_TIM2_Init();
 80004ec:	f000 f90a 	bl	8000704 <MX_TIM2_Init>
	MX_TIM3_Init();
 80004f0:	f000 f9c2 	bl	8000878 <MX_TIM3_Init>
	MX_TIM4_Init();
 80004f4:	f000 fa7a 	bl	80009ec <MX_TIM4_Init>
	MX_TIM5_Init();
 80004f8:	f000 fb32 	bl	8000b60 <MX_TIM5_Init>
	MX_USB_DEVICE_Init();
 80004fc:	f008 fdca 	bl	8009094 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8000500:	f000 f8ae 	bl	8000660 <MX_ADC1_Init>
	MX_TIM10_Init();
 8000504:	f000 fb80 	bl	8000c08 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	// Initializing Timer Base
	HAL_TIM_Base_Start_IT(&htim2);
 8000508:	481b      	ldr	r0, [pc, #108]	; (8000578 <main+0x9c>)
 800050a:	f003 fde3 	bl	80040d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800050e:	481b      	ldr	r0, [pc, #108]	; (800057c <main+0xa0>)
 8000510:	f003 fde0 	bl	80040d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <main+0xa4>)
 8000516:	f003 fddd 	bl	80040d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 800051a:	481a      	ldr	r0, [pc, #104]	; (8000584 <main+0xa8>)
 800051c:	f003 fd80 	bl	8004020 <HAL_TIM_Base_Start>

	// Initializing One Pulse mode for unidirectional mode
	HAL_TIM_OnePulse_Start_IT(&htim2, TIM_CHANNEL_2);
 8000520:	2104      	movs	r1, #4
 8000522:	4815      	ldr	r0, [pc, #84]	; (8000578 <main+0x9c>)
 8000524:	f004 f872 	bl	800460c <HAL_TIM_OnePulse_Start_IT>
	HAL_TIM_OnePulse_Start_IT(&htim3, TIM_CHANNEL_2);
 8000528:	2104      	movs	r1, #4
 800052a:	4814      	ldr	r0, [pc, #80]	; (800057c <main+0xa0>)
 800052c:	f004 f86e 	bl	800460c <HAL_TIM_OnePulse_Start_IT>
	HAL_TIM_OnePulse_Start_IT(&htim4, TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	4813      	ldr	r0, [pc, #76]	; (8000580 <main+0xa4>)
 8000534:	f004 f86a 	bl	800460c <HAL_TIM_OnePulse_Start_IT>

	// Intializing Output Compare mode for bidirectional mode
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000538:	2108      	movs	r1, #8
 800053a:	480f      	ldr	r0, [pc, #60]	; (8000578 <main+0x9c>)
 800053c:	f003 feb4 	bl	80042a8 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000540:	2108      	movs	r1, #8
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <main+0xa0>)
 8000544:	f003 feb0 	bl	80042a8 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000548:	2108      	movs	r1, #8
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <main+0xa4>)
 800054c:	f003 feac 	bl	80042a8 <HAL_TIM_OC_Start_IT>

	// Initializing Encoder
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000550:	213c      	movs	r1, #60	; 0x3c
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0xa8>)
 8000554:	f004 f966 	bl	8004824 <HAL_TIM_Encoder_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		set_alpha(sudut_alpha);
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0xac>)
 800055a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fce0 	bl	8000f24 <set_alpha>
		HAL_Delay(100);
 8000564:	2064      	movs	r0, #100	; 0x64
 8000566:	f001 f8cd 	bl	8001704 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 800056a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056e:	4807      	ldr	r0, [pc, #28]	; (800058c <main+0xb0>)
 8000570:	f001 fe25 	bl	80021be <HAL_GPIO_TogglePin>
		set_alpha(sudut_alpha);
 8000574:	e7f0      	b.n	8000558 <main+0x7c>
 8000576:	bf00      	nop
 8000578:	20000164 	.word	0x20000164
 800057c:	200001ac 	.word	0x200001ac
 8000580:	200001f4 	.word	0x200001f4
 8000584:	2000023c 	.word	0x2000023c
 8000588:	20000000 	.word	0x20000000
 800058c:	40020800 	.word	0x40020800

08000590 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f009 fa86 	bl	8009ab0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <SystemClock_Config+0xc8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <SystemClock_Config+0xcc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 8000600:	230f      	movs	r3, #15
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000604:	2390      	movs	r3, #144	; 0x90
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000608:	2304      	movs	r3, #4
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800060c:	2305      	movs	r3, #5
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f883 	bl	8003720 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000620:	f000 fd22 	bl	8001068 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2101      	movs	r1, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fae5 	bl	8003c10 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800064c:	f000 fd0c 	bl	8001068 <Error_Handler>
	}
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c0:	f001 f844 	bl	800174c <HAL_ADC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80006ca:	f000 fccd 	bl	8001068 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e0:	f001 f878 	bl	80017d4 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 80006ea:	f000 fcbd 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000011c 	.word	0x2000011c
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b098      	sub	sp, #96	; 0x60
 8000708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 800070a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800070e:	2224      	movs	r2, #36	; 0x24
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f009 f9cc 	bl	8009ab0 <memset>
	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
 8000742:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000744:	4b4b      	ldr	r3, [pc, #300]	; (8000874 <MX_TIM2_Init+0x170>)
 8000746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 60-1;
 800074c:	4b49      	ldr	r3, [pc, #292]	; (8000874 <MX_TIM2_Init+0x170>)
 800074e:	223b      	movs	r2, #59	; 0x3b
 8000750:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	4b48      	ldr	r3, [pc, #288]	; (8000874 <MX_TIM2_Init+0x170>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20000-1;
 8000758:	4b46      	ldr	r3, [pc, #280]	; (8000874 <MX_TIM2_Init+0x170>)
 800075a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800075e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <MX_TIM2_Init+0x170>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <MX_TIM2_Init+0x170>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <MX_TIM2_Init+0x170>)
 800076e:	f003 fc07 	bl	8003f80 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8000778:	f000 fc76 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800077c:	483d      	ldr	r0, [pc, #244]	; (8000874 <MX_TIM2_Init+0x170>)
 800077e:	f003 fe91 	bl	80044a4 <HAL_TIM_PWM_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 8000788:	f000 fc6e 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800078c:	4839      	ldr	r0, [pc, #228]	; (8000874 <MX_TIM2_Init+0x170>)
 800078e:	f003 fd32 	bl	80041f6 <HAL_TIM_OC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 8000798:	f000 fc66 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800079c:	2108      	movs	r1, #8
 800079e:	4835      	ldr	r0, [pc, #212]	; (8000874 <MX_TIM2_Init+0x170>)
 80007a0:	f003 fed9 	bl	8004556 <HAL_TIM_OnePulse_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0xaa>
	{
		Error_Handler();
 80007aa:	f000 fc5d 	bl	8001068 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007ae:	2306      	movs	r3, #6
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80007b2:	2350      	movs	r3, #80	; 0x50
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 80007b6:	2302      	movs	r3, #2
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80007be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c2:	4619      	mov	r1, r3
 80007c4:	482b      	ldr	r0, [pc, #172]	; (8000874 <MX_TIM2_Init+0x170>)
 80007c6:	f004 fbd4 	bl	8004f72 <HAL_TIM_SlaveConfigSynchro>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0xd0>
	{
		Error_Handler();
 80007d0:	f000 fc4a 	bl	8001068 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4619      	mov	r1, r3
 80007e2:	4824      	ldr	r0, [pc, #144]	; (8000874 <MX_TIM2_Init+0x170>)
 80007e4:	f005 f804 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0xee>
	{
		Error_Handler();
 80007ee:	f000 fc3b 	bl	8001068 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f2:	2360      	movs	r3, #96	; 0x60
 80007f4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2204      	movs	r2, #4
 8000806:	4619      	mov	r1, r3
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <MX_TIM2_Init+0x170>)
 800080a:	f004 fa1d 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x114>
	{
		Error_Handler();
 8000814:	f000 fc28 	bl	8001068 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000818:	2330      	movs	r3, #48	; 0x30
 800081a:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2208      	movs	r2, #8
 8000820:	4619      	mov	r1, r3
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_TIM2_Init+0x170>)
 8000824:	f004 f9b4 	bl	8004b90 <HAL_TIM_OC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x12e>
	{
		Error_Handler();
 800082e:	f000 fc1b 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 8000832:	2370      	movs	r3, #112	; 0x70
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000840:	2301      	movs	r3, #1
 8000842:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_RISING;
 8000844:	2300      	movs	r3, #0
 8000846:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim2, &sConfigOP, TIM_CHANNEL_2,
 800084c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000850:	2300      	movs	r3, #0
 8000852:	2204      	movs	r2, #4
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <MX_TIM2_Init+0x170>)
 8000856:	f004 fab9 	bl	8004dcc <HAL_TIM_OnePulse_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x160>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 8000860:	f000 fc02 	bl	8001068 <Error_Handler>
	}
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <MX_TIM2_Init+0x170>)
 8000866:	f000 fda7 	bl	80013b8 <HAL_TIM_MspPostInit>

}
 800086a:	bf00      	nop
 800086c:	3760      	adds	r7, #96	; 0x60
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000164 	.word	0x20000164

08000878 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b098      	sub	sp, #96	; 0x60
 800087c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 800087e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000882:	2224      	movs	r2, #36	; 0x24
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f009 f912 	bl	8009ab0 <memset>
	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800088c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80008b8:	4b4a      	ldr	r3, [pc, #296]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008ba:	4a4b      	ldr	r2, [pc, #300]	; (80009e8 <MX_TIM3_Init+0x170>)
 80008bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 60-1;
 80008be:	4b49      	ldr	r3, [pc, #292]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008c0:	223b      	movs	r2, #59	; 0x3b
 80008c2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 20000-1;
 80008ca:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80008d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d8:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008de:	4841      	ldr	r0, [pc, #260]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008e0:	f003 fb4e 	bl	8003f80 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 80008ea:	f000 fbbd 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008ee:	483d      	ldr	r0, [pc, #244]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008f0:	f003 fdd8 	bl	80044a4 <HAL_TIM_PWM_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x86>
	{
		Error_Handler();
 80008fa:	f000 fbb5 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008fe:	4839      	ldr	r0, [pc, #228]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000900:	f003 fc79 	bl	80041f6 <HAL_TIM_OC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 800090a:	f000 fbad 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800090e:	2108      	movs	r1, #8
 8000910:	4834      	ldr	r0, [pc, #208]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000912:	f003 fe20 	bl	8004556 <HAL_TIM_OnePulse_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0xa8>
	{
		Error_Handler();
 800091c:	f000 fba4 	bl	8001068 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000920:	2306      	movs	r3, #6
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000924:	2350      	movs	r3, #80	; 0x50
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000934:	4619      	mov	r1, r3
 8000936:	482b      	ldr	r0, [pc, #172]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000938:	f004 fb1b 	bl	8004f72 <HAL_TIM_SlaveConfigSynchro>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0xce>
	{
		Error_Handler();
 8000942:	f000 fb91 	bl	8001068 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	4619      	mov	r1, r3
 8000954:	4823      	ldr	r0, [pc, #140]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000956:	f004 ff4b 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0xec>
	{
		Error_Handler();
 8000960:	f000 fb82 	bl	8001068 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000964:	2360      	movs	r3, #96	; 0x60
 8000966:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2204      	movs	r2, #4
 8000978:	4619      	mov	r1, r3
 800097a:	481a      	ldr	r0, [pc, #104]	; (80009e4 <MX_TIM3_Init+0x16c>)
 800097c:	f004 f964 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x112>
	{
		Error_Handler();
 8000986:	f000 fb6f 	bl	8001068 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800098a:	2330      	movs	r3, #48	; 0x30
 800098c:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2208      	movs	r2, #8
 8000992:	4619      	mov	r1, r3
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000996:	f004 f8fb 	bl	8004b90 <HAL_TIM_OC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x12c>
	{
		Error_Handler();
 80009a0:	f000 fb62 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 80009a4:	2370      	movs	r3, #112	; 0x70
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 80009a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ac:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009b2:	2301      	movs	r3, #1
 80009b4:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_RISING;
 80009b6:	2300      	movs	r3, #0
 80009b8:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim3, &sConfigOP, TIM_CHANNEL_2,
 80009be:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80009c2:	2300      	movs	r3, #0
 80009c4:	2204      	movs	r2, #4
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80009c8:	f004 fa00 	bl	8004dcc <HAL_TIM_OnePulse_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x15e>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 80009d2:	f000 fb49 	bl	8001068 <Error_Handler>
	}
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80009d8:	f000 fcee 	bl	80013b8 <HAL_TIM_MspPostInit>

}
 80009dc:	bf00      	nop
 80009de:	3760      	adds	r7, #96	; 0x60
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200001ac 	.word	0x200001ac
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b098      	sub	sp, #96	; 0x60
 80009f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 80009f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009f6:	2224      	movs	r2, #36	; 0x24
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f009 f858 	bl	8009ab0 <memset>
	/* USER CODE END TIM4_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000a2c:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a2e:	4a4b      	ldr	r2, [pc, #300]	; (8000b5c <MX_TIM4_Init+0x170>)
 8000a30:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 60-1;
 8000a32:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a34:	223b      	movs	r2, #59	; 0x3b
 8000a36:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b47      	ldr	r3, [pc, #284]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 20000-1;
 8000a3e:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a40:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a44:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b44      	ldr	r3, [pc, #272]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a4c:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a52:	4841      	ldr	r0, [pc, #260]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a54:	f003 fa94 	bl	8003f80 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM4_Init+0x76>
	{
		Error_Handler();
 8000a5e:	f000 fb03 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a62:	483d      	ldr	r0, [pc, #244]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a64:	f003 fd1e 	bl	80044a4 <HAL_TIM_PWM_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM4_Init+0x86>
	{
		Error_Handler();
 8000a6e:	f000 fafb 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000a72:	4839      	ldr	r0, [pc, #228]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a74:	f003 fbbf 	bl	80041f6 <HAL_TIM_OC_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 8000a7e:	f000 faf3 	bl	8001068 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8000a82:	2108      	movs	r1, #8
 8000a84:	4834      	ldr	r0, [pc, #208]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a86:	f003 fd66 	bl	8004556 <HAL_TIM_OnePulse_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0xa8>
	{
		Error_Handler();
 8000a90:	f000 faea 	bl	8001068 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a94:	2306      	movs	r3, #6
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a98:	2350      	movs	r3, #80	; 0x50
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482b      	ldr	r0, [pc, #172]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000aac:	f004 fa61 	bl	8004f72 <HAL_TIM_SlaveConfigSynchro>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM4_Init+0xce>
	{
		Error_Handler();
 8000ab6:	f000 fad7 	bl	8001068 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4823      	ldr	r0, [pc, #140]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000aca:	f004 fe91 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM4_Init+0xec>
	{
		Error_Handler();
 8000ad4:	f000 fac8 	bl	8001068 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	; 0x60
 8000ada:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2204      	movs	r2, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	481a      	ldr	r0, [pc, #104]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000af0:	f004 f8aa 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM4_Init+0x112>
	{
		Error_Handler();
 8000afa:	f000 fab5 	bl	8001068 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000afe:	2330      	movs	r3, #48	; 0x30
 8000b00:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2208      	movs	r2, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000b0a:	f004 f841 	bl	8004b90 <HAL_TIM_OC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM4_Init+0x12c>
	{
		Error_Handler();
 8000b14:	f000 faa8 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 8000b18:	2370      	movs	r3, #112	; 0x70
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 8000b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b20:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b26:	2301      	movs	r3, #1
 8000b28:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_FALLING;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim4, &sConfigOP, TIM_CHANNEL_2,
 8000b32:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000b36:	2300      	movs	r3, #0
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000b3c:	f004 f946 	bl	8004dcc <HAL_TIM_OnePulse_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x15e>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 8000b46:	f000 fa8f 	bl	8001068 <Error_Handler>
	}
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000b4c:	f000 fc34 	bl	80013b8 <HAL_TIM_MspPostInit>

}
 8000b50:	bf00      	nop
 8000b52:	3760      	adds	r7, #96	; 0x60
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001f4 	.word	0x200001f4
 8000b5c:	40000800 	.word	0x40000800

08000b60 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2224      	movs	r2, #36	; 0x24
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f008 ff9e 	bl	8009ab0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <MX_TIM5_Init+0xa4>)
 8000b80:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000baa:	2301      	movs	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000bce:	f003 fd83 	bl	80046d8 <HAL_TIM_Encoder_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM5_Init+0x7c>
	{
		Error_Handler();
 8000bd8:	f000 fa46 	bl	8001068 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000bea:	f004 fe01 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM5_Init+0x98>
	{
		Error_Handler();
 8000bf4:	f000 fa38 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000023c 	.word	0x2000023c
 8000c04:	40000c00 	.word	0x40000c00

08000c08 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <MX_TIM10_Init+0x44>)
 8000c10:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 60000;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c14:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000c18:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 100;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c22:	2264      	movs	r2, #100	; 0x64
 8000c24:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c34:	f003 f9a4 	bl	8003f80 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM10_Init+0x3a>
	{
		Error_Handler();
 8000c3e:	f000 fa13 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000284 	.word	0x20000284
 8000c4c:	40014400 	.word	0x40014400

08000c50 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cdc:	4816      	ldr	r0, [pc, #88]	; (8000d38 <MX_GPIO_Init+0xe8>)
 8000cde:	f001 fa55 	bl	800218c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480f      	ldr	r0, [pc, #60]	; (8000d38 <MX_GPIO_Init+0xe8>)
 8000cfc:	f001 f8aa 	bl	8001e54 <HAL_GPIO_Init>

	/*Configure GPIO pins : FIRING_MODE_Pin DEVICE_SEL_Pin */
	GPIO_InitStruct.Pin = FIRING_MODE_Pin|DEVICE_SEL_Pin;
 8000d00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d06:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <MX_GPIO_Init+0xec>)
 8000d18:	f001 f89c 	bl	8001e54 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2028      	movs	r0, #40	; 0x28
 8000d22:	f001 f860 	bl	8001de6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d26:	2028      	movs	r0, #40	; 0x28
 8000d28:	f001 f879 	bl	8001e1e <HAL_NVIC_EnableIRQ>

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020400 	.word	0x40020400

08000d40 <HAL_TIM_OC_DelayElapsedCallback>:
	HAL_TIM_MspPostInit(&htim2);

}


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	// Zero cross detector Handler
	if (htim->Instance == TIM2) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d11c      	bne.n	8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x4c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7f1b      	ldrb	r3, [r3, #28]
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d118      	bne.n	8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x4c>
			if (first_wave_flag_1 != 0) {
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d009      	beq.n	8000d76 <HAL_TIM_OC_DelayElapsedCallback+0x36>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, sudut_alpha);
 8000d62:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000d64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	63da      	str	r2, [r3, #60]	; 0x3c
				first_wave_flag_1 = 0;
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e00a      	b.n	8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x4c>
			} else {
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d80:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	63da      	str	r2, [r3, #60]	; 0x3c
						(sudut_alpha+SCR_PULSE_WIDTH));
				first_wave_flag_1 = 1;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Phase B
	if (htim->Instance == TIM3) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d11c      	bne.n	8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x90>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7f1b      	ldrb	r3, [r3, #28]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d118      	bne.n	8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x90>
			if (first_wave_flag_2 != 0) {
 8000d9e:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d009      	beq.n	8000dba <HAL_TIM_OC_DelayElapsedCallback+0x7a>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sudut_alpha);
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000da8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	63da      	str	r2, [r3, #60]	; 0x3c
				first_wave_flag_2 = 0;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e00a      	b.n	8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x90>
			} else {
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc0:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
						(sudut_alpha+SCR_PULSE_WIDTH));
				first_wave_flag_2 = 1;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Phase C
	if (htim->Instance == TIM4) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d11c      	bne.n	8000e14 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7f1b      	ldrb	r3, [r3, #28]
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d118      	bne.n	8000e14 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
			if (first_wave_flag_3 != 0) {
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <HAL_TIM_OC_DelayElapsedCallback+0xbe>
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, sudut_alpha);
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000dec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
				first_wave_flag_3 = 0;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
						(sudut_alpha+SCR_PULSE_WIDTH));
				first_wave_flag_3 = 1;
			}
		}
	}
}
 8000dfc:	e00a      	b.n	8000e14 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c
				first_wave_flag_3 = 1;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	200002ce 	.word	0x200002ce
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000164 	.word	0x20000164
 8000e2c:	40000400 	.word	0x40000400
 8000e30:	200002cf 	.word	0x200002cf
 8000e34:	200001ac 	.word	0x200001ac
 8000e38:	40000800 	.word	0x40000800
 8000e3c:	200002d0 	.word	0x200002d0
 8000e40:	200001f4 	.word	0x200001f4

08000e44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d157      	bne.n	8000f06 <HAL_TIM_IC_CaptureCallback+0xc2>
		uint16_t current_cnt;
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5a:	482e      	ldr	r0, [pc, #184]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e5c:	f001 f9af 	bl	80021be <HAL_GPIO_TogglePin>
		current_cnt = __HAL_TIM_GET_COUNTER(&htim5);
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	81fb      	strh	r3, [r7, #14]
		uint16_t diff = (uint16_t)(current_cnt - counter_last_val);
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	89fa      	ldrh	r2, [r7, #14]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	81bb      	strh	r3, [r7, #12]

		if (diff == 0u)
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d02c      	beq.n	8000ed6 <HAL_TIM_IC_CaptureCallback+0x92>
		{
			// No change
			// sudut_alpha = diff;
		}
		else if (diff & 0x8000u)
 8000e7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da14      	bge.n	8000eae <HAL_TIM_IC_CaptureCallback+0x6a>
		{
			// Counter has decreased, diff is negative
			sudut_alpha += (diff * 100);
 8000e84:	89bb      	ldrh	r3, [r7, #12]
 8000e86:	461a      	mov	r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	0091      	lsls	r1, r2, #2
 8000e90:	461a      	mov	r2, r3
 8000e92:	460b      	mov	r3, r1
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000eaa:	801a      	strh	r2, [r3, #0]
 8000eac:	e013      	b.n	8000ed6 <HAL_TIM_IC_CaptureCallback+0x92>

		}
		else
		{
			// Counter has increased, diff is positive
			sudut_alpha += (diff * 100);
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	0091      	lsls	r1, r2, #2
 8000eba:	461a      	mov	r2, r3
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ed4:	801a      	strh	r2, [r3, #0]
		}

		counter_last_val = current_cnt;
 8000ed6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000edc:	801a      	strh	r2, [r3, #0]

		if (sudut_alpha <= 5){
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	dc03      	bgt.n	8000ef0 <HAL_TIM_IC_CaptureCallback+0xac>
			sudut_alpha = 2;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	801a      	strh	r2, [r3, #0]
		//				else if(__HAL_TIM_GET_COUNTER(&htim5) >= 85 && __HAL_TIM_GET_COUNTER(&htim5) <= 100){
		//					sudut_alpha = 8500;
		//					__HAL_TIM_SET_COUNTER(&htim5, 85);
		//				}
	}
}
 8000eee:	e00a      	b.n	8000f06 <HAL_TIM_IC_CaptureCallback+0xc2>
		else if(sudut_alpha >= 10000){
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000efa:	4293      	cmp	r3, r2
 8000efc:	dd03      	ble.n	8000f06 <HAL_TIM_IC_CaptureCallback+0xc2>
			sudut_alpha = 10000;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000f00:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f04:	801a      	strh	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40000c00 	.word	0x40000c00
 8000f14:	40020800 	.word	0x40020800
 8000f18:	2000023c 	.word	0x2000023c
 8000f1c:	200002cc 	.word	0x200002cc
 8000f20:	20000000 	.word	0x20000000

08000f24 <set_alpha>:

void set_alpha(int alpha) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	if (button_device_select_state = 1){
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <set_alpha+0xb0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (alpha + PI_ANGLE_TIM));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f38:	3310      	adds	r3, #16
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <set_alpha+0xb4>)
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (alpha));
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <set_alpha+0xb4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim2, (alpha+10000+SCR_PULSE_WIDTH));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f4e:	3338      	adds	r3, #56	; 0x38
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <set_alpha+0xb4>)
 8000f52:	6812      	ldr	r2, [r2, #0]
 8000f54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f5c:	3338      	adds	r3, #56	; 0x38
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <set_alpha+0xb4>)
 8000f62:	60da      	str	r2, [r3, #12]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (alpha + PI_ANGLE_TIM));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f6a:	3310      	adds	r3, #16
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <set_alpha+0xb8>)
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (alpha));
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <set_alpha+0xb8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim3, (alpha+10000+SCR_PULSE_WIDTH));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f80:	3338      	adds	r3, #56	; 0x38
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <set_alpha+0xb8>)
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f8e:	3338      	adds	r3, #56	; 0x38
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <set_alpha+0xb8>)
 8000f94:	60da      	str	r2, [r3, #12]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (alpha + PI_ANGLE_TIM));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f9c:	3310      	adds	r3, #16
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <set_alpha+0xbc>)
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (alpha));
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <set_alpha+0xbc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim4, (alpha + 10000 + SCR_PULSE_WIDTH));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000fb2:	3338      	adds	r3, #56	; 0x38
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <set_alpha+0xbc>)
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000fc0:	3338      	adds	r3, #56	; 0x38
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <set_alpha+0xbc>)
 8000fc6:	60da      	str	r2, [r3, #12]
	}
	else{

	}
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	200002d1 	.word	0x200002d1
 8000fd8:	20000164 	.word	0x20000164
 8000fdc:	200001ac 	.word	0x200001ac
 8000fe0:	200001f4 	.word	0x200001f4

08000fe4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DEVICE_SEL_Pin && button_device_select_state == 1) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ff4:	d10a      	bne.n	800100c <HAL_GPIO_EXTI_Callback+0x28>
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d106      	bne.n	800100c <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim10);
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <HAL_GPIO_EXTI_Callback+0x38>)
 8001000:	f003 f868 	bl	80040d4 <HAL_TIM_Base_Start_IT>
		button_device_select_state = 0;
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <HAL_GPIO_EXTI_Callback+0x34>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e001      	b.n	8001010 <HAL_GPIO_EXTI_Callback+0x2c>
	}
	else {
		__NOP();
 800100c:	bf00      	nop
	}
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200002d1 	.word	0x200002d1
 800101c:	20000284 	.word	0x20000284

08001020 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

	/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	 */
	if(htim->Instance == TIM10){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10d      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x2e>
		if(HAL_GPIO_ReadPin(DEVICE_SEL_GPIO_Port, DEVICE_SEL_Pin) == GPIO_PIN_RESET){
 8001032:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001038:	f001 f890 	bl	800215c <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x2e>
			device_select == DEVICE_TRIAC;
			button_device_select_state = 1;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800104a:	f003 f8a5 	bl	8004198 <HAL_TIM_Base_Stop_IT>
		}
	}
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40014400 	.word	0x40014400
 800105c:	40020400 	.word	0x40020400
 8001060:	200002d1 	.word	0x200002d1
 8001064:	20000284 	.word	0x20000284

08001068 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_MspInit+0x4c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_ADC_MspInit+0x7c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d127      	bne.n	8001136 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_ADC_MspInit+0x80>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <HAL_ADC_MspInit+0x80>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_ADC_MspInit+0x80>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_ADC_MspInit+0x80>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_ADC_MspInit+0x80>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_ADC_MspInit+0x80>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800111e:	23fc      	movs	r3, #252	; 0xfc
 8001120:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_ADC_MspInit+0x84>)
 8001132:	f000 fe8f 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012000 	.word	0x40012000
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116c:	d135      	bne.n	80011da <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
 8001172:	4b63      	ldr	r3, [pc, #396]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a62      	ldr	r2, [pc, #392]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b60      	ldr	r3, [pc, #384]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	623b      	str	r3, [r7, #32]
 8001188:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	4b5c      	ldr	r3, [pc, #368]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a5b      	ldr	r2, [pc, #364]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b59      	ldr	r3, [pc, #356]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b8:	2301      	movs	r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4850      	ldr	r0, [pc, #320]	; (8001304 <HAL_TIM_Base_MspInit+0x1b8>)
 80011c4:	f000 fe46 	bl	8001e54 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	201c      	movs	r0, #28
 80011ce:	f000 fe0a 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d2:	201c      	movs	r0, #28
 80011d4:	f000 fe23 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80011d8:	e08e      	b.n	80012f8 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_TIM_Base_MspInit+0x1bc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d134      	bne.n	800124e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	4b45      	ldr	r3, [pc, #276]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a44      	ldr	r2, [pc, #272]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b42      	ldr	r3, [pc, #264]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800121c:	2310      	movs	r3, #16
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800122c:	2302      	movs	r3, #2
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	4835      	ldr	r0, [pc, #212]	; (800130c <HAL_TIM_Base_MspInit+0x1c0>)
 8001238:	f000 fe0c 	bl	8001e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	201d      	movs	r0, #29
 8001242:	f000 fdd0 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001246:	201d      	movs	r0, #29
 8001248:	f000 fde9 	bl	8001e1e <HAL_NVIC_EnableIRQ>
}
 800124c:	e054      	b.n	80012f8 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM4)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_TIM_Base_MspInit+0x1c4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d134      	bne.n	80012c2 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a20      	ldr	r2, [pc, #128]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012a0:	2302      	movs	r3, #2
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4818      	ldr	r0, [pc, #96]	; (800130c <HAL_TIM_Base_MspInit+0x1c0>)
 80012ac:	f000 fdd2 	bl	8001e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	201e      	movs	r0, #30
 80012b6:	f000 fd96 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012ba:	201e      	movs	r0, #30
 80012bc:	f000 fdaf 	bl	8001e1e <HAL_NVIC_EnableIRQ>
}
 80012c0:	e01a      	b.n	80012f8 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM10)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_TIM_Base_MspInit+0x1c8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d115      	bne.n	80012f8 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 80012d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012da:	6453      	str	r3, [r2, #68]	; 0x44
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_TIM_Base_MspInit+0x1b4>)
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2019      	movs	r0, #25
 80012ee:	f000 fd7a 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012f2:	2019      	movs	r0, #25
 80012f4:	f000 fd93 	bl	8001e1e <HAL_NVIC_EnableIRQ>
}
 80012f8:	bf00      	nop
 80012fa:	3738      	adds	r7, #56	; 0x38
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000
 8001308:	40000400 	.word	0x40000400
 800130c:	40020400 	.word	0x40020400
 8001310:	40000800 	.word	0x40000800
 8001314:	40014400 	.word	0x40014400

08001318 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_TIM_Encoder_MspInit+0x94>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d133      	bne.n	80013a2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_TIM_Encoder_MspInit+0x98>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_TIM_Encoder_MspInit+0x98>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001372:	2303      	movs	r3, #3
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001382:	2302      	movs	r3, #2
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <HAL_TIM_Encoder_MspInit+0x9c>)
 800138e:	f000 fd61 	bl	8001e54 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2032      	movs	r0, #50	; 0x32
 8001398:	f000 fd25 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800139c:	2032      	movs	r0, #50	; 0x32
 800139e:	f000 fd3e 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40000c00 	.word	0x40000c00
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d11f      	bne.n	800141a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a34      	ldr	r2, [pc, #208]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80013f6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001408:	2301      	movs	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <HAL_TIM_MspPostInit+0x100>)
 8001414:	f000 fd1e 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001418:	e047      	b.n	80014aa <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_TIM_MspPostInit+0x104>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d11e      	bne.n	8001462 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001440:	2321      	movs	r3, #33	; 0x21
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001450:	2302      	movs	r3, #2
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4817      	ldr	r0, [pc, #92]	; (80014b8 <HAL_TIM_MspPostInit+0x100>)
 800145c:	f000 fcfa 	bl	8001e54 <HAL_GPIO_Init>
}
 8001460:	e023      	b.n	80014aa <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <HAL_TIM_MspPostInit+0x108>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d11e      	bne.n	80014aa <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_TIM_MspPostInit+0xfc>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001488:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800149a:	2302      	movs	r3, #2
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <HAL_TIM_MspPostInit+0x100>)
 80014a6:	f000 fcd5 	bl	8001e54 <HAL_GPIO_Init>
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40000400 	.word	0x40000400
 80014c0:	40000800 	.word	0x40000800

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f8d8 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800151e:	f003 fa2f 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000284 	.word	0x20000284

0800152c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM2_IRQHandler+0x10>)
 8001532:	f003 fa25 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000164 	.word	0x20000164

08001540 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM3_IRQHandler+0x10>)
 8001546:	f003 fa1b 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001ac 	.word	0x200001ac

08001554 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM4_IRQHandler+0x10>)
 800155a:	f003 fa11 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001f4 	.word	0x200001f4

08001568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FIRING_MODE_Pin);
 800156c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001570:	f000 fe40 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEVICE_SEL_Pin);
 8001574:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001578:	f000 fe3c 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM5_IRQHandler+0x10>)
 8001586:	f003 f9fb 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000023c 	.word	0x2000023c

08001594 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <OTG_FS_IRQHandler+0x10>)
 800159a:	f000 ff93 	bl	80024c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200017b8 	.word	0x200017b8

080015a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <SystemInit+0x20>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <SystemInit+0x20>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e8:	4c0b      	ldr	r4, [pc, #44]	; (8001618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f6:	f7ff ffd7 	bl	80015a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f008 fa35 	bl	8009a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7fe ff6d 	bl	80004dc <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001610:	08009b38 	.word	0x08009b38
  ldr r2, =_sbss
 8001614:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001618:	20001ee4 	.word	0x20001ee4

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 fbc1 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fd0e 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fbd9 	bl	8001e3a <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 fba1 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000004 	.word	0x20000004
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2000000c 	.word	0x2000000c
 80016e8:	200002d4 	.word	0x200002d4

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200002d4 	.word	0x200002d4

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000000c 	.word	0x2000000c

0800174c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e033      	b.n	80017ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fcaa 	bl	80010c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d118      	bne.n	80017bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001792:	f023 0302 	bic.w	r3, r3, #2
 8001796:	f043 0202 	orr.w	r2, r3, #2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f94a 	bl	8001a38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ba:	e001      	b.n	80017c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1c>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e113      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x244>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d925      	bls.n	800184c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	3b1e      	subs	r3, #30
 8001816:	2207      	movs	r2, #7
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43da      	mvns	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	400a      	ands	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68d9      	ldr	r1, [r3, #12]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	4603      	mov	r3, r0
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4403      	add	r3, r0
 800183e:	3b1e      	subs	r3, #30
 8001840:	409a      	lsls	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	e022      	b.n	8001892 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6919      	ldr	r1, [r3, #16]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	2207      	movs	r2, #7
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	400a      	ands	r2, r1
 800186e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6919      	ldr	r1, [r3, #16]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	4603      	mov	r3, r0
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4403      	add	r3, r0
 8001888:	409a      	lsls	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b06      	cmp	r3, #6
 8001898:	d824      	bhi.n	80018e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3b05      	subs	r3, #5
 80018ac:	221f      	movs	r2, #31
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	400a      	ands	r2, r1
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b05      	subs	r3, #5
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34
 80018e2:	e04c      	b.n	800197e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b0c      	cmp	r3, #12
 80018ea:	d824      	bhi.n	8001936 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	3b23      	subs	r3, #35	; 0x23
 80018fe:	221f      	movs	r2, #31
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43da      	mvns	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	400a      	ands	r2, r1
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b23      	subs	r3, #35	; 0x23
 8001928:	fa00 f203 	lsl.w	r2, r0, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
 8001934:	e023      	b.n	800197e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b41      	subs	r3, #65	; 0x41
 8001948:	221f      	movs	r2, #31
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	400a      	ands	r2, r1
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	3b41      	subs	r3, #65	; 0x41
 8001972:	fa00 f203 	lsl.w	r2, r0, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_ADC_ConfigChannel+0x250>)
 8001980:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <HAL_ADC_ConfigChannel+0x254>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d10f      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1d8>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b12      	cmp	r3, #18
 8001992:	d10b      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_ADC_ConfigChannel+0x254>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d12b      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x23a>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_ADC_ConfigChannel+0x258>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d003      	beq.n	80019c8 <HAL_ADC_ConfigChannel+0x1f4>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b11      	cmp	r3, #17
 80019c6:	d122      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_ADC_ConfigChannel+0x258>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d111      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_ADC_ConfigChannel+0x25c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <HAL_ADC_ConfigChannel+0x260>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0c9a      	lsrs	r2, r3, #18
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f9      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40012300 	.word	0x40012300
 8001a28:	40012000 	.word	0x40012000
 8001a2c:	10000012 	.word	0x10000012
 8001a30:	20000004 	.word	0x20000004
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a40:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <ADC_Init+0x1f0>)
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	021a      	lsls	r2, r3, #8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <ADC_Init+0x1f4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e00f      	b.n	8001b36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0202 	bic.w	r2, r2, #2
 8001b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6899      	ldr	r1, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7e1b      	ldrb	r3, [r3, #24]
 8001b50:	005a      	lsls	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01b      	beq.n	8001b9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	035a      	lsls	r2, r3, #13
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e007      	b.n	8001bac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001baa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	051a      	lsls	r2, r3, #20
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bee:	025a      	lsls	r2, r3, #9
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	029a      	lsls	r2, r3, #10
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40012300 	.word	0x40012300
 8001c2c:	0f000001 	.word	0x0f000001

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff29 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff3e 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff31 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffa2 	bl	8001d8c <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e159      	b.n	8002124 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8148 	bne.w	800211e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d005      	beq.n	8001ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d130      	bne.n	8001f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 0201 	and.w	r2, r3, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d017      	beq.n	8001f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d123      	bne.n	8001f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a2 	beq.w	800211e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_GPIO_Init+0x2e8>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a56      	ldr	r2, [pc, #344]	; (800213c <HAL_GPIO_Init+0x2e8>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b54      	ldr	r3, [pc, #336]	; (800213c <HAL_GPIO_Init+0x2e8>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff6:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_GPIO_Init+0x2ec>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_GPIO_Init+0x2f0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d019      	beq.n	8002056 <HAL_GPIO_Init+0x202>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_GPIO_Init+0x2f4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0x1fe>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a47      	ldr	r2, [pc, #284]	; (800214c <HAL_GPIO_Init+0x2f8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00d      	beq.n	800204e <HAL_GPIO_Init+0x1fa>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a46      	ldr	r2, [pc, #280]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x1f6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a45      	ldr	r2, [pc, #276]	; (8002154 <HAL_GPIO_Init+0x300>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_GPIO_Init+0x1f2>
 8002042:	2304      	movs	r3, #4
 8002044:	e008      	b.n	8002058 <HAL_GPIO_Init+0x204>
 8002046:	2307      	movs	r3, #7
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x204>
 800204a:	2303      	movs	r3, #3
 800204c:	e004      	b.n	8002058 <HAL_GPIO_Init+0x204>
 800204e:	2302      	movs	r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x204>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x204>
 8002056:	2300      	movs	r3, #0
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	f002 0203 	and.w	r2, r2, #3
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	4093      	lsls	r3, r2
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002068:	4935      	ldr	r1, [pc, #212]	; (8002140 <HAL_GPIO_Init+0x2ec>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_GPIO_Init+0x304>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209a:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <HAL_GPIO_Init+0x304>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_GPIO_Init+0x304>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c4:	4a24      	ldr	r2, [pc, #144]	; (8002158 <HAL_GPIO_Init+0x304>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ca:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_GPIO_Init+0x304>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ee:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <HAL_GPIO_Init+0x304>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_GPIO_Init+0x304>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002118:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_GPIO_Init+0x304>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3301      	adds	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	f67f aea2 	bls.w	8001e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	40013800 	.word	0x40013800
 8002144:	40020000 	.word	0x40020000
 8002148:	40020400 	.word	0x40020400
 800214c:	40020800 	.word	0x40020800
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40021000 	.word	0x40021000
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e001      	b.n	800217e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	619a      	str	r2, [r3, #24]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d0:	887a      	ldrh	r2, [r7, #2]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	041a      	lsls	r2, r3, #16
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43d9      	mvns	r1, r3
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	400b      	ands	r3, r1
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	619a      	str	r2, [r3, #24]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fee6 	bl	8000fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	b08f      	sub	sp, #60	; 0x3c
 8002228:	af0a      	add	r7, sp, #40	; 0x28
 800222a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e10f      	b.n	8002456 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f007 f8ff 	bl	8009454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fc52 	bl	8005b1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	687e      	ldr	r6, [r7, #4]
 8002282:	466d      	mov	r5, sp
 8002284:	f106 0410 	add.w	r4, r6, #16
 8002288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002294:	e885 0003 	stmia.w	r5, {r0, r1}
 8002298:	1d33      	adds	r3, r6, #4
 800229a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800229c:	6838      	ldr	r0, [r7, #0]
 800229e:	f003 fb29 	bl	80058f4 <USB_CoreInit>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0d0      	b.n	8002456 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fc40 	bl	8005b40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e04a      	b.n	800235c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	333d      	adds	r3, #61	; 0x3d
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	333c      	adds	r3, #60	; 0x3c
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	b298      	uxth	r0, r3
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3344      	adds	r3, #68	; 0x44
 8002302:	4602      	mov	r2, r0
 8002304:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3340      	adds	r3, #64	; 0x40
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	3348      	adds	r3, #72	; 0x48
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	334c      	adds	r3, #76	; 0x4c
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3354      	adds	r3, #84	; 0x54
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3301      	adds	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3af      	bcc.n	80022c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e044      	b.n	80023f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	3301      	adds	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3b5      	bcc.n	800236c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	687e      	ldr	r6, [r7, #4]
 8002408:	466d      	mov	r5, sp
 800240a:	f106 0410 	add.w	r4, r6, #16
 800240e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002416:	e894 0003 	ldmia.w	r4, {r0, r1}
 800241a:	e885 0003 	stmia.w	r5, {r0, r1}
 800241e:	1d33      	adds	r3, r6, #4
 8002420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f003 fbd8 	bl	8005bd8 <USB_DevInit>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e00d      	b.n	8002456 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fd27 	bl	8006ea2 <USB_DevDisconnect>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800245e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_PCD_Start+0x1c>
 8002476:	2302      	movs	r3, #2
 8002478:	e020      	b.n	80024bc <HAL_PCD_Start+0x5e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	2b01      	cmp	r3, #1
 8002488:	d109      	bne.n	800249e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800248e:	2b01      	cmp	r3, #1
 8002490:	d005      	beq.n	800249e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fb2a 	bl	8005afc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 fcd7 	bl	8006e60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b08d      	sub	sp, #52	; 0x34
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 fd95 	bl	800700a <USB_GetMode>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 848a 	bne.w	8002dfc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f004 fcf9 	bl	8006ee4 <USB_ReadInterrupts>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8480 	beq.w	8002dfa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f004 fce6 	bl	8006ee4 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f002 0202 	and.w	r2, r2, #2
 8002530:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f004 fcd4 	bl	8006ee4 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b10      	cmp	r3, #16
 8002544:	d161      	bne.n	800260a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0210 	bic.w	r2, r2, #16
 8002554:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	0c5b      	lsrs	r3, r3, #17
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	2b02      	cmp	r3, #2
 8002580:	d124      	bne.n	80025cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d035      	beq.n	80025fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	6a38      	ldr	r0, [r7, #32]
 80025a2:	f004 fb0b 	bl	8006bbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b2:	441a      	add	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c4:	441a      	add	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	621a      	str	r2, [r3, #32]
 80025ca:	e016      	b.n	80025fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	0c5b      	lsrs	r3, r3, #17
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d110      	bne.n	80025fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025de:	2208      	movs	r2, #8
 80025e0:	4619      	mov	r1, r3
 80025e2:	6a38      	ldr	r0, [r7, #32]
 80025e4:	f004 faea 	bl	8006bbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	6a1a      	ldr	r2, [r3, #32]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f4:	441a      	add	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0210 	orr.w	r2, r2, #16
 8002608:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f004 fc68 	bl	8006ee4 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800261e:	f040 80a7 	bne.w	8002770 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 fc6d 	bl	8006f0a <USB_ReadDevAllOutEpInterrupt>
 8002630:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002632:	e099      	b.n	8002768 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 808e 	beq.w	800275c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f004 fc91 	bl	8006f72 <USB_ReadDevOutEPInterrupt>
 8002650:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800266e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fec3 	bl	80033fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	2308      	movs	r3, #8
 8002690:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 ff99 	bl	80035cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b0:	461a      	mov	r2, r3
 80026b2:	2310      	movs	r3, #16
 80026b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d030      	beq.n	8002722 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d109      	bne.n	80026e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	3304      	adds	r3, #4
 80026f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	78db      	ldrb	r3, [r3, #3]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d108      	bne.n	8002710 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f006 ff9e 	bl	800964c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271c:	461a      	mov	r2, r3
 800271e:	2302      	movs	r3, #2
 8002720:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2320      	movs	r3, #32
 800273c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3301      	adds	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	f47f af62 	bne.w	8002634 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f004 fbb5 	bl	8006ee4 <USB_ReadInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002780:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002784:	f040 80db 	bne.w	800293e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f004 fbd6 	bl	8006f3e <USB_ReadDevAllInEpInterrupt>
 8002792:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002798:	e0cd      	b.n	8002936 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80c2 	beq.w	800292a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f004 fbfc 	bl	8006fae <USB_ReadDevInEPInterrupt>
 80027b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d057      	beq.n	8002872 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	2201      	movs	r2, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69f9      	ldr	r1, [r7, #28]
 80027de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027e2:	4013      	ands	r3, r2
 80027e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f2:	461a      	mov	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d132      	bne.n	8002866 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334c      	adds	r3, #76	; 0x4c
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	3348      	adds	r3, #72	; 0x48
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4419      	add	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4403      	add	r3, r0
 8002834:	334c      	adds	r3, #76	; 0x4c
 8002836:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d113      	bne.n	8002866 <HAL_PCD_IRQHandler+0x3a2>
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3354      	adds	r3, #84	; 0x54
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d108      	bne.n	8002866 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800285e:	461a      	mov	r2, r3
 8002860:	2101      	movs	r1, #1
 8002862:	f004 fc03 	bl	800706c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f006 fe72 	bl	8009556 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002888:	461a      	mov	r2, r3
 800288a:	2308      	movs	r3, #8
 800288c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a4:	461a      	mov	r2, r3
 80028a6:	2310      	movs	r3, #16
 80028a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c0:	461a      	mov	r2, r3
 80028c2:	2340      	movs	r3, #64	; 0x40
 80028c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d023      	beq.n	8002918 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d2:	6a38      	ldr	r0, [r7, #32]
 80028d4:	f003 fae4 	bl	8005ea0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	3338      	adds	r3, #56	; 0x38
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	3304      	adds	r3, #4
 80028ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	78db      	ldrb	r3, [r3, #3]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d108      	bne.n	8002906 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f006 feb5 	bl	8009670 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002912:	461a      	mov	r2, r3
 8002914:	2302      	movs	r3, #2
 8002916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fcdb 	bl	80032e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	3301      	adds	r3, #1
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f af2e 	bne.w	800279a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f004 face 	bl	8006ee4 <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800294e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002952:	d122      	bne.n	800299a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800296e:	2b01      	cmp	r3, #1
 8002970:	d108      	bne.n	8002984 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fec3 	bl	8003708 <HAL_PCDEx_LPM_Callback>
 8002982:	e002      	b.n	800298a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f006 fe53 	bl	8009630 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 faa0 	bl	8006ee4 <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ae:	d112      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f006 fe0f 	bl	80095e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029d4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fa82 	bl	8006ee4 <USB_ReadInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	f040 80b7 	bne.w	8002b5c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2110      	movs	r1, #16
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fa49 	bl	8005ea0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a12:	e046      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a20:	461a      	mov	r2, r3
 8002a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a54:	461a      	mov	r2, r3
 8002a56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a5a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6c:	0151      	lsls	r1, r2, #5
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	440a      	add	r2, r1
 8002a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a9a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3b3      	bcc.n	8002a14 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002abe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d016      	beq.n	8002af6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad8:	f043 030b 	orr.w	r3, r3, #11
 8002adc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aee:	f043 030b 	orr.w	r3, r3, #11
 8002af2:	6453      	str	r3, [r2, #68]	; 0x44
 8002af4:	e015      	b.n	8002b22 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b08:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b0c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b1c:	f043 030b 	orr.w	r3, r3, #11
 8002b20:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b34:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b46:	461a      	mov	r2, r3
 8002b48:	f004 fa90 	bl	800706c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f004 f9bf 	bl	8006ee4 <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b70:	d124      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f004 fa55 	bl	8007026 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 fa0a 	bl	8005f9a <USB_GetDevSpeed>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681c      	ldr	r4, [r3, #0]
 8002b92:	f001 f9e9 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8002b96:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f002 ff09 	bl	80059b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f006 fcfd 	bl	80095a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f004 f98f 	bl	8006ee4 <USB_ReadInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d10a      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f006 fcda 	bl	800958a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f002 0208 	and.w	r2, r2, #8
 8002be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 f97a 	bl	8006ee4 <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b80      	cmp	r3, #128	; 0x80
 8002bf8:	d122      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c06:	2301      	movs	r3, #1
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	e014      	b.n	8002c36 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fb27 	bl	800327e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	3301      	adds	r3, #1
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3e5      	bcc.n	8002c0c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f004 f94d 	bl	8006ee4 <USB_ReadInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c54:	d13b      	bne.n	8002cce <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c56:	2301      	movs	r3, #1
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	e02b      	b.n	8002cb4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3340      	adds	r3, #64	; 0x40
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d115      	bne.n	8002cae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c82:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da12      	bge.n	8002cae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	333f      	adds	r3, #63	; 0x3f
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fae8 	bl	800327e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3ce      	bcc.n	8002c5c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 f906 	bl	8006ee4 <USB_ReadInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ce2:	d155      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	e045      	b.n	8002d76 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d12e      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da2b      	bge.n	8002d70 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d24:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d121      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6c:	6053      	str	r3, [r2, #4]
            break;
 8002d6e:	e007      	b.n	8002d80 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3b4      	bcc.n	8002cea <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 f8a5 	bl	8006ee4 <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d10a      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f006 fc74 	bl	8009694 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f004 f88f 	bl	8006ee4 <USB_ReadInterrupts>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d115      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f006 fc64 	bl	80096b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	e000      	b.n	8002dfc <HAL_PCD_IRQHandler+0x938>
      return;
 8002dfa:	bf00      	nop
    }
  }
}
 8002dfc:	3734      	adds	r7, #52	; 0x34
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}

08002e02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_PCD_SetAddress+0x1a>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e013      	b.n	8002e44 <HAL_PCD_SetAddress+0x42>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 ffed 	bl	8006e14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	70fb      	strb	r3, [r7, #3]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	803b      	strh	r3, [r7, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da0f      	bge.n	8002e92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	3338      	adds	r3, #56	; 0x38
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	705a      	strb	r2, [r3, #1]
 8002e90:	e00f      	b.n	8002eb2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 020f 	and.w	r2, r3, #15
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ebe:	883a      	ldrh	r2, [r7, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	78ba      	ldrb	r2, [r7, #2]
 8002ec8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002edc:	78bb      	ldrb	r3, [r7, #2]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d102      	bne.n	8002ee8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_PCD_EP_Open+0xaa>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e00e      	b.n	8002f14 <HAL_PCD_EP_Open+0xc8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 f86d 	bl	8005fe4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f12:	7afb      	ldrb	r3, [r7, #11]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	da0f      	bge.n	8002f50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	3338      	adds	r3, #56	; 0x38
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	3304      	adds	r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	705a      	strb	r2, [r3, #1]
 8002f4e:	e00f      	b.n	8002f70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 020f 	and.w	r2, r3, #15
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_PCD_EP_Close+0x6e>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e00e      	b.n	8002fa8 <HAL_PCD_EP_Close+0x8c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68f9      	ldr	r1, [r7, #12]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 f8ab 	bl	80060f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6979      	ldr	r1, [r7, #20]
 8003024:	f003 fb8a 	bl	800673c <USB_EP0StartXfer>
 8003028:	e008      	b.n	800303c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	f003 f938 	bl	80062ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003068:	681b      	ldr	r3, [r3, #0]
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	460b      	mov	r3, r1
 8003084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003086:	7afb      	ldrb	r3, [r7, #11]
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3338      	adds	r3, #56	; 0x38
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2201      	movs	r2, #1
 80030b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	f003 fb28 	bl	800673c <USB_EP0StartXfer>
 80030ec:	e008      	b.n	8003100 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	6979      	ldr	r1, [r7, #20]
 80030fc:	f003 f8d6 	bl	80062ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	d901      	bls.n	8003128 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e050      	b.n	80031ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800312c:	2b00      	cmp	r3, #0
 800312e:	da0f      	bge.n	8003150 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 020f 	and.w	r2, r3, #15
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	3338      	adds	r3, #56	; 0x38
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	3304      	adds	r3, #4
 8003146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	705a      	strb	r2, [r3, #1]
 800314e:	e00d      	b.n	800316c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_PCD_EP_SetStall+0x82>
 8003188:	2302      	movs	r3, #2
 800318a:	e01e      	b.n	80031ca <HAL_PCD_EP_SetStall+0xc0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68f9      	ldr	r1, [r7, #12]
 800319a:	4618      	mov	r0, r3
 800319c:	f003 fd66 	bl	8006c6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	b2d9      	uxtb	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031ba:	461a      	mov	r2, r3
 80031bc:	f003 ff56 	bl	800706c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d901      	bls.n	80031f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e042      	b.n	8003276 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da0f      	bge.n	8003218 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	3338      	adds	r3, #56	; 0x38
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	705a      	strb	r2, [r3, #1]
 8003216:	e00f      	b.n	8003238 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_PCD_EP_ClrStall+0x86>
 8003254:	2302      	movs	r3, #2
 8003256:	e00e      	b.n	8003276 <HAL_PCD_EP_ClrStall+0xa4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68f9      	ldr	r1, [r7, #12]
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fd6e 	bl	8006d48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800328a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800328e:	2b00      	cmp	r3, #0
 8003290:	da0c      	bge.n	80032ac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3338      	adds	r3, #56	; 0x38
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	3304      	adds	r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e00c      	b.n	80032c6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	3304      	adds	r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fb8d 	bl	80069ec <USB_EPStopXfer>
 80032d2:	4603      	mov	r3, r0
 80032d4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032d6:	7afb      	ldrb	r3, [r7, #11]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	3338      	adds	r3, #56	; 0x38
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	3304      	adds	r3, #4
 8003306:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	429a      	cmp	r2, r3
 8003312:	d901      	bls.n	8003318 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e06c      	b.n	80033f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	429a      	cmp	r2, r3
 800332c:	d902      	bls.n	8003334 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	3303      	adds	r3, #3
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800333c:	e02b      	b.n	8003396 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	429a      	cmp	r2, r3
 8003352:	d902      	bls.n	800335a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3303      	adds	r3, #3
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6919      	ldr	r1, [r3, #16]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003372:	b2db      	uxtb	r3, r3
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4603      	mov	r3, r0
 8003378:	6978      	ldr	r0, [r7, #20]
 800337a:	f003 fbe1 	bl	8006b40 <USB_WritePacket>

    ep->xfer_buff  += len;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	441a      	add	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a1a      	ldr	r2, [r3, #32]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	441a      	add	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d809      	bhi.n	80033c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d203      	bcs.n	80033c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1be      	bne.n	800333e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d811      	bhi.n	80033f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	2201      	movs	r2, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	6939      	ldr	r1, [r7, #16]
 80033e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ec:	4013      	ands	r3, r2
 80033ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	333c      	adds	r3, #60	; 0x3c
 8003414:	3304      	adds	r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d17b      	bne.n	800352a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	4a61      	ldr	r2, [pc, #388]	; (80035c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	f240 80b9 	bls.w	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80b3 	beq.w	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345e:	461a      	mov	r2, r3
 8003460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003464:	6093      	str	r3, [r2, #8]
 8003466:	e0a7      	b.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	2320      	movs	r3, #32
 8003482:	6093      	str	r3, [r2, #8]
 8003484:	e098      	b.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 8093 	bne.w	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	4a4b      	ldr	r2, [pc, #300]	; (80035c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d90f      	bls.n	80034ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b0:	461a      	mov	r2, r3
 80034b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b6:	6093      	str	r3, [r2, #8]
 80034b8:	e07e      	b.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	0159      	lsls	r1, r3, #5
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	440b      	add	r3, r1
 80034dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	1ad2      	subs	r2, r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d114      	bne.n	800351c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003504:	461a      	mov	r2, r3
 8003506:	2101      	movs	r1, #1
 8003508:	f003 fdb0 	bl	800706c <USB_EP0_OutStart>
 800350c:	e006      	b.n	800351c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	441a      	add	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f005 fffc 	bl	8009520 <HAL_PCD_DataOutStageCallback>
 8003528:	e046      	b.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d124      	bne.n	800357c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	461a      	mov	r2, r3
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	6093      	str	r3, [r2, #8]
 8003550:	e032      	b.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	461a      	mov	r2, r3
 800356a:	2320      	movs	r3, #32
 800356c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	4619      	mov	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f005 ffd3 	bl	8009520 <HAL_PCD_DataOutStageCallback>
 800357a:	e01d      	b.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d114      	bne.n	80035ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035a4:	461a      	mov	r2, r3
 80035a6:	2100      	movs	r1, #0
 80035a8:	f003 fd60 	bl	800706c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f005 ffb4 	bl	8009520 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	4f54300a 	.word	0x4f54300a
 80035c8:	4f54310a 	.word	0x4f54310a

080035cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	333c      	adds	r3, #60	; 0x3c
 80035e4:	3304      	adds	r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a15      	ldr	r2, [pc, #84]	; (8003654 <PCD_EP_OutSetupPacket_int+0x88>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d90e      	bls.n	8003620 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f005 ff6b 	bl	80094fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <PCD_EP_OutSetupPacket_int+0x88>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d90c      	bls.n	8003648 <PCD_EP_OutSetupPacket_int+0x7c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d108      	bne.n	8003648 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003640:	461a      	mov	r2, r3
 8003642:	2101      	movs	r1, #1
 8003644:	f003 fd12 	bl	800706c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	4f54300a 	.word	0x4f54300a

08003658 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
 8003664:	4613      	mov	r3, r2
 8003666:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003676:	883b      	ldrh	r3, [r7, #0]
 8003678:	0419      	lsls	r1, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	430a      	orrs	r2, r1
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
 8003684:	e028      	b.n	80036d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e00d      	b.n	80036b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	3340      	adds	r3, #64	; 0x40
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4413      	add	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	3301      	adds	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3ec      	bcc.n	800369a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036c0:	883b      	ldrh	r3, [r7, #0]
 80036c2:	0418      	lsls	r0, r3, #16
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	4302      	orrs	r2, r0
 80036d0:	3340      	adds	r3, #64	; 0x40
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e267      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d075      	beq.n	800382a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373e:	4b88      	ldr	r3, [pc, #544]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00c      	beq.n	8003764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4b85      	ldr	r3, [pc, #532]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003752:	2b08      	cmp	r3, #8
 8003754:	d112      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b82      	ldr	r3, [pc, #520]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003762:	d10b      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4b7e      	ldr	r3, [pc, #504]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05b      	beq.n	8003828 <HAL_RCC_OscConfig+0x108>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d157      	bne.n	8003828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e242      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x74>
 8003786:	4b76      	ldr	r3, [pc, #472]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a75      	ldr	r2, [pc, #468]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x98>
 800379e:	4b70      	ldr	r3, [pc, #448]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6f      	ldr	r2, [pc, #444]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6c      	ldr	r2, [pc, #432]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 80037b8:	4b69      	ldr	r3, [pc, #420]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a68      	ldr	r2, [pc, #416]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b66      	ldr	r3, [pc, #408]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a65      	ldr	r2, [pc, #404]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fd ff88 	bl	80016ec <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fd ff84 	bl	80016ec <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e207      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xc0>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fd ff74 	bl	80016ec <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7fd ff70 	bl	80016ec <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1f3      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0xe8>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d063      	beq.n	80038fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003836:	4b4a      	ldr	r3, [pc, #296]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384a:	2b08      	cmp	r3, #8
 800384c:	d11c      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b44      	ldr	r3, [pc, #272]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e1c7      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003872:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4937      	ldr	r1, [pc, #220]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	e03a      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d020      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003890:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_OscConfig+0x244>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fd ff29 	bl	80016ec <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389e:	f7fd ff25 	bl	80016ec <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1a8      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4925      	ldr	r1, [pc, #148]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
 80038d0:	e015      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_RCC_OscConfig+0x244>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd ff08 	bl	80016ec <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fd ff04 	bl	80016ec <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e187      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d036      	beq.n	8003978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <HAL_RCC_OscConfig+0x248>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fee8 	bl	80016ec <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003920:	f7fd fee4 	bl	80016ec <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e167      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x200>
 800393e:	e01b      	b.n	8003978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_RCC_OscConfig+0x248>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fd fed1 	bl	80016ec <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	e00e      	b.n	800396c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394e:	f7fd fecd 	bl	80016ec <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d907      	bls.n	800396c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e150      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
 8003960:	40023800 	.word	0x40023800
 8003964:	42470000 	.word	0x42470000
 8003968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b88      	ldr	r3, [pc, #544]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ea      	bne.n	800394e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8097 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b81      	ldr	r3, [pc, #516]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	4b7d      	ldr	r3, [pc, #500]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a7c      	ldr	r2, [pc, #496]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b7a      	ldr	r3, [pc, #488]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b77      	ldr	r3, [pc, #476]	; (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d118      	bne.n	80039f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b74      	ldr	r3, [pc, #464]	; (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a73      	ldr	r2, [pc, #460]	; (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fe8d 	bl	80016ec <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d6:	f7fd fe89 	bl	80016ec <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e10c      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x2ea>
 80039fc:	4b64      	ldr	r3, [pc, #400]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	4a63      	ldr	r2, [pc, #396]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6713      	str	r3, [r2, #112]	; 0x70
 8003a08:	e01c      	b.n	8003a44 <HAL_RCC_OscConfig+0x324>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x30c>
 8003a12:	4b5f      	ldr	r3, [pc, #380]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a5e      	ldr	r2, [pc, #376]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a5b      	ldr	r2, [pc, #364]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0x324>
 8003a2c:	4b58      	ldr	r3, [pc, #352]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a57      	ldr	r2, [pc, #348]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	4b55      	ldr	r3, [pc, #340]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a54      	ldr	r2, [pc, #336]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 0304 	bic.w	r3, r3, #4
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fd fe4e 	bl	80016ec <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a54:	f7fd fe4a 	bl	80016ec <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0cb      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	4b49      	ldr	r3, [pc, #292]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0ee      	beq.n	8003a54 <HAL_RCC_OscConfig+0x334>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a78:	f7fd fe38 	bl	80016ec <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fd fe34 	bl	80016ec <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0b5      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a96:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1ee      	bne.n	8003a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	4a38      	ldr	r2, [pc, #224]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a1 	beq.w	8003c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003abe:	4b34      	ldr	r3, [pc, #208]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d05c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d141      	bne.n	8003b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fe08 	bl	80016ec <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fd fe04 	bl	80016ec <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e087      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	3b01      	subs	r3, #1
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	491b      	ldr	r1, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fd fddd 	bl	80016ec <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fd fdd9 	bl	80016ec <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e05c      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x416>
 8003b54:	e054      	b.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fdc6 	bl	80016ec <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fd fdc2 	bl	80016ec <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e045      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x444>
 8003b82:	e03d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e038      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40007000 	.word	0x40007000
 8003b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d028      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d121      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d11a      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d111      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	3b01      	subs	r3, #1
 8003be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800

08003c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0cc      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d90c      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0b8      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c64:	4b59      	ldr	r3, [pc, #356]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a58      	ldr	r2, [pc, #352]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a52      	ldr	r2, [pc, #328]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	494d      	ldr	r1, [pc, #308]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d044      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d119      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e07f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cde:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e067      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4934      	ldr	r1, [pc, #208]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fd fcf4 	bl	80016ec <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d08:	f7fd fcf0 	bl	80016ec <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e04f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 020c 	and.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1eb      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20c      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e032      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4916      	ldr	r1, [pc, #88]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	490e      	ldr	r1, [pc, #56]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d96:	f000 f821 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	490a      	ldr	r1, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd fc54 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023c00 	.word	0x40023c00
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	08009b18 	.word	0x08009b18
 8003dd4:	20000004 	.word	0x20000004
 8003dd8:	20000008 	.word	0x20000008

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b090      	sub	sp, #64	; 0x40
 8003de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
 8003de8:	2300      	movs	r3, #0
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dec:	2300      	movs	r3, #0
 8003dee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df4:	4b59      	ldr	r3, [pc, #356]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x40>
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	f200 80a1 	bhi.w	8003f48 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e0e:	e09b      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b53      	ldr	r3, [pc, #332]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e14:	e09b      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e16:	4b53      	ldr	r3, [pc, #332]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e1a:	e098      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e1c:	4b4f      	ldr	r3, [pc, #316]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e26:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d028      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e32:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	2200      	movs	r2, #0
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	627a      	str	r2, [r7, #36]	; 0x24
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e44:	2100      	movs	r1, #0
 8003e46:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e48:	fb03 f201 	mul.w	r2, r3, r1
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	fb00 f303 	mul.w	r3, r0, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	4a43      	ldr	r2, [pc, #268]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e56:	fba0 1202 	umull	r1, r2, r0, r2
 8003e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e5c:	460a      	mov	r2, r1
 8003e5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e62:	4413      	add	r3, r2
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	2200      	movs	r2, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	61fa      	str	r2, [r7, #28]
 8003e6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e76:	f7fc f9af 	bl	80001d8 <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4613      	mov	r3, r2
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e82:	e053      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e84:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	099b      	lsrs	r3, r3, #6
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	617a      	str	r2, [r7, #20]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e96:	f04f 0b00 	mov.w	fp, #0
 8003e9a:	4652      	mov	r2, sl
 8003e9c:	465b      	mov	r3, fp
 8003e9e:	f04f 0000 	mov.w	r0, #0
 8003ea2:	f04f 0100 	mov.w	r1, #0
 8003ea6:	0159      	lsls	r1, r3, #5
 8003ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eac:	0150      	lsls	r0, r2, #5
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	ebb2 080a 	subs.w	r8, r2, sl
 8003eb6:	eb63 090b 	sbc.w	r9, r3, fp
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ec6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ece:	ebb2 0408 	subs.w	r4, r2, r8
 8003ed2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	00eb      	lsls	r3, r5, #3
 8003ee0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee4:	00e2      	lsls	r2, r4, #3
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	461d      	mov	r5, r3
 8003eea:	eb14 030a 	adds.w	r3, r4, sl
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	eb45 030b 	adc.w	r3, r5, fp
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f02:	4629      	mov	r1, r5
 8003f04:	028b      	lsls	r3, r1, #10
 8003f06:	4621      	mov	r1, r4
 8003f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	028a      	lsls	r2, r1, #10
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f16:	2200      	movs	r2, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	60fa      	str	r2, [r7, #12]
 8003f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f20:	f7fc f95a 	bl	80001d8 <__aeabi_uldivmod>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	3301      	adds	r3, #1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f46:	e002      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3740      	adds	r7, #64	; 0x40
 8003f54:	46bd      	mov	sp, r7
 8003f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	017d7840 	.word	0x017d7840

08003f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e041      	b.n	8004016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd f8d0 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f001 f82e 	bl	8005020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e03c      	b.n	80040b2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <HAL_TIM_Base_Start+0xa0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d013      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <HAL_TIM_Base_Start+0xa4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <HAL_TIM_Base_Start+0xa8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a17      	ldr	r2, [pc, #92]	; (80040cc <HAL_TIM_Base_Start+0xac>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <HAL_TIM_Base_Start+0xb0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d111      	bne.n	80040a0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d010      	beq.n	80040b0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409e:	e007      	b.n	80040b0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40000c00 	.word	0x40000c00
 80040d0:	40014000 	.word	0x40014000

080040d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d001      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e044      	b.n	8004176 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <HAL_TIM_Base_Start_IT+0xb0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004116:	d013      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <HAL_TIM_Base_Start_IT+0xb4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <HAL_TIM_Base_Start_IT+0xb8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_TIM_Base_Start_IT+0xbc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <HAL_TIM_Base_Start_IT+0xc0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b06      	cmp	r3, #6
 8004150:	d010      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	e007      	b.n	8004174 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40014000 	.word	0x40014000

08004198 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10f      	bne.n	80041e0 <HAL_TIM_Base_Stop_IT+0x48>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	f240 4344 	movw	r3, #1092	; 0x444
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_Base_Stop_IT+0x48>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e041      	b.n	800428c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f839 	bl	8004294 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f000 fef3 	bl	8005020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_TIM_OC_Start_IT+0x28>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e022      	b.n	8004316 <HAL_TIM_OC_Start_IT+0x6e>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d109      	bne.n	80042ea <HAL_TIM_OC_Start_IT+0x42>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	bf14      	ite	ne
 80042e2:	2301      	movne	r3, #1
 80042e4:	2300      	moveq	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	e015      	b.n	8004316 <HAL_TIM_OC_Start_IT+0x6e>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d109      	bne.n	8004304 <HAL_TIM_OC_Start_IT+0x5c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	bf14      	ite	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	2300      	moveq	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e008      	b.n	8004316 <HAL_TIM_OC_Start_IT+0x6e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0b3      	b.n	8004486 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d104      	bne.n	800432e <HAL_TIM_OC_Start_IT+0x86>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432c:	e013      	b.n	8004356 <HAL_TIM_OC_Start_IT+0xae>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d104      	bne.n	800433e <HAL_TIM_OC_Start_IT+0x96>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800433c:	e00b      	b.n	8004356 <HAL_TIM_OC_Start_IT+0xae>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d104      	bne.n	800434e <HAL_TIM_OC_Start_IT+0xa6>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434c:	e003      	b.n	8004356 <HAL_TIM_OC_Start_IT+0xae>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b0c      	cmp	r3, #12
 800435a:	d841      	bhi.n	80043e0 <HAL_TIM_OC_Start_IT+0x138>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <HAL_TIM_OC_Start_IT+0xbc>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	08004399 	.word	0x08004399
 8004368:	080043e1 	.word	0x080043e1
 800436c:	080043e1 	.word	0x080043e1
 8004370:	080043e1 	.word	0x080043e1
 8004374:	080043ab 	.word	0x080043ab
 8004378:	080043e1 	.word	0x080043e1
 800437c:	080043e1 	.word	0x080043e1
 8004380:	080043e1 	.word	0x080043e1
 8004384:	080043bd 	.word	0x080043bd
 8004388:	080043e1 	.word	0x080043e1
 800438c:	080043e1 	.word	0x080043e1
 8004390:	080043e1 	.word	0x080043e1
 8004394:	080043cf 	.word	0x080043cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0202 	orr.w	r2, r2, #2
 80043a6:	60da      	str	r2, [r3, #12]
      break;
 80043a8:	e01d      	b.n	80043e6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0204 	orr.w	r2, r2, #4
 80043b8:	60da      	str	r2, [r3, #12]
      break;
 80043ba:	e014      	b.n	80043e6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	60da      	str	r2, [r3, #12]
      break;
 80043cc:	e00b      	b.n	80043e6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0210 	orr.w	r2, r2, #16
 80043dc:	60da      	str	r2, [r3, #12]
      break;
 80043de:	e002      	b.n	80043e6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      break;
 80043e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d14b      	bne.n	8004484 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2201      	movs	r2, #1
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f9d5 	bl	80057a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a24      	ldr	r2, [pc, #144]	; (8004490 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d107      	bne.n	8004414 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004412:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <HAL_TIM_OC_Start_IT+0x1e8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_TIM_OC_Start_IT+0x1a8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d013      	beq.n	8004450 <HAL_TIM_OC_Start_IT+0x1a8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_TIM_OC_Start_IT+0x1ec>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_TIM_OC_Start_IT+0x1a8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a18      	ldr	r2, [pc, #96]	; (8004498 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_TIM_OC_Start_IT+0x1a8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a16      	ldr	r2, [pc, #88]	; (800449c <HAL_TIM_OC_Start_IT+0x1f4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_TIM_OC_Start_IT+0x1a8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <HAL_TIM_OC_Start_IT+0x1f8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d111      	bne.n	8004474 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b06      	cmp	r3, #6
 8004460:	d010      	beq.n	8004484 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	e007      	b.n	8004484 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40010000 	.word	0x40010000
 8004494:	40000400 	.word	0x40000400
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40014000 	.word	0x40014000

080044a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e041      	b.n	800453a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f839 	bl	8004542 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f000 fd9c 	bl	8005020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e041      	b.n	80045ee <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f839 	bl	80045f6 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f000 fd42 	bl	8005020 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0208 	bic.w	r2, r2, #8
 80045aa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6819      	ldr	r1, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004624:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800462c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004634:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d108      	bne.n	800464e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800463c:	7bbb      	ldrb	r3, [r7, #14]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004642:	7b7b      	ldrb	r3, [r7, #13]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d102      	bne.n	800464e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004648:	7b3b      	ldrb	r3, [r7, #12]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e03b      	b.n	80046ca <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0202 	orr.w	r2, r2, #2
 8004680:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0204 	orr.w	r2, r2, #4
 8004690:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f001 f882 	bl	80057a4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	2104      	movs	r1, #4
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f87b 	bl	80057a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d107      	bne.n	80046c8 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000

080046d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e097      	b.n	800481c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fc fe09 	bl	8001318 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800471c:	f023 0307 	bic.w	r3, r3, #7
 8004720:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3304      	adds	r3, #4
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f000 fc77 	bl	8005020 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	4313      	orrs	r3, r2
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004778:	f023 030c 	bic.w	r3, r3, #12
 800477c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	4313      	orrs	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	011a      	lsls	r2, r3, #4
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	031b      	lsls	r3, r3, #12
 80047a8:	4313      	orrs	r3, r2
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	4313      	orrs	r3, r2
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004834:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800483c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004844:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800484c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d110      	bne.n	8004876 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d102      	bne.n	8004860 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800485a:	7b7b      	ldrb	r3, [r7, #13]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d001      	beq.n	8004864 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e089      	b.n	8004978 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004874:	e031      	b.n	80048da <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d110      	bne.n	800489e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800487c:	7bbb      	ldrb	r3, [r7, #14]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d102      	bne.n	8004888 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004882:	7b3b      	ldrb	r3, [r7, #12]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d001      	beq.n	800488c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e075      	b.n	8004978 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800489c:	e01d      	b.n	80048da <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d108      	bne.n	80048b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d105      	bne.n	80048b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048aa:	7b7b      	ldrb	r3, [r7, #13]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d102      	bne.n	80048b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048b0:	7b3b      	ldrb	r3, [r7, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d001      	beq.n	80048ba <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e05e      	b.n	8004978 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d010      	beq.n	8004908 <HAL_TIM_Encoder_Start_IT+0xe4>
 80048e6:	e01f      	b.n	8004928 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2201      	movs	r2, #1
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 ff57 	bl	80057a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0202 	orr.w	r2, r2, #2
 8004904:	60da      	str	r2, [r3, #12]
      break;
 8004906:	e02e      	b.n	8004966 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2201      	movs	r2, #1
 800490e:	2104      	movs	r1, #4
 8004910:	4618      	mov	r0, r3
 8004912:	f000 ff47 	bl	80057a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0204 	orr.w	r2, r2, #4
 8004924:	60da      	str	r2, [r3, #12]
      break;
 8004926:	e01e      	b.n	8004966 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2201      	movs	r2, #1
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f000 ff37 	bl	80057a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2201      	movs	r2, #1
 800493c:	2104      	movs	r1, #4
 800493e:	4618      	mov	r0, r3
 8004940:	f000 ff30 	bl	80057a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0202 	orr.w	r2, r2, #2
 8004952:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0204 	orr.w	r2, r2, #4
 8004962:	60da      	str	r2, [r3, #12]
      break;
 8004964:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fa3e 	bl	8000e44 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc f9b8 	bl	8000d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb10 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0204 	mvn.w	r2, #4
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc fa14 	bl	8000e44 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc f98e 	bl	8000d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fae6 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0208 	mvn.w	r2, #8
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc f9ea 	bl	8000e44 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fc f964 	bl	8000d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fabc 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0210 	mvn.w	r2, #16
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2208      	movs	r2, #8
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc f9c0 	bl	8000e44 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc f93a 	bl	8000d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fa92 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0201 	mvn.w	r2, #1
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fc fa8e 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d107      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fed8 	bl	80058e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa57 	bl	800500a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0220 	mvn.w	r2, #32
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fea2 	bl	80058cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_OC_ConfigChannel+0x1e>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e048      	b.n	8004c40 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d839      	bhi.n	8004c30 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c31 	.word	0x08004c31
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004c31 	.word	0x08004c31
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c31 	.word	0x08004c31
 8004be0:	08004c31 	.word	0x08004c31
 8004be4:	08004c15 	.word	0x08004c15
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c31 	.word	0x08004c31
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c23 	.word	0x08004c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fa8e 	bl	8005120 <TIM_OC1_SetConfig>
      break;
 8004c04:	e017      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 faed 	bl	80051ec <TIM_OC2_SetConfig>
      break;
 8004c12:	e010      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fb52 	bl	80052c4 <TIM_OC3_SetConfig>
      break;
 8004c20:	e009      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fbb5 	bl	8005398 <TIM_OC4_SetConfig>
      break;
 8004c2e:	e002      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      break;
 8004c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e0ae      	b.n	8004dc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	f200 809f 	bhi.w	8004db4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004db5 	.word	0x08004db5
 8004c84:	08004db5 	.word	0x08004db5
 8004c88:	08004db5 	.word	0x08004db5
 8004c8c:	08004cf1 	.word	0x08004cf1
 8004c90:	08004db5 	.word	0x08004db5
 8004c94:	08004db5 	.word	0x08004db5
 8004c98:	08004db5 	.word	0x08004db5
 8004c9c:	08004d33 	.word	0x08004d33
 8004ca0:	08004db5 	.word	0x08004db5
 8004ca4:	08004db5 	.word	0x08004db5
 8004ca8:	08004db5 	.word	0x08004db5
 8004cac:	08004d73 	.word	0x08004d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fa32 	bl	8005120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0208 	orr.w	r2, r2, #8
 8004cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0204 	bic.w	r2, r2, #4
 8004cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6999      	ldr	r1, [r3, #24]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	619a      	str	r2, [r3, #24]
      break;
 8004cee:	e064      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fa78 	bl	80051ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6999      	ldr	r1, [r3, #24]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	021a      	lsls	r2, r3, #8
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	619a      	str	r2, [r3, #24]
      break;
 8004d30:	e043      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fac3 	bl	80052c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0208 	orr.w	r2, r2, #8
 8004d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0204 	bic.w	r2, r2, #4
 8004d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69d9      	ldr	r1, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	61da      	str	r2, [r3, #28]
      break;
 8004d70:	e023      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fb0d 	bl	8005398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69d9      	ldr	r1, [r3, #28]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	021a      	lsls	r2, r3, #8
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	61da      	str	r2, [r3, #28]
      break;
 8004db2:	e002      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
      break;
 8004db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	; 0x30
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	f000 80bf 	beq.w	8004f68 <HAL_TIM_OnePulse_ConfigChannel+0x19c>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_TIM_OnePulse_ConfigChannel+0x2c>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e0b8      	b.n	8004f6a <HAL_TIM_OnePulse_ConfigChannel+0x19e>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	613b      	str	r3, [r7, #16]
    temp1.Pulse = sConfig->Pulse;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	617b      	str	r3, [r7, #20]
    temp1.OCPolarity = sConfig->OCPolarity;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	61bb      	str	r3, [r7, #24]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	61fb      	str	r3, [r7, #28]
    temp1.OCIdleState = sConfig->OCIdleState;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (OutputChannel)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d009      	beq.n	8004e4c <HAL_TIM_OnePulse_ConfigChannel+0x80>
 8004e38:	e011      	b.n	8004e5e <HAL_TIM_OnePulse_ConfigChannel+0x92>
    {
      case TIM_CHANNEL_1:
      {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        TIM_OC1_SetConfig(htim->Instance, &temp1);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f107 0210 	add.w	r2, r7, #16
 8004e42:	4611      	mov	r1, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 f96b 	bl	8005120 <TIM_OC1_SetConfig>
        break;
 8004e4a:	e00c      	b.n	8004e66 <HAL_TIM_OnePulse_ConfigChannel+0x9a>

      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f107 0210 	add.w	r2, r7, #16
 8004e54:	4611      	mov	r1, r2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f9c8 	bl	80051ec <TIM_OC2_SetConfig>
        break;
 8004e5c:	e003      	b.n	8004e66 <HAL_TIM_OnePulse_ConfigChannel+0x9a>
      }

      default:
        status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8004e64:	bf00      	nop
    }

    if (status == HAL_OK)
 8004e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d170      	bne.n	8004f50 <HAL_TIM_OnePulse_ConfigChannel+0x184>
    {
      switch (InputChannel)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_TIM_OnePulse_ConfigChannel+0xb0>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d033      	beq.n	8004ee2 <HAL_TIM_OnePulse_ConfigChannel+0x116>
 8004e7a:	e065      	b.n	8004f48 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
      {
        case TIM_CHANNEL_1:
        {
          assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

          TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6999      	ldr	r1, [r3, #24]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f000 fb66 	bl	800555c <TIM_TI1_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC1PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 020c 	bic.w	r2, r2, #12
 8004e9e:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004eae:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004ebe:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0207 	bic.w	r2, r2, #7
 8004ece:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0206 	orr.w	r2, r2, #6
 8004ede:	609a      	str	r2, [r3, #8]
          break;
 8004ee0:	e037      	b.n	8004f52 <HAL_TIM_OnePulse_ConfigChannel+0x186>

        case TIM_CHANNEL_2:
        {
          assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

          TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6999      	ldr	r1, [r3, #24]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f000 fbca 	bl	800568a <TIM_TI2_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC2PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f04:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f14:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004f24:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0207 	bic.w	r2, r2, #7
 8004f34:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0206 	orr.w	r2, r2, #6
 8004f44:	609a      	str	r2, [r3, #8]
          break;
 8004f46:	e004      	b.n	8004f52 <HAL_TIM_OnePulse_ConfigChannel+0x186>
        }

        default:
          status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 8004f4e:	e000      	b.n	8004f52 <HAL_TIM_OnePulse_ConfigChannel+0x186>
      }
    }
 8004f50:	bf00      	nop

    htim->State = HAL_TIM_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return status;
 8004f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f66:	e000      	b.n	8004f6a <HAL_TIM_OnePulse_ConfigChannel+0x19e>
  }
  else
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3730      	adds	r7, #48	; 0x30
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e031      	b.n	8004fee <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fa4b 	bl	8005438 <TIM_SlaveTimer_SetConfig>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e018      	b.n	8004fee <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fca:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fda:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a34      	ldr	r2, [pc, #208]	; (8005104 <TIM_Base_SetConfig+0xe4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00f      	beq.n	8005058 <TIM_Base_SetConfig+0x38>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d00b      	beq.n	8005058 <TIM_Base_SetConfig+0x38>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a31      	ldr	r2, [pc, #196]	; (8005108 <TIM_Base_SetConfig+0xe8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_Base_SetConfig+0x38>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a30      	ldr	r2, [pc, #192]	; (800510c <TIM_Base_SetConfig+0xec>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_Base_SetConfig+0x38>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a2f      	ldr	r2, [pc, #188]	; (8005110 <TIM_Base_SetConfig+0xf0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d108      	bne.n	800506a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <TIM_Base_SetConfig+0xe4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01b      	beq.n	80050aa <TIM_Base_SetConfig+0x8a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005078:	d017      	beq.n	80050aa <TIM_Base_SetConfig+0x8a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a22      	ldr	r2, [pc, #136]	; (8005108 <TIM_Base_SetConfig+0xe8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <TIM_Base_SetConfig+0x8a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a21      	ldr	r2, [pc, #132]	; (800510c <TIM_Base_SetConfig+0xec>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00f      	beq.n	80050aa <TIM_Base_SetConfig+0x8a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a20      	ldr	r2, [pc, #128]	; (8005110 <TIM_Base_SetConfig+0xf0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00b      	beq.n	80050aa <TIM_Base_SetConfig+0x8a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <TIM_Base_SetConfig+0xf4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <TIM_Base_SetConfig+0x8a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <TIM_Base_SetConfig+0xf8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_Base_SetConfig+0x8a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <TIM_Base_SetConfig+0xfc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d108      	bne.n	80050bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <TIM_Base_SetConfig+0xe4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d103      	bne.n	80050f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	615a      	str	r2, [r3, #20]
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40014000 	.word	0x40014000
 8005118:	40014400 	.word	0x40014400
 800511c:	40014800 	.word	0x40014800

08005120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0201 	bic.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 0302 	bic.w	r3, r3, #2
 8005168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <TIM_OC1_SetConfig+0xc8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10c      	bne.n	8005196 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0308 	bic.w	r3, r3, #8
 8005182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <TIM_OC1_SetConfig+0xc8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d111      	bne.n	80051c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40010000 	.word	0x40010000

080051ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0210 	bic.w	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0320 	bic.w	r3, r3, #32
 8005236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a1e      	ldr	r2, [pc, #120]	; (80052c0 <TIM_OC2_SetConfig+0xd4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d10d      	bne.n	8005268 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005266:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <TIM_OC2_SetConfig+0xd4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d113      	bne.n	8005298 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000

080052c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800530c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <TIM_OC3_SetConfig+0xd0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d10d      	bne.n	800533e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <TIM_OC3_SetConfig+0xd0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d113      	bne.n	800536e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800534c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	621a      	str	r2, [r3, #32]
}
 8005388:	bf00      	nop
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40010000 	.word	0x40010000

08005398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a10      	ldr	r2, [pc, #64]	; (8005434 <TIM_OC4_SetConfig+0x9c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d109      	bne.n	800540c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000

08005438 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f023 0307 	bic.w	r3, r3, #7
 8005466:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b70      	cmp	r3, #112	; 0x70
 8005480:	d01a      	beq.n	80054b8 <TIM_SlaveTimer_SetConfig+0x80>
 8005482:	2b70      	cmp	r3, #112	; 0x70
 8005484:	d860      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x110>
 8005486:	2b60      	cmp	r3, #96	; 0x60
 8005488:	d054      	beq.n	8005534 <TIM_SlaveTimer_SetConfig+0xfc>
 800548a:	2b60      	cmp	r3, #96	; 0x60
 800548c:	d85c      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x110>
 800548e:	2b50      	cmp	r3, #80	; 0x50
 8005490:	d046      	beq.n	8005520 <TIM_SlaveTimer_SetConfig+0xe8>
 8005492:	2b50      	cmp	r3, #80	; 0x50
 8005494:	d858      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x110>
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d019      	beq.n	80054ce <TIM_SlaveTimer_SetConfig+0x96>
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d854      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x110>
 800549e:	2b30      	cmp	r3, #48	; 0x30
 80054a0:	d055      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x116>
 80054a2:	2b30      	cmp	r3, #48	; 0x30
 80054a4:	d850      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x110>
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d051      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x116>
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d84c      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x110>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d04d      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x116>
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d04b      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x116>
 80054b6:	e047      	b.n	8005548 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68d9      	ldr	r1, [r3, #12]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f000 f94c 	bl	8005764 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80054cc:	e040      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d101      	bne.n	80054da <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e03b      	b.n	8005552 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005500:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	621a      	str	r2, [r3, #32]
      break;
 800551e:	e017      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6899      	ldr	r1, [r3, #8]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	461a      	mov	r2, r3
 800552e:	f000 f87d 	bl	800562c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005532:	e00d      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	461a      	mov	r2, r3
 8005542:	f000 f8df 	bl	8005704 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005546:	e003      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
      break;
 800554c:	e000      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800554e:	bf00      	nop
  }

  return status;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0201 	bic.w	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a24      	ldr	r2, [pc, #144]	; (8005618 <TIM_TI1_SetConfig+0xbc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <TIM_TI1_SetConfig+0x56>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d00f      	beq.n	80055b2 <TIM_TI1_SetConfig+0x56>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a21      	ldr	r2, [pc, #132]	; (800561c <TIM_TI1_SetConfig+0xc0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_TI1_SetConfig+0x56>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a20      	ldr	r2, [pc, #128]	; (8005620 <TIM_TI1_SetConfig+0xc4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <TIM_TI1_SetConfig+0x56>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <TIM_TI1_SetConfig+0xc8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_TI1_SetConfig+0x56>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <TIM_TI1_SetConfig+0xcc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <TIM_TI1_SetConfig+0x5a>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <TIM_TI1_SetConfig+0x5c>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e003      	b.n	80055d6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f023 030a 	bic.w	r3, r3, #10
 80055f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f003 030a 	and.w	r3, r3, #10
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40014000 	.word	0x40014000

0800562c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 030a 	bic.w	r3, r3, #10
 8005668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800568a:	b480      	push	{r7}
 800568c:	b087      	sub	sp, #28
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f023 0210 	bic.w	r2, r3, #16
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	031b      	lsls	r3, r3, #12
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	621a      	str	r2, [r3, #32]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f023 0210 	bic.w	r2, r3, #16
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800572e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	031b      	lsls	r3, r3, #12
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005740:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	431a      	orrs	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2201      	movs	r2, #1
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1a      	ldr	r2, [r3, #32]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	43db      	mvns	r3, r3
 80057c6:	401a      	ands	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1a      	ldr	r2, [r3, #32]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e050      	b.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1c      	ldr	r2, [pc, #112]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d018      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d013      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d10c      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4313      	orrs	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40014000 	.word	0x40014000

080058cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f4:	b084      	sub	sp, #16
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	f107 001c 	add.w	r0, r7, #28
 8005902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	2b01      	cmp	r3, #1
 800590a:	d122      	bne.n	8005952 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fbee 	bl	8007128 <USB_CoreReset>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e01a      	b.n	8005988 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 fbe2 	bl	8007128 <USB_CoreReset>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
 800597a:	e005      	b.n	8005988 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	2b01      	cmp	r3, #1
 800598c:	d10b      	bne.n	80059a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f043 0206 	orr.w	r2, r3, #6
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059b2:	b004      	add	sp, #16
 80059b4:	4770      	bx	lr
	...

080059b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	4613      	mov	r3, r2
 80059c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d165      	bne.n	8005a98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4a41      	ldr	r2, [pc, #260]	; (8005ad4 <USB_SetTurnaroundTime+0x11c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d906      	bls.n	80059e2 <USB_SetTurnaroundTime+0x2a>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4a40      	ldr	r2, [pc, #256]	; (8005ad8 <USB_SetTurnaroundTime+0x120>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d202      	bcs.n	80059e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059dc:	230f      	movs	r3, #15
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e062      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4a3c      	ldr	r2, [pc, #240]	; (8005ad8 <USB_SetTurnaroundTime+0x120>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d306      	bcc.n	80059f8 <USB_SetTurnaroundTime+0x40>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4a3b      	ldr	r2, [pc, #236]	; (8005adc <USB_SetTurnaroundTime+0x124>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d202      	bcs.n	80059f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80059f2:	230e      	movs	r3, #14
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e057      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4a38      	ldr	r2, [pc, #224]	; (8005adc <USB_SetTurnaroundTime+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d306      	bcc.n	8005a0e <USB_SetTurnaroundTime+0x56>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4a37      	ldr	r2, [pc, #220]	; (8005ae0 <USB_SetTurnaroundTime+0x128>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d202      	bcs.n	8005a0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a08:	230d      	movs	r3, #13
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e04c      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4a33      	ldr	r2, [pc, #204]	; (8005ae0 <USB_SetTurnaroundTime+0x128>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d306      	bcc.n	8005a24 <USB_SetTurnaroundTime+0x6c>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4a32      	ldr	r2, [pc, #200]	; (8005ae4 <USB_SetTurnaroundTime+0x12c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d802      	bhi.n	8005a24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a1e:	230c      	movs	r3, #12
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e041      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4a2f      	ldr	r2, [pc, #188]	; (8005ae4 <USB_SetTurnaroundTime+0x12c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d906      	bls.n	8005a3a <USB_SetTurnaroundTime+0x82>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4a2e      	ldr	r2, [pc, #184]	; (8005ae8 <USB_SetTurnaroundTime+0x130>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d802      	bhi.n	8005a3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a34:	230b      	movs	r3, #11
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	e036      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <USB_SetTurnaroundTime+0x130>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d906      	bls.n	8005a50 <USB_SetTurnaroundTime+0x98>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <USB_SetTurnaroundTime+0x134>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d802      	bhi.n	8005a50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e02b      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4a26      	ldr	r2, [pc, #152]	; (8005aec <USB_SetTurnaroundTime+0x134>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d906      	bls.n	8005a66 <USB_SetTurnaroundTime+0xae>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a25      	ldr	r2, [pc, #148]	; (8005af0 <USB_SetTurnaroundTime+0x138>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d202      	bcs.n	8005a66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a60:	2309      	movs	r3, #9
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e020      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <USB_SetTurnaroundTime+0x138>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d306      	bcc.n	8005a7c <USB_SetTurnaroundTime+0xc4>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a20      	ldr	r2, [pc, #128]	; (8005af4 <USB_SetTurnaroundTime+0x13c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d802      	bhi.n	8005a7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a76:	2308      	movs	r3, #8
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e015      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <USB_SetTurnaroundTime+0x13c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d906      	bls.n	8005a92 <USB_SetTurnaroundTime+0xda>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <USB_SetTurnaroundTime+0x140>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d202      	bcs.n	8005a92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a8c:	2307      	movs	r3, #7
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e00a      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a92:	2306      	movs	r3, #6
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	e007      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a9e:	2309      	movs	r3, #9
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e001      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005aa4:	2309      	movs	r3, #9
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	029b      	lsls	r3, r3, #10
 8005abc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	00d8acbf 	.word	0x00d8acbf
 8005ad8:	00e4e1c0 	.word	0x00e4e1c0
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	01067380 	.word	0x01067380
 8005ae4:	011a499f 	.word	0x011a499f
 8005ae8:	01312cff 	.word	0x01312cff
 8005aec:	014ca43f 	.word	0x014ca43f
 8005af0:	016e3600 	.word	0x016e3600
 8005af4:	01a6ab1f 	.word	0x01a6ab1f
 8005af8:	01e84800 	.word	0x01e84800

08005afc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f043 0201 	orr.w	r2, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d115      	bne.n	8005b8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f7fb fdc8 	bl	8001704 <HAL_Delay>
      ms++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 fa45 	bl	800700a <USB_GetMode>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d01e      	beq.n	8005bc4 <USB_SetCurrentMode+0x84>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b31      	cmp	r3, #49	; 0x31
 8005b8a:	d9f0      	bls.n	8005b6e <USB_SetCurrentMode+0x2e>
 8005b8c:	e01a      	b.n	8005bc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d115      	bne.n	8005bc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f7fb fdaf 	bl	8001704 <HAL_Delay>
      ms++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fa2c 	bl	800700a <USB_GetMode>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <USB_SetCurrentMode+0x84>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b31      	cmp	r3, #49	; 0x31
 8005bbc:	d9f0      	bls.n	8005ba0 <USB_SetCurrentMode+0x60>
 8005bbe:	e001      	b.n	8005bc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e005      	b.n	8005bd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b32      	cmp	r3, #50	; 0x32
 8005bc8:	d101      	bne.n	8005bce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bd8:	b084      	sub	sp, #16
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	e009      	b.n	8005c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3340      	adds	r3, #64	; 0x40
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	2200      	movs	r2, #0
 8005c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b0e      	cmp	r3, #14
 8005c10:	d9f2      	bls.n	8005bf8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d11c      	bne.n	8005c52 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c26:	f043 0302 	orr.w	r3, r3, #2
 8005c2a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38
 8005c50:	e00b      	b.n	8005c6a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c70:	461a      	mov	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c84:	461a      	mov	r2, r3
 8005c86:	680b      	ldr	r3, [r1, #0]
 8005c88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10c      	bne.n	8005caa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c96:	2100      	movs	r1, #0
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f965 	bl	8005f68 <USB_SetDevSpeed>
 8005c9e:	e008      	b.n	8005cb2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f960 	bl	8005f68 <USB_SetDevSpeed>
 8005ca8:	e003      	b.n	8005cb2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005caa:	2103      	movs	r1, #3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f95b 	bl	8005f68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cb2:	2110      	movs	r1, #16
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f8f3 	bl	8005ea0 <USB_FlushTxFifo>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f91f 	bl	8005f08 <USB_FlushRxFifo>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2300      	movs	r3, #0
 8005cde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	2300      	movs	r3, #0
 8005cea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e043      	b.n	8005d86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d14:	d118      	bne.n	8005d48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	e013      	b.n	8005d5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e008      	b.n	8005d5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	461a      	mov	r2, r3
 8005d56:	2300      	movs	r3, #0
 8005d58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	461a      	mov	r2, r3
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3301      	adds	r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d3b7      	bcc.n	8005cfe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	e043      	b.n	8005e1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005daa:	d118      	bne.n	8005dde <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e013      	b.n	8005df0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	e008      	b.n	8005df0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	461a      	mov	r2, r3
 8005dec:	2300      	movs	r3, #0
 8005dee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2300      	movs	r3, #0
 8005e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d3b7      	bcc.n	8005d94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f043 0210 	orr.w	r2, r3, #16
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <USB_DevInit+0x2c4>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f043 0208 	orr.w	r2, r3, #8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d107      	bne.n	8005e8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e98:	b004      	add	sp, #16
 8005e9a:	4770      	bx	lr
 8005e9c:	803c3800 	.word	0x803c3800

08005ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <USB_FlushTxFifo+0x64>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d901      	bls.n	8005ec0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e01b      	b.n	8005ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	daf2      	bge.n	8005eae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	019b      	lsls	r3, r3, #6
 8005ed0:	f043 0220 	orr.w	r2, r3, #32
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <USB_FlushTxFifo+0x64>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e006      	b.n	8005ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d0f0      	beq.n	8005ed8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	00030d40 	.word	0x00030d40

08005f08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3301      	adds	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a11      	ldr	r2, [pc, #68]	; (8005f64 <USB_FlushRxFifo+0x5c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e018      	b.n	8005f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	daf2      	bge.n	8005f14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2210      	movs	r2, #16
 8005f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <USB_FlushRxFifo+0x5c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e006      	b.n	8005f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d0f0      	beq.n	8005f38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	00030d40 	.word	0x00030d40

08005f68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b087      	sub	sp, #28
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0306 	and.w	r3, r3, #6
 8005fb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]
 8005fbe:	e00a      	b.n	8005fd6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d002      	beq.n	8005fcc <USB_GetDevSpeed+0x32>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d102      	bne.n	8005fd2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	75fb      	strb	r3, [r7, #23]
 8005fd0:	e001      	b.n	8005fd6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fd2:	230f      	movs	r3, #15
 8005fd4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d13a      	bne.n	8006076 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	2101      	movs	r1, #1
 8006012:	fa01 f303 	lsl.w	r3, r1, r3
 8006016:	b29b      	uxth	r3, r3
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800601e:	4313      	orrs	r3, r2
 8006020:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d155      	bne.n	80060e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	791b      	ldrb	r3, [r3, #4]
 8006052:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006054:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	059b      	lsls	r3, r3, #22
 800605a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800605c:	4313      	orrs	r3, r2
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	e036      	b.n	80060e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607c:	69da      	ldr	r2, [r3, #28]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	2101      	movs	r1, #1
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	041b      	lsls	r3, r3, #16
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006094:	4313      	orrs	r3, r2
 8006096:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d11a      	bne.n	80060e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	791b      	ldrb	r3, [r3, #4]
 80060c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060ca:	430b      	orrs	r3, r1
 80060cc:	4313      	orrs	r3, r2
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d161      	bne.n	80061d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006126:	d11f      	bne.n	8006168 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006142:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006146:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006166:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	2101      	movs	r1, #1
 800617a:	fa01 f303 	lsl.w	r3, r1, r3
 800617e:	b29b      	uxth	r3, r3
 8006180:	43db      	mvns	r3, r3
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006188:	4013      	ands	r3, r2
 800618a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	2101      	movs	r1, #1
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	43db      	mvns	r3, r3
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ac:	4013      	ands	r3, r2
 80061ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	0159      	lsls	r1, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	440b      	add	r3, r1
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	4619      	mov	r1, r3
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <USB_DeactivateEndpoint+0x1b0>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]
 80061d2:	e060      	b.n	8006296 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ea:	d11f      	bne.n	800622c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006206:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800620a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006226:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800622a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	2101      	movs	r1, #1
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	041b      	lsls	r3, r3, #16
 8006244:	43db      	mvns	r3, r3
 8006246:	68f9      	ldr	r1, [r7, #12]
 8006248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800624c:	4013      	ands	r3, r2
 800624e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	2101      	movs	r1, #1
 8006262:	fa01 f303 	lsl.w	r3, r1, r3
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	43db      	mvns	r3, r3
 800626a:	68f9      	ldr	r1, [r7, #12]
 800626c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006270:	4013      	ands	r3, r2
 8006272:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	0159      	lsls	r1, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	440b      	add	r3, r1
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	4619      	mov	r1, r3
 8006290:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <USB_DeactivateEndpoint+0x1b4>)
 8006292:	4013      	ands	r3, r2
 8006294:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	ec337800 	.word	0xec337800
 80062a8:	eff37800 	.word	0xeff37800

080062ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	f040 815c 	bne.w	8006586 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d132      	bne.n	800633c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006334:	0cdb      	lsrs	r3, r3, #19
 8006336:	04db      	lsls	r3, r3, #19
 8006338:	6113      	str	r3, [r2, #16]
 800633a:	e074      	b.n	8006426 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	440a      	add	r2, r1
 8006352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006356:	0cdb      	lsrs	r3, r3, #19
 8006358:	04db      	lsls	r3, r3, #19
 800635a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	440a      	add	r2, r1
 8006372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006376:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800637a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800637e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6999      	ldr	r1, [r3, #24]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	440b      	add	r3, r1
 8006398:	1e59      	subs	r1, r3, #1
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	fbb1 f3f3 	udiv	r3, r1, r3
 80063a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063a4:	4b9d      	ldr	r3, [pc, #628]	; (800661c <USB_EPStartXfer+0x370>)
 80063a6:	400b      	ands	r3, r1
 80063a8:	69b9      	ldr	r1, [r7, #24]
 80063aa:	0148      	lsls	r0, r1, #5
 80063ac:	69f9      	ldr	r1, [r7, #28]
 80063ae:	4401      	add	r1, r0
 80063b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063b4:	4313      	orrs	r3, r2
 80063b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ce:	69b9      	ldr	r1, [r7, #24]
 80063d0:	0148      	lsls	r0, r1, #5
 80063d2:	69f9      	ldr	r1, [r7, #28]
 80063d4:	4401      	add	r1, r0
 80063d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063da:	4313      	orrs	r3, r2
 80063dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	791b      	ldrb	r3, [r3, #4]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d11f      	bne.n	8006426 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006400:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006404:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006424:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006426:	79fb      	ldrb	r3, [r7, #7]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d14b      	bne.n	80064c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	461a      	mov	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	791b      	ldrb	r3, [r3, #4]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d128      	bne.n	80064a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645c:	2b00      	cmp	r3, #0
 800645e:	d110      	bne.n	8006482 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e00f      	b.n	80064a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	e133      	b.n	800672c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	791b      	ldrb	r3, [r3, #4]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d015      	beq.n	8006518 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 811b 	beq.w	800672c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	2101      	movs	r1, #1
 8006508:	fa01 f303 	lsl.w	r3, r1, r3
 800650c:	69f9      	ldr	r1, [r7, #28]
 800650e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006512:	4313      	orrs	r3, r2
 8006514:	634b      	str	r3, [r1, #52]	; 0x34
 8006516:	e109      	b.n	800672c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d110      	bne.n	800654a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	440a      	add	r2, r1
 800653e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006542:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	e00f      	b.n	800656a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006568:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6919      	ldr	r1, [r3, #16]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	b298      	uxth	r0, r3
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	4603      	mov	r3, r0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fade 	bl	8006b40 <USB_WritePacket>
 8006584:	e0d2      	b.n	800672c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a0:	0cdb      	lsrs	r3, r3, #19
 80065a2:	04db      	lsls	r3, r3, #19
 80065a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d126      	bne.n	8006620 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065e8:	69b9      	ldr	r1, [r7, #24]
 80065ea:	0148      	lsls	r0, r1, #5
 80065ec:	69f9      	ldr	r1, [r7, #28]
 80065ee:	4401      	add	r1, r0
 80065f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065f4:	4313      	orrs	r3, r2
 80065f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	440a      	add	r2, r1
 800660e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006616:	6113      	str	r3, [r2, #16]
 8006618:	e03a      	b.n	8006690 <USB_EPStartXfer+0x3e4>
 800661a:	bf00      	nop
 800661c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	699a      	ldr	r2, [r3, #24]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4413      	add	r3, r2
 800662a:	1e5a      	subs	r2, r3, #1
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	8afa      	ldrh	r2, [r7, #22]
 800663c:	fb03 f202 	mul.w	r2, r3, r2
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	8afb      	ldrh	r3, [r7, #22]
 8006654:	04d9      	lsls	r1, r3, #19
 8006656:	4b38      	ldr	r3, [pc, #224]	; (8006738 <USB_EPStartXfer+0x48c>)
 8006658:	400b      	ands	r3, r1
 800665a:	69b9      	ldr	r1, [r7, #24]
 800665c:	0148      	lsls	r0, r1, #5
 800665e:	69f9      	ldr	r1, [r7, #28]
 8006660:	4401      	add	r1, r0
 8006662:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006666:	4313      	orrs	r3, r2
 8006668:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006680:	69b9      	ldr	r1, [r7, #24]
 8006682:	0148      	lsls	r0, r1, #5
 8006684:	69f9      	ldr	r1, [r7, #28]
 8006686:	4401      	add	r1, r0
 8006688:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800668c:	4313      	orrs	r3, r2
 800668e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d10d      	bne.n	80066b2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6919      	ldr	r1, [r3, #16]
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	460a      	mov	r2, r1
 80066b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	791b      	ldrb	r3, [r3, #4]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d128      	bne.n	800670c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d110      	bne.n	80066ec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e00f      	b.n	800670c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	440a      	add	r2, r1
 8006722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800672a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	1ff80000 	.word	0x1ff80000

0800673c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	2b01      	cmp	r3, #1
 800675a:	f040 80ce 	bne.w	80068fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d132      	bne.n	80067cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c4:	0cdb      	lsrs	r3, r3, #19
 80067c6:	04db      	lsls	r3, r3, #19
 80067c8:	6113      	str	r3, [r2, #16]
 80067ca:	e04e      	b.n	800686a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e6:	0cdb      	lsrs	r3, r3, #19
 80067e8:	04db      	lsls	r3, r3, #19
 80067ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006806:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800680a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800680e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	429a      	cmp	r2, r3
 800681a:	d903      	bls.n	8006824 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	440a      	add	r2, r1
 800683a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006842:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800685a:	6939      	ldr	r1, [r7, #16]
 800685c:	0148      	lsls	r0, r1, #5
 800685e:	6979      	ldr	r1, [r7, #20]
 8006860:	4401      	add	r1, r0
 8006862:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006866:	4313      	orrs	r3, r2
 8006868:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d11e      	bne.n	80068ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d009      	beq.n	800688c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	461a      	mov	r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	e097      	b.n	80069de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 8083 	beq.w	80069de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	2101      	movs	r1, #1
 80068ea:	fa01 f303 	lsl.w	r3, r1, r3
 80068ee:	6979      	ldr	r1, [r7, #20]
 80068f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f4:	4313      	orrs	r3, r2
 80068f6:	634b      	str	r3, [r1, #52]	; 0x34
 80068f8:	e071      	b.n	80069de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006914:	0cdb      	lsrs	r3, r3, #19
 8006916:	04db      	lsls	r3, r3, #19
 8006918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	440a      	add	r2, r1
 8006930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006934:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006938:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800693c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006974:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800698c:	6939      	ldr	r1, [r7, #16]
 800698e:	0148      	lsls	r0, r1, #5
 8006990:	6979      	ldr	r1, [r7, #20]
 8006992:	4401      	add	r1, r0
 8006994:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006998:	4313      	orrs	r3, r2
 800699a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d10d      	bne.n	80069be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6919      	ldr	r1, [r3, #16]
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	460a      	mov	r2, r1
 80069bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d14a      	bne.n	8006aa0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a22:	f040 8086 	bne.w	8006b32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	7812      	ldrb	r2, [r2, #0]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	7812      	ldrb	r2, [r2, #0]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3301      	adds	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d902      	bls.n	8006a84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
          break;
 8006a82:	e056      	b.n	8006b32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a9c:	d0e7      	beq.n	8006a6e <USB_EPStopXfer+0x82>
 8006a9e:	e048      	b.n	8006b32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab8:	d13b      	bne.n	8006b32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006adc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	7812      	ldrb	r2, [r2, #0]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3301      	adds	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d902      	bls.n	8006b18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	75fb      	strb	r3, [r7, #23]
          break;
 8006b16:	e00c      	b.n	8006b32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b30:	d0e7      	beq.n	8006b02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	; 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	460b      	mov	r3, r1
 8006b50:	71fb      	strb	r3, [r7, #7]
 8006b52:	4613      	mov	r3, r2
 8006b54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d123      	bne.n	8006bae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b66:	88bb      	ldrh	r3, [r7, #4]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	e018      	b.n	8006ba6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	031a      	lsls	r2, r3, #12
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b80:	461a      	mov	r2, r3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	3301      	adds	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d3e2      	bcc.n	8006b74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3724      	adds	r7, #36	; 0x24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b08b      	sub	sp, #44	; 0x2c
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	089b      	lsrs	r3, r3, #2
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006be2:	2300      	movs	r3, #0
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	e014      	b.n	8006c12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	3301      	adds	r3, #1
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	3301      	adds	r3, #1
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	623b      	str	r3, [r7, #32]
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d3e6      	bcc.n	8006be8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c1a:	8bfb      	ldrh	r3, [r7, #30]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01e      	beq.n	8006c5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f107 0310 	add.w	r3, r7, #16
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	701a      	strb	r2, [r3, #0]
      i++;
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	3301      	adds	r3, #1
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c52:	8bfb      	ldrh	r3, [r7, #30]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c58:	8bfb      	ldrh	r3, [r7, #30]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1ea      	bne.n	8006c34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	372c      	adds	r7, #44	; 0x2c
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d12c      	bne.n	8006ce2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	db12      	blt.n	8006cc0 <USB_EPSetStall+0x54>
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	e02b      	b.n	8006d3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	db12      	blt.n	8006d1a <USB_EPSetStall+0xae>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00f      	beq.n	8006d1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d128      	bne.n	8006db6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d003      	beq.n	8006d94 <USB_EPClearStall+0x4c>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	791b      	ldrb	r3, [r3, #4]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d138      	bne.n	8006e06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	e027      	b.n	8006e06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	791b      	ldrb	r3, [r3, #4]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d003      	beq.n	8006de6 <USB_EPClearStall+0x9e>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	791b      	ldrb	r3, [r3, #4]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d10f      	bne.n	8006e06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e48:	68f9      	ldr	r1, [r7, #12]
 8006e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e7a:	f023 0303 	bic.w	r3, r3, #3
 8006e7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e8e:	f023 0302 	bic.w	r3, r3, #2
 8006e92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	0c1b      	lsrs	r3, r3, #16
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	b29b      	uxth	r3, r3
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b087      	sub	sp, #28
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	fa22 f303 	lsr.w	r3, r2, r3
 8006fde:	01db      	lsls	r3, r3, #7
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f003 0301 	and.w	r3, r3, #1
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007040:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007044:	f023 0307 	bic.w	r3, r3, #7
 8007048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800705c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	460b      	mov	r3, r1
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	333c      	adds	r3, #60	; 0x3c
 8007082:	3304      	adds	r3, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	4a26      	ldr	r2, [pc, #152]	; (8007124 <USB_EP0_OutStart+0xb8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d90a      	bls.n	80070a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800709c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a0:	d101      	bne.n	80070a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e037      	b.n	8007116 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ac:	461a      	mov	r2, r3
 80070ae:	2300      	movs	r3, #0
 80070b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d4:	f043 0318 	orr.w	r3, r3, #24
 80070d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d10f      	bne.n	8007114 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	4f54300a 	.word	0x4f54300a

08007128 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4a13      	ldr	r2, [pc, #76]	; (800718c <USB_CoreReset+0x64>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e01b      	b.n	800717e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	daf2      	bge.n	8007134 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f043 0201 	orr.w	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a09      	ldr	r2, [pc, #36]	; (800718c <USB_CoreReset+0x64>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d901      	bls.n	8007170 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e006      	b.n	800717e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b01      	cmp	r3, #1
 800717a:	d0f0      	beq.n	800715e <USB_CoreReset+0x36>

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	00030d40 	.word	0x00030d40

08007190 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800719c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071a0:	f002 fc1e 	bl	80099e0 <USBD_static_malloc>
 80071a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d109      	bne.n	80071c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	32b0      	adds	r2, #176	; 0xb0
 80071b6:	2100      	movs	r1, #0
 80071b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071bc:	2302      	movs	r3, #2
 80071be:	e0d4      	b.n	800736a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80071c0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80071c4:	2100      	movs	r1, #0
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f002 fc72 	bl	8009ab0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	32b0      	adds	r2, #176	; 0xb0
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32b0      	adds	r2, #176	; 0xb0
 80071e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7c1b      	ldrb	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d138      	bne.n	800726a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071f8:	4b5e      	ldr	r3, [pc, #376]	; (8007374 <USBD_CDC_Init+0x1e4>)
 80071fa:	7819      	ldrb	r1, [r3, #0]
 80071fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007200:	2202      	movs	r2, #2
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f002 fac9 	bl	800979a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007208:	4b5a      	ldr	r3, [pc, #360]	; (8007374 <USBD_CDC_Init+0x1e4>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 020f 	and.w	r2, r3, #15
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	3324      	adds	r3, #36	; 0x24
 800721e:	2201      	movs	r2, #1
 8007220:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007222:	4b55      	ldr	r3, [pc, #340]	; (8007378 <USBD_CDC_Init+0x1e8>)
 8007224:	7819      	ldrb	r1, [r3, #0]
 8007226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800722a:	2202      	movs	r2, #2
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f002 fab4 	bl	800979a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007232:	4b51      	ldr	r3, [pc, #324]	; (8007378 <USBD_CDC_Init+0x1e8>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	f003 020f 	and.w	r2, r3, #15
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800724a:	2201      	movs	r2, #1
 800724c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800724e:	4b4b      	ldr	r3, [pc, #300]	; (800737c <USBD_CDC_Init+0x1ec>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 020f 	and.w	r2, r3, #15
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	3326      	adds	r3, #38	; 0x26
 8007264:	2210      	movs	r2, #16
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	e035      	b.n	80072d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800726a:	4b42      	ldr	r3, [pc, #264]	; (8007374 <USBD_CDC_Init+0x1e4>)
 800726c:	7819      	ldrb	r1, [r3, #0]
 800726e:	2340      	movs	r3, #64	; 0x40
 8007270:	2202      	movs	r2, #2
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f002 fa91 	bl	800979a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007278:	4b3e      	ldr	r3, [pc, #248]	; (8007374 <USBD_CDC_Init+0x1e4>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	3324      	adds	r3, #36	; 0x24
 800728e:	2201      	movs	r2, #1
 8007290:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007292:	4b39      	ldr	r3, [pc, #228]	; (8007378 <USBD_CDC_Init+0x1e8>)
 8007294:	7819      	ldrb	r1, [r3, #0]
 8007296:	2340      	movs	r3, #64	; 0x40
 8007298:	2202      	movs	r2, #2
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f002 fa7d 	bl	800979a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072a0:	4b35      	ldr	r3, [pc, #212]	; (8007378 <USBD_CDC_Init+0x1e8>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f003 020f 	and.w	r2, r3, #15
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072b8:	2201      	movs	r2, #1
 80072ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072bc:	4b2f      	ldr	r3, [pc, #188]	; (800737c <USBD_CDC_Init+0x1ec>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	f003 020f 	and.w	r2, r3, #15
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	3326      	adds	r3, #38	; 0x26
 80072d2:	2210      	movs	r2, #16
 80072d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072d6:	4b29      	ldr	r3, [pc, #164]	; (800737c <USBD_CDC_Init+0x1ec>)
 80072d8:	7819      	ldrb	r1, [r3, #0]
 80072da:	2308      	movs	r3, #8
 80072dc:	2203      	movs	r2, #3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f002 fa5b 	bl	800979a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80072e4:	4b25      	ldr	r3, [pc, #148]	; (800737c <USBD_CDC_Init+0x1ec>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	f003 020f 	and.w	r2, r3, #15
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	3324      	adds	r3, #36	; 0x24
 80072fa:	2201      	movs	r2, #1
 80072fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	33b0      	adds	r3, #176	; 0xb0
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007334:	2302      	movs	r3, #2
 8007336:	e018      	b.n	800736a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	7c1b      	ldrb	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <USBD_CDC_Init+0x1e8>)
 8007342:	7819      	ldrb	r1, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800734a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f002 fb12 	bl	8009978 <USBD_LL_PrepareReceive>
 8007354:	e008      	b.n	8007368 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007356:	4b08      	ldr	r3, [pc, #32]	; (8007378 <USBD_CDC_Init+0x1e8>)
 8007358:	7819      	ldrb	r1, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f002 fb08 	bl	8009978 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000097 	.word	0x20000097
 8007378:	20000098 	.word	0x20000098
 800737c:	20000099 	.word	0x20000099

08007380 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800738c:	4b3a      	ldr	r3, [pc, #232]	; (8007478 <USBD_CDC_DeInit+0xf8>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f002 fa27 	bl	80097e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007398:	4b37      	ldr	r3, [pc, #220]	; (8007478 <USBD_CDC_DeInit+0xf8>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	3324      	adds	r3, #36	; 0x24
 80073ae:	2200      	movs	r2, #0
 80073b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80073b2:	4b32      	ldr	r3, [pc, #200]	; (800747c <USBD_CDC_DeInit+0xfc>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f002 fa14 	bl	80097e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80073be:	4b2f      	ldr	r3, [pc, #188]	; (800747c <USBD_CDC_DeInit+0xfc>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	f003 020f 	and.w	r2, r3, #15
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073d6:	2200      	movs	r2, #0
 80073d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80073da:	4b29      	ldr	r3, [pc, #164]	; (8007480 <USBD_CDC_DeInit+0x100>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 fa00 	bl	80097e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80073e6:	4b26      	ldr	r3, [pc, #152]	; (8007480 <USBD_CDC_DeInit+0x100>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 020f 	and.w	r2, r3, #15
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	3324      	adds	r3, #36	; 0x24
 80073fc:	2200      	movs	r2, #0
 80073fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007400:	4b1f      	ldr	r3, [pc, #124]	; (8007480 <USBD_CDC_DeInit+0x100>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 020f 	and.w	r2, r3, #15
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	3326      	adds	r3, #38	; 0x26
 8007416:	2200      	movs	r2, #0
 8007418:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	32b0      	adds	r2, #176	; 0xb0
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01f      	beq.n	800746c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	33b0      	adds	r3, #176	; 0xb0
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32b0      	adds	r2, #176	; 0xb0
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	4618      	mov	r0, r3
 8007450:	f002 fad4 	bl	80099fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32b0      	adds	r2, #176	; 0xb0
 800745e:	2100      	movs	r1, #0
 8007460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000097 	.word	0x20000097
 800747c:	20000098 	.word	0x20000098
 8007480:	20000099 	.word	0x20000099

08007484 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	32b0      	adds	r2, #176	; 0xb0
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e0bf      	b.n	8007634 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d050      	beq.n	8007562 <USBD_CDC_Setup+0xde>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	f040 80af 	bne.w	8007624 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	88db      	ldrh	r3, [r3, #6]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d03a      	beq.n	8007544 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b25b      	sxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	da1b      	bge.n	8007510 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	33b0      	adds	r3, #176	; 0xb0
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80074ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	88d2      	ldrh	r2, [r2, #6]
 80074f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	88db      	ldrh	r3, [r3, #6]
 80074fa:	2b07      	cmp	r3, #7
 80074fc:	bf28      	it	cs
 80074fe:	2307      	movcs	r3, #7
 8007500:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	89fa      	ldrh	r2, [r7, #14]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 fd43 	bl	8008f94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800750e:	e090      	b.n	8007632 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	785a      	ldrb	r2, [r3, #1]
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	88db      	ldrh	r3, [r3, #6]
 800751e:	2b3f      	cmp	r3, #63	; 0x3f
 8007520:	d803      	bhi.n	800752a <USBD_CDC_Setup+0xa6>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	88db      	ldrh	r3, [r3, #6]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	e000      	b.n	800752c <USBD_CDC_Setup+0xa8>
 800752a:	2240      	movs	r2, #64	; 0x40
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007532:	6939      	ldr	r1, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800753a:	461a      	mov	r2, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 fd55 	bl	8008fec <USBD_CtlPrepareRx>
      break;
 8007542:	e076      	b.n	8007632 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	33b0      	adds	r3, #176	; 0xb0
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	7850      	ldrb	r0, [r2, #1]
 800755a:	2200      	movs	r2, #0
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	4798      	blx	r3
      break;
 8007560:	e067      	b.n	8007632 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b0b      	cmp	r3, #11
 8007568:	d851      	bhi.n	800760e <USBD_CDC_Setup+0x18a>
 800756a:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <USBD_CDC_Setup+0xec>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	080075a1 	.word	0x080075a1
 8007574:	0800761d 	.word	0x0800761d
 8007578:	0800760f 	.word	0x0800760f
 800757c:	0800760f 	.word	0x0800760f
 8007580:	0800760f 	.word	0x0800760f
 8007584:	0800760f 	.word	0x0800760f
 8007588:	0800760f 	.word	0x0800760f
 800758c:	0800760f 	.word	0x0800760f
 8007590:	0800760f 	.word	0x0800760f
 8007594:	0800760f 	.word	0x0800760f
 8007598:	080075cb 	.word	0x080075cb
 800759c:	080075f5 	.word	0x080075f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d107      	bne.n	80075bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075ac:	f107 030a 	add.w	r3, r7, #10
 80075b0:	2202      	movs	r2, #2
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fced 	bl	8008f94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075ba:	e032      	b.n	8007622 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fc77 	bl	8008eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	75fb      	strb	r3, [r7, #23]
          break;
 80075c8:	e02b      	b.n	8007622 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d107      	bne.n	80075e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80075d6:	f107 030d 	add.w	r3, r7, #13
 80075da:	2201      	movs	r2, #1
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 fcd8 	bl	8008f94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075e4:	e01d      	b.n	8007622 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fc62 	bl	8008eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80075ee:	2303      	movs	r3, #3
 80075f0:	75fb      	strb	r3, [r7, #23]
          break;
 80075f2:	e016      	b.n	8007622 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d00f      	beq.n	8007620 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fc55 	bl	8008eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800760c:	e008      	b.n	8007620 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fc4e 	bl	8008eb2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007616:	2303      	movs	r3, #3
 8007618:	75fb      	strb	r3, [r7, #23]
          break;
 800761a:	e002      	b.n	8007622 <USBD_CDC_Setup+0x19e>
          break;
 800761c:	bf00      	nop
 800761e:	e008      	b.n	8007632 <USBD_CDC_Setup+0x1ae>
          break;
 8007620:	bf00      	nop
      }
      break;
 8007622:	e006      	b.n	8007632 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fc43 	bl	8008eb2 <USBD_CtlError>
      ret = USBD_FAIL;
 800762c:	2303      	movs	r3, #3
 800762e:	75fb      	strb	r3, [r7, #23]
      break;
 8007630:	bf00      	nop
  }

  return (uint8_t)ret;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800764e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	32b0      	adds	r2, #176	; 0xb0
 800765a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007662:	2303      	movs	r3, #3
 8007664:	e065      	b.n	8007732 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32b0      	adds	r2, #176	; 0xb0
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	f003 020f 	and.w	r2, r3, #15
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	3318      	adds	r3, #24
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d02f      	beq.n	80076f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	f003 020f 	and.w	r2, r3, #15
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	440b      	add	r3, r1
 80076a2:	3318      	adds	r3, #24
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 010f 	and.w	r1, r3, #15
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	460b      	mov	r3, r1
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	440b      	add	r3, r1
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4403      	add	r3, r0
 80076b8:	3348      	adds	r3, #72	; 0x48
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80076c0:	fb01 f303 	mul.w	r3, r1, r3
 80076c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d112      	bne.n	80076f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	f003 020f 	and.w	r2, r3, #15
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	3318      	adds	r3, #24
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076e2:	78f9      	ldrb	r1, [r7, #3]
 80076e4:	2300      	movs	r3, #0
 80076e6:	2200      	movs	r2, #0
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f002 f924 	bl	8009936 <USBD_LL_Transmit>
 80076ee:	e01f      	b.n	8007730 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	33b0      	adds	r3, #176	; 0xb0
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d010      	beq.n	8007730 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	33b0      	adds	r3, #176	; 0xb0
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	32b0      	adds	r2, #176	; 0xb0
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	32b0      	adds	r2, #176	; 0xb0
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	e01a      	b.n	80077a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f002 f922 	bl	80099ba <USBD_LL_GetRxDataSize>
 8007776:	4602      	mov	r2, r0
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	33b0      	adds	r3, #176	; 0xb0
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800779c:	4611      	mov	r1, r2
 800779e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	32b0      	adds	r2, #176	; 0xb0
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e025      	b.n	8007818 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	33b0      	adds	r3, #176	; 0xb0
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01a      	beq.n	8007816 <USBD_CDC_EP0_RxReady+0x6c>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077e6:	2bff      	cmp	r3, #255	; 0xff
 80077e8:	d015      	beq.n	8007816 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	33b0      	adds	r3, #176	; 0xb0
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007802:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800780a:	b292      	uxth	r2, r2
 800780c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	22ff      	movs	r2, #255	; 0xff
 8007812:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007828:	2182      	movs	r1, #130	; 0x82
 800782a:	4818      	ldr	r0, [pc, #96]	; (800788c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800782c:	f000 fd09 	bl	8008242 <USBD_GetEpDesc>
 8007830:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007832:	2101      	movs	r1, #1
 8007834:	4815      	ldr	r0, [pc, #84]	; (800788c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007836:	f000 fd04 	bl	8008242 <USBD_GetEpDesc>
 800783a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800783c:	2181      	movs	r1, #129	; 0x81
 800783e:	4813      	ldr	r0, [pc, #76]	; (800788c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007840:	f000 fcff 	bl	8008242 <USBD_GetEpDesc>
 8007844:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2210      	movs	r2, #16
 8007850:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2200      	movs	r2, #0
 800785c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007860:	711a      	strb	r2, [r3, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007874:	711a      	strb	r2, [r3, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2243      	movs	r2, #67	; 0x43
 800787e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000054 	.word	0x20000054

08007890 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007898:	2182      	movs	r1, #130	; 0x82
 800789a:	4818      	ldr	r0, [pc, #96]	; (80078fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800789c:	f000 fcd1 	bl	8008242 <USBD_GetEpDesc>
 80078a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078a2:	2101      	movs	r1, #1
 80078a4:	4815      	ldr	r0, [pc, #84]	; (80078fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078a6:	f000 fccc 	bl	8008242 <USBD_GetEpDesc>
 80078aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078ac:	2181      	movs	r1, #129	; 0x81
 80078ae:	4813      	ldr	r0, [pc, #76]	; (80078fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078b0:	f000 fcc7 	bl	8008242 <USBD_GetEpDesc>
 80078b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2210      	movs	r2, #16
 80078c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d006      	beq.n	80078d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2200      	movs	r2, #0
 80078cc:	711a      	strb	r2, [r3, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f042 0202 	orr.w	r2, r2, #2
 80078d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d006      	beq.n	80078ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	711a      	strb	r2, [r3, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f042 0202 	orr.w	r2, r2, #2
 80078e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2243      	movs	r2, #67	; 0x43
 80078ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078f0:	4b02      	ldr	r3, [pc, #8]	; (80078fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000054 	.word	0x20000054

08007900 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007908:	2182      	movs	r1, #130	; 0x82
 800790a:	4818      	ldr	r0, [pc, #96]	; (800796c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800790c:	f000 fc99 	bl	8008242 <USBD_GetEpDesc>
 8007910:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007912:	2101      	movs	r1, #1
 8007914:	4815      	ldr	r0, [pc, #84]	; (800796c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007916:	f000 fc94 	bl	8008242 <USBD_GetEpDesc>
 800791a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800791c:	2181      	movs	r1, #129	; 0x81
 800791e:	4813      	ldr	r0, [pc, #76]	; (800796c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007920:	f000 fc8f 	bl	8008242 <USBD_GetEpDesc>
 8007924:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2210      	movs	r2, #16
 8007930:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d006      	beq.n	8007946 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	2200      	movs	r2, #0
 800793c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007940:	711a      	strb	r2, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d006      	beq.n	800795a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007954:	711a      	strb	r2, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2243      	movs	r2, #67	; 0x43
 800795e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000054 	.word	0x20000054

08007970 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	220a      	movs	r2, #10
 800797c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800797e:	4b03      	ldr	r3, [pc, #12]	; (800798c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20000010 	.word	0x20000010

08007990 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e009      	b.n	80079b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	33b0      	adds	r3, #176	; 0xb0
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	32b0      	adds	r2, #176	; 0xb0
 80079da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079de:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e008      	b.n	80079fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	32b0      	adds	r2, #176	; 0xb0
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e004      	b.n	8007a36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	32b0      	adds	r2, #176	; 0xb0
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	32b0      	adds	r2, #176	; 0xb0
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e018      	b.n	8007aa4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	7c1b      	ldrb	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a7a:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <USBD_CDC_ReceivePacket+0x68>)
 8007a7c:	7819      	ldrb	r1, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 ff75 	bl	8009978 <USBD_LL_PrepareReceive>
 8007a8e:	e008      	b.n	8007aa2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a90:	4b06      	ldr	r3, [pc, #24]	; (8007aac <USBD_CDC_ReceivePacket+0x68>)
 8007a92:	7819      	ldrb	r1, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a9a:	2340      	movs	r3, #64	; 0x40
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 ff6b 	bl	8009978 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000098 	.word	0x20000098

08007ab0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e01f      	b.n	8007b08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	79fa      	ldrb	r2, [r7, #7]
 8007afa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f001 fde5 	bl	80096cc <USBD_LL_Init>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e025      	b.n	8007b74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	32ae      	adds	r2, #174	; 0xae
 8007b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00f      	beq.n	8007b64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32ae      	adds	r2, #174	; 0xae
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	f107 020e 	add.w	r2, r7, #14
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 fded 	bl	8009764 <USBD_LL_Start>
 8007b8a:	4603      	mov	r3, r0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	4798      	blx	r3
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 f908 	bl	8008e3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d01a      	beq.n	8007c88 <USBD_LL_SetupStage+0x72>
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d822      	bhi.n	8007c9c <USBD_LL_SetupStage+0x86>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <USBD_LL_SetupStage+0x4a>
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d00a      	beq.n	8007c74 <USBD_LL_SetupStage+0x5e>
 8007c5e:	e01d      	b.n	8007c9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fb5f 	bl	800832c <USBD_StdDevReq>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]
      break;
 8007c72:	e020      	b.n	8007cb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fbc7 	bl	8008410 <USBD_StdItfReq>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]
      break;
 8007c86:	e016      	b.n	8007cb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fc29 	bl	80084e8 <USBD_StdEPReq>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9a:	e00c      	b.n	8007cb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ca2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fdba 	bl	8009824 <USBD_LL_StallEP>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	bf00      	nop
  }

  return ret;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d16e      	bne.n	8007db6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007cde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	f040 8098 	bne.w	8007e1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d913      	bls.n	8007d20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	bf28      	it	cs
 8007d12:	4613      	movcs	r3, r2
 8007d14:	461a      	mov	r2, r3
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f001 f984 	bl	8009026 <USBD_CtlContinueRx>
 8007d1e:	e07d      	b.n	8007e1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d26:	f003 031f 	and.w	r3, r3, #31
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d014      	beq.n	8007d58 <USBD_LL_DataOutStage+0x98>
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d81d      	bhi.n	8007d6e <USBD_LL_DataOutStage+0xae>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <USBD_LL_DataOutStage+0x7c>
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d003      	beq.n	8007d42 <USBD_LL_DataOutStage+0x82>
 8007d3a:	e018      	b.n	8007d6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	75bb      	strb	r3, [r7, #22]
            break;
 8007d40:	e018      	b.n	8007d74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 fa5e 	bl	800820e <USBD_CoreFindIF>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75bb      	strb	r3, [r7, #22]
            break;
 8007d56:	e00d      	b.n	8007d74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	4619      	mov	r1, r3
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fa60 	bl	8008228 <USBD_CoreFindEP>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d6c:	e002      	b.n	8007d74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75bb      	strb	r3, [r7, #22]
            break;
 8007d72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d74:	7dbb      	ldrb	r3, [r7, #22]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d119      	bne.n	8007dae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d113      	bne.n	8007dae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d86:	7dba      	ldrb	r2, [r7, #22]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	32ae      	adds	r2, #174	; 0xae
 8007d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00b      	beq.n	8007dae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d96:	7dba      	ldrb	r2, [r7, #22]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d9e:	7dba      	ldrb	r2, [r7, #22]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	32ae      	adds	r2, #174	; 0xae
 8007da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f001 f94a 	bl	8009048 <USBD_CtlSendStatus>
 8007db4:	e032      	b.n	8007e1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fa31 	bl	8008228 <USBD_CoreFindEP>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dca:	7dbb      	ldrb	r3, [r7, #22]
 8007dcc:	2bff      	cmp	r3, #255	; 0xff
 8007dce:	d025      	beq.n	8007e1c <USBD_LL_DataOutStage+0x15c>
 8007dd0:	7dbb      	ldrb	r3, [r7, #22]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d122      	bne.n	8007e1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d117      	bne.n	8007e12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007de2:	7dba      	ldrb	r2, [r7, #22]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	32ae      	adds	r2, #174	; 0xae
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00f      	beq.n	8007e12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007df2:	7dba      	ldrb	r2, [r7, #22]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007dfa:	7dba      	ldrb	r2, [r7, #22]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	32ae      	adds	r2, #174	; 0xae
 8007e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	7afa      	ldrb	r2, [r7, #11]
 8007e08:	4611      	mov	r1, r2
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	4798      	blx	r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	e000      	b.n	8007e1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b086      	sub	sp, #24
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d16f      	bne.n	8007f1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3314      	adds	r3, #20
 8007e3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d15a      	bne.n	8007f00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d914      	bls.n	8007e80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f001 f8ac 	bl	8008fca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e72:	2300      	movs	r3, #0
 8007e74:	2200      	movs	r2, #0
 8007e76:	2100      	movs	r1, #0
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f001 fd7d 	bl	8009978 <USBD_LL_PrepareReceive>
 8007e7e:	e03f      	b.n	8007f00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d11c      	bne.n	8007ec6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d316      	bcc.n	8007ec6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d20f      	bcs.n	8007ec6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f001 f88d 	bl	8008fca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f001 fd5a 	bl	8009978 <USBD_LL_PrepareReceive>
 8007ec4:	e01c      	b.n	8007f00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d10f      	bne.n	8007ef2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ef2:	2180      	movs	r1, #128	; 0x80
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f001 fc95 	bl	8009824 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f001 f8b7 	bl	800906e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d03a      	beq.n	8007f80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7ff fe42 	bl	8007b94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f18:	e032      	b.n	8007f80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	4619      	mov	r1, r3
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 f97f 	bl	8008228 <USBD_CoreFindEP>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	2bff      	cmp	r3, #255	; 0xff
 8007f32:	d025      	beq.n	8007f80 <USBD_LL_DataInStage+0x15a>
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d122      	bne.n	8007f80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d11c      	bne.n	8007f80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f46:	7dfa      	ldrb	r2, [r7, #23]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	32ae      	adds	r2, #174	; 0xae
 8007f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d014      	beq.n	8007f80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f56:	7dfa      	ldrb	r2, [r7, #23]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f5e:	7dfa      	ldrb	r2, [r7, #23]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	32ae      	adds	r2, #174	; 0xae
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	7afa      	ldrb	r2, [r7, #11]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	4798      	blx	r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f76:	7dbb      	ldrb	r3, [r7, #22]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f7c:	7dbb      	ldrb	r3, [r7, #22]
 8007f7e:	e000      	b.n	8007f82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d014      	beq.n	8007ff0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6852      	ldr	r2, [r2, #4]
 8007fde:	b2d2      	uxtb	r2, r2
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ff0:	2340      	movs	r3, #64	; 0x40
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fbcf 	bl	800979a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	2200      	movs	r2, #0
 8008010:	2180      	movs	r1, #128	; 0x80
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fbc1 	bl	800979a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2240      	movs	r2, #64	; 0x40
 8008022:	621a      	str	r2, [r3, #32]

  return ret;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	78fa      	ldrb	r2, [r7, #3]
 800803e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805c:	b2da      	uxtb	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2204      	movs	r2, #4
 8008068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b04      	cmp	r3, #4
 800808c:	d106      	bne.n	800809c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008094:	b2da      	uxtb	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d110      	bne.n	80080e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00b      	beq.n	80080e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	32ae      	adds	r2, #174	; 0xae
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008108:	2303      	movs	r3, #3
 800810a:	e01c      	b.n	8008146 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b03      	cmp	r3, #3
 8008116:	d115      	bne.n	8008144 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	32ae      	adds	r2, #174	; 0xae
 8008122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00b      	beq.n	8008144 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	; 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	4611      	mov	r1, r2
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	32ae      	adds	r2, #174	; 0xae
 8008164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e01c      	b.n	80081aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b03      	cmp	r3, #3
 800817a:	d115      	bne.n	80081a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	32ae      	adds	r2, #174	; 0xae
 8008186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	32ae      	adds	r2, #174	; 0xae
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	78fa      	ldrb	r2, [r7, #3]
 80081a2:	4611      	mov	r1, r2
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00e      	beq.n	8008204 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6852      	ldr	r2, [r2, #4]
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	4611      	mov	r1, r2
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008200:	2303      	movs	r3, #3
 8008202:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800821a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008234:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b086      	sub	sp, #24
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	885b      	ldrh	r3, [r3, #2]
 800825e:	b29a      	uxth	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	429a      	cmp	r2, r3
 8008268:	d920      	bls.n	80082ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b29b      	uxth	r3, r3
 8008270:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008272:	e013      	b.n	800829c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008274:	f107 030a 	add.w	r3, r7, #10
 8008278:	4619      	mov	r1, r3
 800827a:	6978      	ldr	r0, [r7, #20]
 800827c:	f000 f81b 	bl	80082b6 <USBD_GetNextDesc>
 8008280:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b05      	cmp	r3, #5
 8008288:	d108      	bne.n	800829c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	789b      	ldrb	r3, [r3, #2]
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	429a      	cmp	r2, r3
 8008296:	d008      	beq.n	80082aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008298:	2300      	movs	r3, #0
 800829a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	885b      	ldrh	r3, [r3, #2]
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	897b      	ldrh	r3, [r7, #10]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d8e5      	bhi.n	8008274 <USBD_GetEpDesc+0x32>
 80082a8:	e000      	b.n	80082ac <USBD_GetEpDesc+0x6a>
          break;
 80082aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082ac:	693b      	ldr	r3, [r7, #16]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	881a      	ldrh	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	4413      	add	r3, r2
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4413      	add	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082e2:	68fb      	ldr	r3, [r7, #12]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	3301      	adds	r3, #1
 8008306:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800830e:	8a3b      	ldrh	r3, [r7, #16]
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b21a      	sxth	r2, r3
 8008314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008318:	4313      	orrs	r3, r2
 800831a:	b21b      	sxth	r3, r3
 800831c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800831e:	89fb      	ldrh	r3, [r7, #14]
}
 8008320:	4618      	mov	r0, r3
 8008322:	371c      	adds	r7, #28
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d005      	beq.n	8008352 <USBD_StdDevReq+0x26>
 8008346:	2b40      	cmp	r3, #64	; 0x40
 8008348:	d857      	bhi.n	80083fa <USBD_StdDevReq+0xce>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00f      	beq.n	800836e <USBD_StdDevReq+0x42>
 800834e:	2b20      	cmp	r3, #32
 8008350:	d153      	bne.n	80083fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	32ae      	adds	r2, #174	; 0xae
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	4798      	blx	r3
 8008368:	4603      	mov	r3, r0
 800836a:	73fb      	strb	r3, [r7, #15]
      break;
 800836c:	e04a      	b.n	8008404 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	785b      	ldrb	r3, [r3, #1]
 8008372:	2b09      	cmp	r3, #9
 8008374:	d83b      	bhi.n	80083ee <USBD_StdDevReq+0xc2>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USBD_StdDevReq+0x50>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	080083d1 	.word	0x080083d1
 8008380:	080083e5 	.word	0x080083e5
 8008384:	080083ef 	.word	0x080083ef
 8008388:	080083db 	.word	0x080083db
 800838c:	080083ef 	.word	0x080083ef
 8008390:	080083af 	.word	0x080083af
 8008394:	080083a5 	.word	0x080083a5
 8008398:	080083ef 	.word	0x080083ef
 800839c:	080083c7 	.word	0x080083c7
 80083a0:	080083b9 	.word	0x080083b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fa3c 	bl	8008824 <USBD_GetDescriptor>
          break;
 80083ac:	e024      	b.n	80083f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fba1 	bl	8008af8 <USBD_SetAddress>
          break;
 80083b6:	e01f      	b.n	80083f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fbe0 	bl	8008b80 <USBD_SetConfig>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73fb      	strb	r3, [r7, #15]
          break;
 80083c4:	e018      	b.n	80083f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fc83 	bl	8008cd4 <USBD_GetConfig>
          break;
 80083ce:	e013      	b.n	80083f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fcb4 	bl	8008d40 <USBD_GetStatus>
          break;
 80083d8:	e00e      	b.n	80083f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fce3 	bl	8008da8 <USBD_SetFeature>
          break;
 80083e2:	e009      	b.n	80083f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fd07 	bl	8008dfa <USBD_ClrFeature>
          break;
 80083ec:	e004      	b.n	80083f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fd5e 	bl	8008eb2 <USBD_CtlError>
          break;
 80083f6:	bf00      	nop
      }
      break;
 80083f8:	e004      	b.n	8008404 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fd58 	bl	8008eb2 <USBD_CtlError>
      break;
 8008402:	bf00      	nop
  }

  return ret;
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop

08008410 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d005      	beq.n	8008436 <USBD_StdItfReq+0x26>
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d852      	bhi.n	80084d4 <USBD_StdItfReq+0xc4>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <USBD_StdItfReq+0x26>
 8008432:	2b20      	cmp	r3, #32
 8008434:	d14e      	bne.n	80084d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843c:	b2db      	uxtb	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	2b02      	cmp	r3, #2
 8008442:	d840      	bhi.n	80084c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	889b      	ldrh	r3, [r3, #4]
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b01      	cmp	r3, #1
 800844c:	d836      	bhi.n	80084bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	889b      	ldrh	r3, [r3, #4]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff fed9 	bl	800820e <USBD_CoreFindIF>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	2bff      	cmp	r3, #255	; 0xff
 8008464:	d01d      	beq.n	80084a2 <USBD_StdItfReq+0x92>
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d11a      	bne.n	80084a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800846c:	7bba      	ldrb	r2, [r7, #14]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	32ae      	adds	r2, #174	; 0xae
 8008472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00f      	beq.n	800849c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800847c:	7bba      	ldrb	r2, [r7, #14]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008484:	7bba      	ldrb	r2, [r7, #14]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	32ae      	adds	r2, #174	; 0xae
 800848a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800849a:	e004      	b.n	80084a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800849c:	2303      	movs	r3, #3
 800849e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084a0:	e001      	b.n	80084a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084a2:	2303      	movs	r3, #3
 80084a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	88db      	ldrh	r3, [r3, #6]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d110      	bne.n	80084d0 <USBD_StdItfReq+0xc0>
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10d      	bne.n	80084d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fdc7 	bl	8009048 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084ba:	e009      	b.n	80084d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fcf7 	bl	8008eb2 <USBD_CtlError>
          break;
 80084c4:	e004      	b.n	80084d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fcf2 	bl	8008eb2 <USBD_CtlError>
          break;
 80084ce:	e000      	b.n	80084d2 <USBD_StdItfReq+0xc2>
          break;
 80084d0:	bf00      	nop
      }
      break;
 80084d2:	e004      	b.n	80084de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fceb 	bl	8008eb2 <USBD_CtlError>
      break;
 80084dc:	bf00      	nop
  }

  return ret;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	889b      	ldrh	r3, [r3, #4]
 80084fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008504:	2b40      	cmp	r3, #64	; 0x40
 8008506:	d007      	beq.n	8008518 <USBD_StdEPReq+0x30>
 8008508:	2b40      	cmp	r3, #64	; 0x40
 800850a:	f200 817f 	bhi.w	800880c <USBD_StdEPReq+0x324>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d02a      	beq.n	8008568 <USBD_StdEPReq+0x80>
 8008512:	2b20      	cmp	r3, #32
 8008514:	f040 817a 	bne.w	800880c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff fe83 	bl	8008228 <USBD_CoreFindEP>
 8008522:	4603      	mov	r3, r0
 8008524:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008526:	7b7b      	ldrb	r3, [r7, #13]
 8008528:	2bff      	cmp	r3, #255	; 0xff
 800852a:	f000 8174 	beq.w	8008816 <USBD_StdEPReq+0x32e>
 800852e:	7b7b      	ldrb	r3, [r7, #13]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f040 8170 	bne.w	8008816 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008536:	7b7a      	ldrb	r2, [r7, #13]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800853e:	7b7a      	ldrb	r2, [r7, #13]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	32ae      	adds	r2, #174	; 0xae
 8008544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 8163 	beq.w	8008816 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008550:	7b7a      	ldrb	r2, [r7, #13]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	32ae      	adds	r2, #174	; 0xae
 8008556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008566:	e156      	b.n	8008816 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2b03      	cmp	r3, #3
 800856e:	d008      	beq.n	8008582 <USBD_StdEPReq+0x9a>
 8008570:	2b03      	cmp	r3, #3
 8008572:	f300 8145 	bgt.w	8008800 <USBD_StdEPReq+0x318>
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 809b 	beq.w	80086b2 <USBD_StdEPReq+0x1ca>
 800857c:	2b01      	cmp	r3, #1
 800857e:	d03c      	beq.n	80085fa <USBD_StdEPReq+0x112>
 8008580:	e13e      	b.n	8008800 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b02      	cmp	r3, #2
 800858c:	d002      	beq.n	8008594 <USBD_StdEPReq+0xac>
 800858e:	2b03      	cmp	r3, #3
 8008590:	d016      	beq.n	80085c0 <USBD_StdEPReq+0xd8>
 8008592:	e02c      	b.n	80085ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00d      	beq.n	80085b6 <USBD_StdEPReq+0xce>
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	2b80      	cmp	r3, #128	; 0x80
 800859e:	d00a      	beq.n	80085b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 f93d 	bl	8009824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085aa:	2180      	movs	r1, #128	; 0x80
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 f939 	bl	8009824 <USBD_LL_StallEP>
 80085b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085b4:	e020      	b.n	80085f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fc7a 	bl	8008eb2 <USBD_CtlError>
              break;
 80085be:	e01b      	b.n	80085f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	885b      	ldrh	r3, [r3, #2]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10e      	bne.n	80085e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00b      	beq.n	80085e6 <USBD_StdEPReq+0xfe>
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b80      	cmp	r3, #128	; 0x80
 80085d2:	d008      	beq.n	80085e6 <USBD_StdEPReq+0xfe>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	88db      	ldrh	r3, [r3, #6]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d104      	bne.n	80085e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 f91f 	bl	8009824 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fd2e 	bl	8009048 <USBD_CtlSendStatus>

              break;
 80085ec:	e004      	b.n	80085f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fc5e 	bl	8008eb2 <USBD_CtlError>
              break;
 80085f6:	bf00      	nop
          }
          break;
 80085f8:	e107      	b.n	800880a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d002      	beq.n	800860c <USBD_StdEPReq+0x124>
 8008606:	2b03      	cmp	r3, #3
 8008608:	d016      	beq.n	8008638 <USBD_StdEPReq+0x150>
 800860a:	e04b      	b.n	80086a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00d      	beq.n	800862e <USBD_StdEPReq+0x146>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d00a      	beq.n	800862e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f901 	bl	8009824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008622:	2180      	movs	r1, #128	; 0x80
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 f8fd 	bl	8009824 <USBD_LL_StallEP>
 800862a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800862c:	e040      	b.n	80086b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fc3e 	bl	8008eb2 <USBD_CtlError>
              break;
 8008636:	e03b      	b.n	80086b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	885b      	ldrh	r3, [r3, #2]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d136      	bne.n	80086ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008646:	2b00      	cmp	r3, #0
 8008648:	d004      	beq.n	8008654 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 f907 	bl	8009862 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fcf7 	bl	8009048 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff fde2 	bl	8008228 <USBD_CoreFindEP>
 8008664:	4603      	mov	r3, r0
 8008666:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008668:	7b7b      	ldrb	r3, [r7, #13]
 800866a:	2bff      	cmp	r3, #255	; 0xff
 800866c:	d01f      	beq.n	80086ae <USBD_StdEPReq+0x1c6>
 800866e:	7b7b      	ldrb	r3, [r7, #13]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d11c      	bne.n	80086ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008674:	7b7a      	ldrb	r2, [r7, #13]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800867c:	7b7a      	ldrb	r2, [r7, #13]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	32ae      	adds	r2, #174	; 0xae
 8008682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d010      	beq.n	80086ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800868c:	7b7a      	ldrb	r2, [r7, #13]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	32ae      	adds	r2, #174	; 0xae
 8008692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086a2:	e004      	b.n	80086ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc03 	bl	8008eb2 <USBD_CtlError>
              break;
 80086ac:	e000      	b.n	80086b0 <USBD_StdEPReq+0x1c8>
              break;
 80086ae:	bf00      	nop
          }
          break;
 80086b0:	e0ab      	b.n	800880a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d002      	beq.n	80086c4 <USBD_StdEPReq+0x1dc>
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d032      	beq.n	8008728 <USBD_StdEPReq+0x240>
 80086c2:	e097      	b.n	80087f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <USBD_StdEPReq+0x1f2>
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b80      	cmp	r3, #128	; 0x80
 80086ce:	d004      	beq.n	80086da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fbed 	bl	8008eb2 <USBD_CtlError>
                break;
 80086d8:	e091      	b.n	80087fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	da0b      	bge.n	80086fa <USBD_StdEPReq+0x212>
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	3310      	adds	r3, #16
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	4413      	add	r3, r2
 80086f6:	3304      	adds	r3, #4
 80086f8:	e00b      	b.n	8008712 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	3304      	adds	r3, #4
 8008712:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2202      	movs	r2, #2
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fc37 	bl	8008f94 <USBD_CtlSendData>
              break;
 8008726:	e06a      	b.n	80087fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800872c:	2b00      	cmp	r3, #0
 800872e:	da11      	bge.n	8008754 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	f003 020f 	and.w	r2, r3, #15
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	440b      	add	r3, r1
 8008742:	3324      	adds	r3, #36	; 0x24
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d117      	bne.n	800877a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fbb0 	bl	8008eb2 <USBD_CtlError>
                  break;
 8008752:	e054      	b.n	80087fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	f003 020f 	and.w	r2, r3, #15
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d104      	bne.n	800877a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fb9d 	bl	8008eb2 <USBD_CtlError>
                  break;
 8008778:	e041      	b.n	80087fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800877a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800877e:	2b00      	cmp	r3, #0
 8008780:	da0b      	bge.n	800879a <USBD_StdEPReq+0x2b2>
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	3310      	adds	r3, #16
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	3304      	adds	r3, #4
 8008798:	e00b      	b.n	80087b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	3304      	adds	r3, #4
 80087b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <USBD_StdEPReq+0x2d8>
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b80      	cmp	r3, #128	; 0x80
 80087be:	d103      	bne.n	80087c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e00e      	b.n	80087e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f867 	bl	80098a0 <USBD_LL_IsStallEP>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2201      	movs	r2, #1
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	e002      	b.n	80087e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2202      	movs	r2, #2
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fbd1 	bl	8008f94 <USBD_CtlSendData>
              break;
 80087f2:	e004      	b.n	80087fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fb5b 	bl	8008eb2 <USBD_CtlError>
              break;
 80087fc:	bf00      	nop
          }
          break;
 80087fe:	e004      	b.n	800880a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fb55 	bl	8008eb2 <USBD_CtlError>
          break;
 8008808:	bf00      	nop
      }
      break;
 800880a:	e005      	b.n	8008818 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fb4f 	bl	8008eb2 <USBD_CtlError>
      break;
 8008814:	e000      	b.n	8008818 <USBD_StdEPReq+0x330>
      break;
 8008816:	bf00      	nop
  }

  return ret;
 8008818:	7bfb      	ldrb	r3, [r7, #15]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	885b      	ldrh	r3, [r3, #2]
 800883e:	0a1b      	lsrs	r3, r3, #8
 8008840:	b29b      	uxth	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	2b06      	cmp	r3, #6
 8008846:	f200 8128 	bhi.w	8008a9a <USBD_GetDescriptor+0x276>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <USBD_GetDescriptor+0x2c>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	0800886d 	.word	0x0800886d
 8008854:	08008885 	.word	0x08008885
 8008858:	080088c5 	.word	0x080088c5
 800885c:	08008a9b 	.word	0x08008a9b
 8008860:	08008a9b 	.word	0x08008a9b
 8008864:	08008a3b 	.word	0x08008a3b
 8008868:	08008a67 	.word	0x08008a67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	7c12      	ldrb	r2, [r2, #16]
 8008878:	f107 0108 	add.w	r1, r7, #8
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	60f8      	str	r0, [r7, #12]
      break;
 8008882:	e112      	b.n	8008aaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	7c1b      	ldrb	r3, [r3, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10d      	bne.n	80088a8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008894:	f107 0208 	add.w	r2, r7, #8
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	2202      	movs	r2, #2
 80088a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088a6:	e100      	b.n	8008aaa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	f107 0208 	add.w	r2, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	2202      	movs	r2, #2
 80088c0:	701a      	strb	r2, [r3, #0]
      break;
 80088c2:	e0f2      	b.n	8008aaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	885b      	ldrh	r3, [r3, #2]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b05      	cmp	r3, #5
 80088cc:	f200 80ac 	bhi.w	8008a28 <USBD_GetDescriptor+0x204>
 80088d0:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <USBD_GetDescriptor+0xb4>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	080088f1 	.word	0x080088f1
 80088dc:	08008925 	.word	0x08008925
 80088e0:	08008959 	.word	0x08008959
 80088e4:	0800898d 	.word	0x0800898d
 80088e8:	080089c1 	.word	0x080089c1
 80088ec:	080089f5 	.word	0x080089f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008912:	e091      	b.n	8008a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 facb 	bl	8008eb2 <USBD_CtlError>
            err++;
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	3301      	adds	r3, #1
 8008920:	72fb      	strb	r3, [r7, #11]
          break;
 8008922:	e089      	b.n	8008a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008946:	e077      	b.n	8008a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fab1 	bl	8008eb2 <USBD_CtlError>
            err++;
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	3301      	adds	r3, #1
 8008954:	72fb      	strb	r3, [r7, #11]
          break;
 8008956:	e06f      	b.n	8008a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7c12      	ldrb	r2, [r2, #16]
 8008970:	f107 0108 	add.w	r1, r7, #8
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897a:	e05d      	b.n	8008a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa97 	bl	8008eb2 <USBD_CtlError>
            err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
          break;
 800898a:	e055      	b.n	8008a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	7c12      	ldrb	r2, [r2, #16]
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ae:	e043      	b.n	8008a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa7d 	bl	8008eb2 <USBD_CtlError>
            err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
          break;
 80089be:	e03b      	b.n	8008a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7c12      	ldrb	r2, [r2, #16]
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e2:	e029      	b.n	8008a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa63 	bl	8008eb2 <USBD_CtlError>
            err++;
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	3301      	adds	r3, #1
 80089f0:	72fb      	strb	r3, [r7, #11]
          break;
 80089f2:	e021      	b.n	8008a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a16:	e00f      	b.n	8008a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa49 	bl	8008eb2 <USBD_CtlError>
            err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
          break;
 8008a26:	e007      	b.n	8008a38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa41 	bl	8008eb2 <USBD_CtlError>
          err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a36:	bf00      	nop
      }
      break;
 8008a38:	e037      	b.n	8008aaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7c1b      	ldrb	r3, [r3, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4a:	f107 0208 	add.w	r2, r7, #8
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4798      	blx	r3
 8008a52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a54:	e029      	b.n	8008aaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fa2a 	bl	8008eb2 <USBD_CtlError>
        err++;
 8008a5e:	7afb      	ldrb	r3, [r7, #11]
 8008a60:	3301      	adds	r3, #1
 8008a62:	72fb      	strb	r3, [r7, #11]
      break;
 8008a64:	e021      	b.n	8008aaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	7c1b      	ldrb	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10d      	bne.n	8008a8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	f107 0208 	add.w	r2, r7, #8
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4798      	blx	r3
 8008a7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3301      	adds	r3, #1
 8008a84:	2207      	movs	r2, #7
 8008a86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a88:	e00f      	b.n	8008aaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fa10 	bl	8008eb2 <USBD_CtlError>
        err++;
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	3301      	adds	r3, #1
 8008a96:	72fb      	strb	r3, [r7, #11]
      break;
 8008a98:	e007      	b.n	8008aaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa08 	bl	8008eb2 <USBD_CtlError>
      err++;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa8:	bf00      	nop
  }

  if (err != 0U)
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d11e      	bne.n	8008aee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	88db      	ldrh	r3, [r3, #6]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d016      	beq.n	8008ae6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ab8:	893b      	ldrh	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00e      	beq.n	8008adc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	88da      	ldrh	r2, [r3, #6]
 8008ac2:	893b      	ldrh	r3, [r7, #8]
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	bf28      	it	cs
 8008ac8:	4613      	movcs	r3, r2
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ace:	893b      	ldrh	r3, [r7, #8]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	68f9      	ldr	r1, [r7, #12]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa5d 	bl	8008f94 <USBD_CtlSendData>
 8008ada:	e009      	b.n	8008af0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f9e7 	bl	8008eb2 <USBD_CtlError>
 8008ae4:	e004      	b.n	8008af0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 faae 	bl	8009048 <USBD_CtlSendStatus>
 8008aec:	e000      	b.n	8008af0 <USBD_GetDescriptor+0x2cc>
    return;
 8008aee:	bf00      	nop
  }
}
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop

08008af8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	889b      	ldrh	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d131      	bne.n	8008b6e <USBD_SetAddress+0x76>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	88db      	ldrh	r3, [r3, #6]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d12d      	bne.n	8008b6e <USBD_SetAddress+0x76>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	885b      	ldrh	r3, [r3, #2]
 8008b16:	2b7f      	cmp	r3, #127	; 0x7f
 8008b18:	d829      	bhi.n	8008b6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	885b      	ldrh	r3, [r3, #2]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d104      	bne.n	8008b3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f9bc 	bl	8008eb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3a:	e01d      	b.n	8008b78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7bfa      	ldrb	r2, [r7, #15]
 8008b40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fed5 	bl	80098f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa7a 	bl	8009048 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d004      	beq.n	8008b64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b62:	e009      	b.n	8008b78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6c:	e004      	b.n	8008b78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f99e 	bl	8008eb2 <USBD_CtlError>
  }
}
 8008b76:	bf00      	nop
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	4b4e      	ldr	r3, [pc, #312]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008b96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b98:	4b4d      	ldr	r3, [pc, #308]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d905      	bls.n	8008bac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f985 	bl	8008eb2 <USBD_CtlError>
    return USBD_FAIL;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e08c      	b.n	8008cc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d002      	beq.n	8008bbe <USBD_SetConfig+0x3e>
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d029      	beq.n	8008c10 <USBD_SetConfig+0x90>
 8008bbc:	e075      	b.n	8008caa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bbe:	4b44      	ldr	r3, [pc, #272]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d020      	beq.n	8008c08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bc6:	4b42      	ldr	r3, [pc, #264]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bd0:	4b3f      	ldr	r3, [pc, #252]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7fe ffe7 	bl	8007baa <USBD_SetClassConfig>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f962 	bl	8008eb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bf6:	e065      	b.n	8008cc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fa25 	bl	8009048 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2203      	movs	r2, #3
 8008c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c06:	e05d      	b.n	8008cc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fa1d 	bl	8009048 <USBD_CtlSendStatus>
      break;
 8008c0e:	e059      	b.n	8008cc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c10:	4b2f      	ldr	r3, [pc, #188]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d112      	bne.n	8008c3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c20:	4b2b      	ldr	r3, [pc, #172]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c2a:	4b29      	ldr	r3, [pc, #164]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7fe ffd6 	bl	8007be2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fa06 	bl	8009048 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c3c:	e042      	b.n	8008cc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c3e:	4b24      	ldr	r3, [pc, #144]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d02a      	beq.n	8008ca2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7fe ffc4 	bl	8007be2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c5a:	4b1d      	ldr	r3, [pc, #116]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c64:	4b1a      	ldr	r3, [pc, #104]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fe ff9d 	bl	8007baa <USBD_SetClassConfig>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00f      	beq.n	8008c9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f918 	bl	8008eb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7fe ffa9 	bl	8007be2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c98:	e014      	b.n	8008cc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f9d4 	bl	8009048 <USBD_CtlSendStatus>
      break;
 8008ca0:	e010      	b.n	8008cc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f9d0 	bl	8009048 <USBD_CtlSendStatus>
      break;
 8008ca8:	e00c      	b.n	8008cc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f900 	bl	8008eb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <USBD_SetConfig+0x150>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7fe ff92 	bl	8007be2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc2:	bf00      	nop
  }

  return ret;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	200002d8 	.word	0x200002d8

08008cd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	88db      	ldrh	r3, [r3, #6]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d004      	beq.n	8008cf0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f8e2 	bl	8008eb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cee:	e023      	b.n	8008d38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	dc02      	bgt.n	8008d02 <USBD_GetConfig+0x2e>
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	dc03      	bgt.n	8008d08 <USBD_GetConfig+0x34>
 8008d00:	e015      	b.n	8008d2e <USBD_GetConfig+0x5a>
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d00b      	beq.n	8008d1e <USBD_GetConfig+0x4a>
 8008d06:	e012      	b.n	8008d2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3308      	adds	r3, #8
 8008d12:	2201      	movs	r2, #1
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f93c 	bl	8008f94 <USBD_CtlSendData>
        break;
 8008d1c:	e00c      	b.n	8008d38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3304      	adds	r3, #4
 8008d22:	2201      	movs	r2, #1
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f934 	bl	8008f94 <USBD_CtlSendData>
        break;
 8008d2c:	e004      	b.n	8008d38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f8be 	bl	8008eb2 <USBD_CtlError>
        break;
 8008d36:	bf00      	nop
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	3b01      	subs	r3, #1
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d81e      	bhi.n	8008d96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	88db      	ldrh	r3, [r3, #6]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d004      	beq.n	8008d6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f8a5 	bl	8008eb2 <USBD_CtlError>
        break;
 8008d68:	e01a      	b.n	8008da0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f043 0202 	orr.w	r2, r3, #2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	330c      	adds	r3, #12
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f900 	bl	8008f94 <USBD_CtlSendData>
      break;
 8008d94:	e004      	b.n	8008da0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f88a 	bl	8008eb2 <USBD_CtlError>
      break;
 8008d9e:	bf00      	nop
  }
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	885b      	ldrh	r3, [r3, #2]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d107      	bne.n	8008dca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f940 	bl	8009048 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008dc8:	e013      	b.n	8008df2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	885b      	ldrh	r3, [r3, #2]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d10b      	bne.n	8008dea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	889b      	ldrh	r3, [r3, #4]
 8008dd6:	0a1b      	lsrs	r3, r3, #8
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f930 	bl	8009048 <USBD_CtlSendStatus>
}
 8008de8:	e003      	b.n	8008df2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f860 	bl	8008eb2 <USBD_CtlError>
}
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d80b      	bhi.n	8008e2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	885b      	ldrh	r3, [r3, #2]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d10c      	bne.n	8008e34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f910 	bl	8009048 <USBD_CtlSendStatus>
      }
      break;
 8008e28:	e004      	b.n	8008e34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f840 	bl	8008eb2 <USBD_CtlError>
      break;
 8008e32:	e000      	b.n	8008e36 <USBD_ClrFeature+0x3c>
      break;
 8008e34:	bf00      	nop
  }
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	781a      	ldrb	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3301      	adds	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	781a      	ldrb	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff fa41 	bl	80082f0 <SWAPBYTE>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	461a      	mov	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7ff fa34 	bl	80082f0 <SWAPBYTE>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fa27 	bl	80082f0 <SWAPBYTE>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	80da      	strh	r2, [r3, #6]
}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ebc:	2180      	movs	r1, #128	; 0x80
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fcb0 	bl	8009824 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fcac 	bl	8009824 <USBD_LL_StallEP>
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d036      	beq.n	8008f58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008eee:	6938      	ldr	r0, [r7, #16]
 8008ef0:	f000 f836 	bl	8008f60 <USBD_GetLen>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	4413      	add	r3, r2
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	7812      	ldrb	r2, [r2, #0]
 8008f0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	3301      	adds	r3, #1
 8008f12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	4413      	add	r3, r2
 8008f1a:	2203      	movs	r2, #3
 8008f1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	3301      	adds	r3, #1
 8008f22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f24:	e013      	b.n	8008f4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	7812      	ldrb	r2, [r2, #0]
 8008f30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	3301      	adds	r3, #1
 8008f36:	613b      	str	r3, [r7, #16]
    idx++;
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	4413      	add	r3, r2
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e7      	bne.n	8008f26 <USBD_GetString+0x52>
 8008f56:	e000      	b.n	8008f5a <USBD_GetString+0x86>
    return;
 8008f58:	bf00      	nop
  }
}
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f70:	e005      	b.n	8008f7e <USBD_GetLen+0x1e>
  {
    len++;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	3301      	adds	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1f5      	bne.n	8008f72 <USBD_GetLen+0x12>
  }

  return len;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fcbb 	bl	8009936 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	2100      	movs	r1, #0
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fcaa 	bl	8009936 <USBD_LL_Transmit>

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	2100      	movs	r1, #0
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fcae 	bl	8009978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	2100      	movs	r1, #0
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 fc9d 	bl	8009978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2204      	movs	r2, #4
 8009054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009058:	2300      	movs	r3, #0
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fc69 	bl	8009936 <USBD_LL_Transmit>

  return USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2205      	movs	r2, #5
 800907a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800907e:	2300      	movs	r3, #0
 8009080:	2200      	movs	r2, #0
 8009082:	2100      	movs	r1, #0
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fc77 	bl	8009978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009098:	2200      	movs	r2, #0
 800909a:	4912      	ldr	r1, [pc, #72]	; (80090e4 <MX_USB_DEVICE_Init+0x50>)
 800909c:	4812      	ldr	r0, [pc, #72]	; (80090e8 <MX_USB_DEVICE_Init+0x54>)
 800909e:	f7fe fd07 	bl	8007ab0 <USBD_Init>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090a8:	f7f7 ffde 	bl	8001068 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090ac:	490f      	ldr	r1, [pc, #60]	; (80090ec <MX_USB_DEVICE_Init+0x58>)
 80090ae:	480e      	ldr	r0, [pc, #56]	; (80090e8 <MX_USB_DEVICE_Init+0x54>)
 80090b0:	f7fe fd2e 	bl	8007b10 <USBD_RegisterClass>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090ba:	f7f7 ffd5 	bl	8001068 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090be:	490c      	ldr	r1, [pc, #48]	; (80090f0 <MX_USB_DEVICE_Init+0x5c>)
 80090c0:	4809      	ldr	r0, [pc, #36]	; (80090e8 <MX_USB_DEVICE_Init+0x54>)
 80090c2:	f7fe fc65 	bl	8007990 <USBD_CDC_RegisterInterface>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090cc:	f7f7 ffcc 	bl	8001068 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090d0:	4805      	ldr	r0, [pc, #20]	; (80090e8 <MX_USB_DEVICE_Init+0x54>)
 80090d2:	f7fe fd53 	bl	8007b7c <USBD_Start>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090dc:	f7f7 ffc4 	bl	8001068 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090e0:	bf00      	nop
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	200000b0 	.word	0x200000b0
 80090e8:	200002dc 	.word	0x200002dc
 80090ec:	2000001c 	.word	0x2000001c
 80090f0:	2000009c 	.word	0x2000009c

080090f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090f8:	2200      	movs	r2, #0
 80090fa:	4905      	ldr	r1, [pc, #20]	; (8009110 <CDC_Init_FS+0x1c>)
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <CDC_Init_FS+0x20>)
 80090fe:	f7fe fc61 	bl	80079c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009102:	4905      	ldr	r1, [pc, #20]	; (8009118 <CDC_Init_FS+0x24>)
 8009104:	4803      	ldr	r0, [pc, #12]	; (8009114 <CDC_Init_FS+0x20>)
 8009106:	f7fe fc7f 	bl	8007a08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800910a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800910c:	4618      	mov	r0, r3
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20000db8 	.word	0x20000db8
 8009114:	200002dc 	.word	0x200002dc
 8009118:	200005b8 	.word	0x200005b8

0800911c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009120:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009122:	4618      	mov	r0, r3
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	6039      	str	r1, [r7, #0]
 8009136:	71fb      	strb	r3, [r7, #7]
 8009138:	4613      	mov	r3, r2
 800913a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	2b23      	cmp	r3, #35	; 0x23
 8009140:	d84a      	bhi.n	80091d8 <CDC_Control_FS+0xac>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <CDC_Control_FS+0x1c>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	080091d9 	.word	0x080091d9
 800914c:	080091d9 	.word	0x080091d9
 8009150:	080091d9 	.word	0x080091d9
 8009154:	080091d9 	.word	0x080091d9
 8009158:	080091d9 	.word	0x080091d9
 800915c:	080091d9 	.word	0x080091d9
 8009160:	080091d9 	.word	0x080091d9
 8009164:	080091d9 	.word	0x080091d9
 8009168:	080091d9 	.word	0x080091d9
 800916c:	080091d9 	.word	0x080091d9
 8009170:	080091d9 	.word	0x080091d9
 8009174:	080091d9 	.word	0x080091d9
 8009178:	080091d9 	.word	0x080091d9
 800917c:	080091d9 	.word	0x080091d9
 8009180:	080091d9 	.word	0x080091d9
 8009184:	080091d9 	.word	0x080091d9
 8009188:	080091d9 	.word	0x080091d9
 800918c:	080091d9 	.word	0x080091d9
 8009190:	080091d9 	.word	0x080091d9
 8009194:	080091d9 	.word	0x080091d9
 8009198:	080091d9 	.word	0x080091d9
 800919c:	080091d9 	.word	0x080091d9
 80091a0:	080091d9 	.word	0x080091d9
 80091a4:	080091d9 	.word	0x080091d9
 80091a8:	080091d9 	.word	0x080091d9
 80091ac:	080091d9 	.word	0x080091d9
 80091b0:	080091d9 	.word	0x080091d9
 80091b4:	080091d9 	.word	0x080091d9
 80091b8:	080091d9 	.word	0x080091d9
 80091bc:	080091d9 	.word	0x080091d9
 80091c0:	080091d9 	.word	0x080091d9
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	080091d9 	.word	0x080091d9
 80091d0:	080091d9 	.word	0x080091d9
 80091d4:	080091d9 	.word	0x080091d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091d8:	bf00      	nop
  }

  return (USBD_OK);
 80091da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091dc:	4618      	mov	r0, r3
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091f2:	6879      	ldr	r1, [r7, #4]
 80091f4:	4805      	ldr	r0, [pc, #20]	; (800920c <CDC_Receive_FS+0x24>)
 80091f6:	f7fe fc07 	bl	8007a08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091fa:	4804      	ldr	r0, [pc, #16]	; (800920c <CDC_Receive_FS+0x24>)
 80091fc:	f7fe fc22 	bl	8007a44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009200:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	200002dc 	.word	0x200002dc

08009210 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	4613      	mov	r3, r2
 800921c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009226:	4618      	mov	r0, r3
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
	...

08009234 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2212      	movs	r2, #18
 8009244:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009246:	4b03      	ldr	r3, [pc, #12]	; (8009254 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	200000cc 	.word	0x200000cc

08009258 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2204      	movs	r2, #4
 8009268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800926a:	4b03      	ldr	r3, [pc, #12]	; (8009278 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	200000e0 	.word	0x200000e0

0800927c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	4907      	ldr	r1, [pc, #28]	; (80092b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009292:	4808      	ldr	r0, [pc, #32]	; (80092b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009294:	f7ff fe1e 	bl	8008ed4 <USBD_GetString>
 8009298:	e004      	b.n	80092a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	4904      	ldr	r1, [pc, #16]	; (80092b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800929e:	4805      	ldr	r0, [pc, #20]	; (80092b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80092a0:	f7ff fe18 	bl	8008ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a4:	4b02      	ldr	r3, [pc, #8]	; (80092b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	200015b8 	.word	0x200015b8
 80092b4:	08009ad8 	.word	0x08009ad8

080092b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	4904      	ldr	r1, [pc, #16]	; (80092d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092c8:	4804      	ldr	r0, [pc, #16]	; (80092dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092ca:	f7ff fe03 	bl	8008ed4 <USBD_GetString>
  return USBD_StrDesc;
 80092ce:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	200015b8 	.word	0x200015b8
 80092dc:	08009af0 	.word	0x08009af0

080092e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	221a      	movs	r2, #26
 80092f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092f2:	f000 f843 	bl	800937c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092f6:	4b02      	ldr	r3, [pc, #8]	; (8009300 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	200000e4 	.word	0x200000e4

08009304 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	4907      	ldr	r1, [pc, #28]	; (8009338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800931a:	4808      	ldr	r0, [pc, #32]	; (800933c <USBD_FS_ConfigStrDescriptor+0x38>)
 800931c:	f7ff fdda 	bl	8008ed4 <USBD_GetString>
 8009320:	e004      	b.n	800932c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	4904      	ldr	r1, [pc, #16]	; (8009338 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009326:	4805      	ldr	r0, [pc, #20]	; (800933c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009328:	f7ff fdd4 	bl	8008ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800932c:	4b02      	ldr	r3, [pc, #8]	; (8009338 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	200015b8 	.word	0x200015b8
 800933c:	08009afc 	.word	0x08009afc

08009340 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d105      	bne.n	800935e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	4907      	ldr	r1, [pc, #28]	; (8009374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009356:	4808      	ldr	r0, [pc, #32]	; (8009378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009358:	f7ff fdbc 	bl	8008ed4 <USBD_GetString>
 800935c:	e004      	b.n	8009368 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	4904      	ldr	r1, [pc, #16]	; (8009374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009362:	4805      	ldr	r0, [pc, #20]	; (8009378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009364:	f7ff fdb6 	bl	8008ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009368:	4b02      	ldr	r3, [pc, #8]	; (8009374 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200015b8 	.word	0x200015b8
 8009378:	08009b08 	.word	0x08009b08

0800937c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009382:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <Get_SerialNum+0x44>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009388:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <Get_SerialNum+0x48>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800938e:	4b0e      	ldr	r3, [pc, #56]	; (80093c8 <Get_SerialNum+0x4c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d009      	beq.n	80093b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093a2:	2208      	movs	r2, #8
 80093a4:	4909      	ldr	r1, [pc, #36]	; (80093cc <Get_SerialNum+0x50>)
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 f814 	bl	80093d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093ac:	2204      	movs	r2, #4
 80093ae:	4908      	ldr	r1, [pc, #32]	; (80093d0 <Get_SerialNum+0x54>)
 80093b0:	68b8      	ldr	r0, [r7, #8]
 80093b2:	f000 f80f 	bl	80093d4 <IntToUnicode>
  }
}
 80093b6:	bf00      	nop
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	1fff7a10 	.word	0x1fff7a10
 80093c4:	1fff7a14 	.word	0x1fff7a14
 80093c8:	1fff7a18 	.word	0x1fff7a18
 80093cc:	200000e6 	.word	0x200000e6
 80093d0:	200000f6 	.word	0x200000f6

080093d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093e6:	2300      	movs	r3, #0
 80093e8:	75fb      	strb	r3, [r7, #23]
 80093ea:	e027      	b.n	800943c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	0f1b      	lsrs	r3, r3, #28
 80093f0:	2b09      	cmp	r3, #9
 80093f2:	d80b      	bhi.n	800940c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	0f1b      	lsrs	r3, r3, #28
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	4619      	mov	r1, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	440b      	add	r3, r1
 8009404:	3230      	adds	r2, #48	; 0x30
 8009406:	b2d2      	uxtb	r2, r2
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	e00a      	b.n	8009422 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	0f1b      	lsrs	r3, r3, #28
 8009410:	b2da      	uxtb	r2, r3
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	4619      	mov	r1, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	440b      	add	r3, r1
 800941c:	3237      	adds	r2, #55	; 0x37
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	011b      	lsls	r3, r3, #4
 8009426:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	3301      	adds	r3, #1
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	2200      	movs	r2, #0
 8009434:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	3301      	adds	r3, #1
 800943a:	75fb      	strb	r3, [r7, #23]
 800943c:	7dfa      	ldrb	r2, [r7, #23]
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	429a      	cmp	r2, r3
 8009442:	d3d3      	bcc.n	80093ec <IntToUnicode+0x18>
  }
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08a      	sub	sp, #40	; 0x28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800945c:	f107 0314 	add.w	r3, r7, #20
 8009460:	2200      	movs	r2, #0
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	605a      	str	r2, [r3, #4]
 8009466:	609a      	str	r2, [r3, #8]
 8009468:	60da      	str	r2, [r3, #12]
 800946a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009474:	d13a      	bne.n	80094ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009476:	2300      	movs	r3, #0
 8009478:	613b      	str	r3, [r7, #16]
 800947a:	4b1e      	ldr	r3, [pc, #120]	; (80094f4 <HAL_PCD_MspInit+0xa0>)
 800947c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947e:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <HAL_PCD_MspInit+0xa0>)
 8009480:	f043 0301 	orr.w	r3, r3, #1
 8009484:	6313      	str	r3, [r2, #48]	; 0x30
 8009486:	4b1b      	ldr	r3, [pc, #108]	; (80094f4 <HAL_PCD_MspInit+0xa0>)
 8009488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009492:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009498:	2302      	movs	r3, #2
 800949a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800949c:	2300      	movs	r3, #0
 800949e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094a0:	2303      	movs	r3, #3
 80094a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094a4:	230a      	movs	r3, #10
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094a8:	f107 0314 	add.w	r3, r7, #20
 80094ac:	4619      	mov	r1, r3
 80094ae:	4812      	ldr	r0, [pc, #72]	; (80094f8 <HAL_PCD_MspInit+0xa4>)
 80094b0:	f7f8 fcd0 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094b4:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <HAL_PCD_MspInit+0xa0>)
 80094b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b8:	4a0e      	ldr	r2, [pc, #56]	; (80094f4 <HAL_PCD_MspInit+0xa0>)
 80094ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094be:	6353      	str	r3, [r2, #52]	; 0x34
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <HAL_PCD_MspInit+0xa0>)
 80094c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c8:	4a0a      	ldr	r2, [pc, #40]	; (80094f4 <HAL_PCD_MspInit+0xa0>)
 80094ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094ce:	6453      	str	r3, [r2, #68]	; 0x44
 80094d0:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <HAL_PCD_MspInit+0xa0>)
 80094d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094dc:	2200      	movs	r2, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	2043      	movs	r0, #67	; 0x43
 80094e2:	f7f8 fc80 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094e6:	2043      	movs	r0, #67	; 0x43
 80094e8:	f7f8 fc99 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094ec:	bf00      	nop
 80094ee:	3728      	adds	r7, #40	; 0x28
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	40023800 	.word	0x40023800
 80094f8:	40020000 	.word	0x40020000

080094fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f7fe fb7f 	bl	8007c16 <USBD_LL_SetupStage>
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009532:	78fa      	ldrb	r2, [r7, #3]
 8009534:	6879      	ldr	r1, [r7, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	4619      	mov	r1, r3
 800954a:	f7fe fbb9 	bl	8007cc0 <USBD_LL_DataOutStage>
}
 800954e:	bf00      	nop
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	440b      	add	r3, r1
 8009576:	334c      	adds	r3, #76	; 0x4c
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	4619      	mov	r1, r3
 800957e:	f7fe fc52 	bl	8007e26 <USBD_LL_DataInStage>
}
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fd86 	bl	80080aa <USBD_LL_SOF>
}
 800959e:	bf00      	nop
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095ae:	2301      	movs	r3, #1
 80095b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d001      	beq.n	80095be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095ba:	f7f7 fd55 	bl	8001068 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095c4:	7bfa      	ldrb	r2, [r7, #15]
 80095c6:	4611      	mov	r1, r2
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fd30 	bl	800802e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fcd8 	bl	8007f8a <USBD_LL_Reset>
}
 80095da:	bf00      	nop
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fd2b 	bl	800804e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d005      	beq.n	8009624 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009618:	4b04      	ldr	r3, [pc, #16]	; (800962c <HAL_PCD_SuspendCallback+0x48>)
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	4a03      	ldr	r2, [pc, #12]	; (800962c <HAL_PCD_SuspendCallback+0x48>)
 800961e:	f043 0306 	orr.w	r3, r3, #6
 8009622:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	e000ed00 	.word	0xe000ed00

08009630 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fd1b 	bl	800807a <USBD_LL_Resume>
}
 8009644:	bf00      	nop
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800965e:	78fa      	ldrb	r2, [r7, #3]
 8009660:	4611      	mov	r1, r2
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fd73 	bl	800814e <USBD_LL_IsoOUTIncomplete>
}
 8009668:	bf00      	nop
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009682:	78fa      	ldrb	r2, [r7, #3]
 8009684:	4611      	mov	r1, r2
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe fd2f 	bl	80080ea <USBD_LL_IsoINIncomplete>
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fd85 	bl	80081b2 <USBD_LL_DevConnected>
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fd82 	bl	80081c8 <USBD_LL_DevDisconnected>
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d13c      	bne.n	8009756 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096dc:	4a20      	ldr	r2, [pc, #128]	; (8009760 <USBD_LL_Init+0x94>)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a1e      	ldr	r2, [pc, #120]	; (8009760 <USBD_LL_Init+0x94>)
 80096e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096ec:	4b1c      	ldr	r3, [pc, #112]	; (8009760 <USBD_LL_Init+0x94>)
 80096ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80096f4:	4b1a      	ldr	r3, [pc, #104]	; (8009760 <USBD_LL_Init+0x94>)
 80096f6:	2204      	movs	r2, #4
 80096f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096fa:	4b19      	ldr	r3, [pc, #100]	; (8009760 <USBD_LL_Init+0x94>)
 80096fc:	2202      	movs	r2, #2
 80096fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009700:	4b17      	ldr	r3, [pc, #92]	; (8009760 <USBD_LL_Init+0x94>)
 8009702:	2200      	movs	r2, #0
 8009704:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009706:	4b16      	ldr	r3, [pc, #88]	; (8009760 <USBD_LL_Init+0x94>)
 8009708:	2202      	movs	r2, #2
 800970a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800970c:	4b14      	ldr	r3, [pc, #80]	; (8009760 <USBD_LL_Init+0x94>)
 800970e:	2200      	movs	r2, #0
 8009710:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009712:	4b13      	ldr	r3, [pc, #76]	; (8009760 <USBD_LL_Init+0x94>)
 8009714:	2200      	movs	r2, #0
 8009716:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009718:	4b11      	ldr	r3, [pc, #68]	; (8009760 <USBD_LL_Init+0x94>)
 800971a:	2200      	movs	r2, #0
 800971c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800971e:	4b10      	ldr	r3, [pc, #64]	; (8009760 <USBD_LL_Init+0x94>)
 8009720:	2200      	movs	r2, #0
 8009722:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <USBD_LL_Init+0x94>)
 8009726:	2200      	movs	r2, #0
 8009728:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800972a:	480d      	ldr	r0, [pc, #52]	; (8009760 <USBD_LL_Init+0x94>)
 800972c:	f7f8 fd7a 	bl	8002224 <HAL_PCD_Init>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009736:	f7f7 fc97 	bl	8001068 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800973a:	2180      	movs	r1, #128	; 0x80
 800973c:	4808      	ldr	r0, [pc, #32]	; (8009760 <USBD_LL_Init+0x94>)
 800973e:	f7f9 ffd2 	bl	80036e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009742:	2240      	movs	r2, #64	; 0x40
 8009744:	2100      	movs	r1, #0
 8009746:	4806      	ldr	r0, [pc, #24]	; (8009760 <USBD_LL_Init+0x94>)
 8009748:	f7f9 ff86 	bl	8003658 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800974c:	2280      	movs	r2, #128	; 0x80
 800974e:	2101      	movs	r1, #1
 8009750:	4803      	ldr	r0, [pc, #12]	; (8009760 <USBD_LL_Init+0x94>)
 8009752:	f7f9 ff81 	bl	8003658 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	200017b8 	.word	0x200017b8

08009764 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800977a:	4618      	mov	r0, r3
 800977c:	f7f8 fe6f 	bl	800245e <HAL_PCD_Start>
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f942 	bl	8009a10 <USBD_Get_USB_Status>
 800978c:	4603      	mov	r3, r0
 800978e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009790:	7bbb      	ldrb	r3, [r7, #14]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	461a      	mov	r2, r3
 80097a8:	4603      	mov	r3, r0
 80097aa:	70fb      	strb	r3, [r7, #3]
 80097ac:	460b      	mov	r3, r1
 80097ae:	70bb      	strb	r3, [r7, #2]
 80097b0:	4613      	mov	r3, r2
 80097b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097c2:	78bb      	ldrb	r3, [r7, #2]
 80097c4:	883a      	ldrh	r2, [r7, #0]
 80097c6:	78f9      	ldrb	r1, [r7, #3]
 80097c8:	f7f9 fb40 	bl	8002e4c <HAL_PCD_EP_Open>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 f91c 	bl	8009a10 <USBD_Get_USB_Status>
 80097d8:	4603      	mov	r3, r0
 80097da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7f9 fb89 	bl	8002f1c <HAL_PCD_EP_Close>
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980e:	7bfb      	ldrb	r3, [r7, #15]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 f8fd 	bl	8009a10 <USBD_Get_USB_Status>
 8009816:	4603      	mov	r3, r0
 8009818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800981a:	7bbb      	ldrb	r3, [r7, #14]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f7f9 fc61 	bl	800310a <HAL_PCD_EP_SetStall>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f8de 	bl	8009a10 <USBD_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009858:	7bbb      	ldrb	r3, [r7, #14]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	460b      	mov	r3, r1
 800986c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f7f9 fca6 	bl	80031d2 <HAL_PCD_EP_ClrStall>
 8009886:	4603      	mov	r3, r0
 8009888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	4618      	mov	r0, r3
 800988e:	f000 f8bf 	bl	8009a10 <USBD_Get_USB_Status>
 8009892:	4603      	mov	r3, r0
 8009894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009896:	7bbb      	ldrb	r3, [r7, #14]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	da0b      	bge.n	80098d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	4613      	mov	r3, r2
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	333e      	adds	r3, #62	; 0x3e
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	e00b      	b.n	80098ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098da:	68f9      	ldr	r1, [r7, #12]
 80098dc:	4613      	mov	r3, r2
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	440b      	add	r3, r1
 80098e6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80098ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f7f9 fa73 	bl	8002e02 <HAL_PCD_SetAddress>
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	4618      	mov	r0, r3
 8009924:	f000 f874 	bl	8009a10 <USBD_Get_USB_Status>
 8009928:	4603      	mov	r3, r0
 800992a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800992c:	7bbb      	ldrb	r3, [r7, #14]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b086      	sub	sp, #24
 800993a:	af00      	add	r7, sp, #0
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
 8009942:	460b      	mov	r3, r1
 8009944:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009954:	7af9      	ldrb	r1, [r7, #11]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	f7f9 fb8c 	bl	8003076 <HAL_PCD_EP_Transmit>
 800995e:	4603      	mov	r3, r0
 8009960:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	4618      	mov	r0, r3
 8009966:	f000 f853 	bl	8009a10 <USBD_Get_USB_Status>
 800996a:	4603      	mov	r3, r0
 800996c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800996e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	607a      	str	r2, [r7, #4]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	460b      	mov	r3, r1
 8009986:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009996:	7af9      	ldrb	r1, [r7, #11]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	f7f9 fb08 	bl	8002fb0 <HAL_PCD_EP_Receive>
 80099a0:	4603      	mov	r3, r0
 80099a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f832 	bl	8009a10 <USBD_Get_USB_Status>
 80099ac:	4603      	mov	r3, r0
 80099ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099cc:	78fa      	ldrb	r2, [r7, #3]
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7f9 fb38 	bl	8003046 <HAL_PCD_EP_GetRxCount>
 80099d6:	4603      	mov	r3, r0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099e8:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <USBD_static_malloc+0x18>)
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	20001cc4 	.word	0x20001cc4

080099fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d817      	bhi.n	8009a54 <USBD_Get_USB_Status+0x44>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <USBD_Get_USB_Status+0x1c>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a3d 	.word	0x08009a3d
 8009a30:	08009a43 	.word	0x08009a43
 8009a34:	08009a49 	.word	0x08009a49
 8009a38:	08009a4f 	.word	0x08009a4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a40:	e00b      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a42:	2303      	movs	r3, #3
 8009a44:	73fb      	strb	r3, [r7, #15]
    break;
 8009a46:	e008      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4c:	e005      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	73fb      	strb	r3, [r7, #15]
    break;
 8009a52:	e002      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	bf00      	nop
  }
  return usb_status;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <__libc_init_array>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	4d0d      	ldr	r5, [pc, #52]	; (8009aa0 <__libc_init_array+0x38>)
 8009a6c:	4c0d      	ldr	r4, [pc, #52]	; (8009aa4 <__libc_init_array+0x3c>)
 8009a6e:	1b64      	subs	r4, r4, r5
 8009a70:	10a4      	asrs	r4, r4, #2
 8009a72:	2600      	movs	r6, #0
 8009a74:	42a6      	cmp	r6, r4
 8009a76:	d109      	bne.n	8009a8c <__libc_init_array+0x24>
 8009a78:	4d0b      	ldr	r5, [pc, #44]	; (8009aa8 <__libc_init_array+0x40>)
 8009a7a:	4c0c      	ldr	r4, [pc, #48]	; (8009aac <__libc_init_array+0x44>)
 8009a7c:	f000 f820 	bl	8009ac0 <_init>
 8009a80:	1b64      	subs	r4, r4, r5
 8009a82:	10a4      	asrs	r4, r4, #2
 8009a84:	2600      	movs	r6, #0
 8009a86:	42a6      	cmp	r6, r4
 8009a88:	d105      	bne.n	8009a96 <__libc_init_array+0x2e>
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a90:	4798      	blx	r3
 8009a92:	3601      	adds	r6, #1
 8009a94:	e7ee      	b.n	8009a74 <__libc_init_array+0xc>
 8009a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a9a:	4798      	blx	r3
 8009a9c:	3601      	adds	r6, #1
 8009a9e:	e7f2      	b.n	8009a86 <__libc_init_array+0x1e>
 8009aa0:	08009b30 	.word	0x08009b30
 8009aa4:	08009b30 	.word	0x08009b30
 8009aa8:	08009b30 	.word	0x08009b30
 8009aac:	08009b34 	.word	0x08009b34

08009ab0 <memset>:
 8009ab0:	4402      	add	r2, r0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d100      	bne.n	8009aba <memset+0xa>
 8009ab8:	4770      	bx	lr
 8009aba:	f803 1b01 	strb.w	r1, [r3], #1
 8009abe:	e7f9      	b.n	8009ab4 <memset+0x4>

08009ac0 <_init>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	bf00      	nop
 8009ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	469e      	mov	lr, r3
 8009aca:	4770      	bx	lr

08009acc <_fini>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr
