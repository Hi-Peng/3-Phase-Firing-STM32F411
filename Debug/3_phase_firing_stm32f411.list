
3_phase_firing_stm32f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800794c  0800794c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007954  08007954  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007954  08007954  00017954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800795c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000010  0800796c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0800796c  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d63  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273c  00000000  00000000  00031da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000344e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  000354b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f30  00000000  00000000  00036378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119ee  00000000  00000000  0004f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad73  00000000  00000000  00060c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fba09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d8  00000000  00000000  000fba5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007924 	.word	0x08007924

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08007924 	.word	0x08007924

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f001 f8fa 	bl	80016d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 f84a 	bl	800057c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 fb56 	bl	8000b98 <MX_GPIO_Init>
	MX_TIM2_Init();
 80004ec:	f000 f8ae 	bl	800064c <MX_TIM2_Init>
	MX_TIM3_Init();
 80004f0:	f000 f966 	bl	80007c0 <MX_TIM3_Init>
	MX_TIM4_Init();
 80004f4:	f000 fa1e 	bl	8000934 <MX_TIM4_Init>
	MX_TIM5_Init();
 80004f8:	f000 fad6 	bl	8000aa8 <MX_TIM5_Init>
	// MX_USB_DEVICE_Init();
	// MX_ADC1_Init();
	MX_TIM10_Init();
 80004fc:	f000 fb28 	bl	8000b50 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	__HAL_TIM_CLEAR_IT(&htim2 ,TIM_IT_UPDATE);
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <main+0x8c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f06f 0201 	mvn.w	r2, #1
 8000508:	611a      	str	r2, [r3, #16]
	// Initializing Timer Base
	HAL_TIM_Base_Start_IT(&htim2);
 800050a:	4817      	ldr	r0, [pc, #92]	; (8000568 <main+0x8c>)
 800050c:	f003 f99e 	bl	800384c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000510:	4816      	ldr	r0, [pc, #88]	; (800056c <main+0x90>)
 8000512:	f003 f99b 	bl	800384c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000516:	4816      	ldr	r0, [pc, #88]	; (8000570 <main+0x94>)
 8000518:	f003 f998 	bl	800384c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <main+0x98>)
 800051e:	f003 f93b 	bl	8003798 <HAL_TIM_Base_Start>

	// Initializing One Pulse mode for unidirectional mode
	HAL_TIM_OnePulse_Start_IT(&htim2, TIM_CHANNEL_2);
 8000522:	2104      	movs	r1, #4
 8000524:	4810      	ldr	r0, [pc, #64]	; (8000568 <main+0x8c>)
 8000526:	f003 fc2d 	bl	8003d84 <HAL_TIM_OnePulse_Start_IT>
	HAL_TIM_OnePulse_Start_IT(&htim3, TIM_CHANNEL_2);
 800052a:	2104      	movs	r1, #4
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0x90>)
 800052e:	f003 fc29 	bl	8003d84 <HAL_TIM_OnePulse_Start_IT>
	HAL_TIM_OnePulse_Start_IT(&htim4, TIM_CHANNEL_2);
 8000532:	2104      	movs	r1, #4
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <main+0x94>)
 8000536:	f003 fc25 	bl	8003d84 <HAL_TIM_OnePulse_Start_IT>

	// Intializing Output Compare mode for bidirectional mode
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 800053a:	2108      	movs	r1, #8
 800053c:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0x8c>)
 800053e:	f003 fa6f 	bl	8003a20 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000542:	2108      	movs	r1, #8
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <main+0x90>)
 8000546:	f003 fa6b 	bl	8003a20 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 800054a:	2108      	movs	r1, #8
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <main+0x94>)
 800054e:	f003 fa67 	bl	8003a20 <HAL_TIM_OC_Start_IT>

	// Initializing Encoder
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000552:	213c      	movs	r1, #60	; 0x3c
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <main+0x98>)
 8000556:	f003 fd21 	bl	8003f9c <HAL_TIM_Encoder_Start_IT>

	// Init sudut_alpha to remove unwanted timer compare error
	// Basede on trial and error, we found out that 2 uS is enough
	set_alpha(sudut_alpha);
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0x9c>)
 800055c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fcb5 	bl	8000ed0 <set_alpha>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000566:	e7fe      	b.n	8000566 <main+0x8a>
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000074 	.word	0x20000074
 8000570:	200000bc 	.word	0x200000bc
 8000574:	20000104 	.word	0x20000104
 8000578:	20000000 	.word	0x20000000

0800057c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 f9c2 	bl	8007914 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <SystemClock_Config+0xc8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xcc>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80005ec:	230f      	movs	r3, #15
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80005f0:	2390      	movs	r3, #144	; 0x90
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80005f8:	2305      	movs	r3, #5
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fc49 	bl	8002e98 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800060c:	f000 fdcc 	bl	80011a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f002 feab 	bl	8003388 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000638:	f000 fdb6 	bl	80011a8 <Error_Handler>
	}
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b098      	sub	sp, #96	; 0x60
 8000650:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 8000652:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000656:	2224      	movs	r2, #36	; 0x24
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f007 f95a 	bl	8007914 <memset>
	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
 800068a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800068c:	4b4b      	ldr	r3, [pc, #300]	; (80007bc <MX_TIM2_Init+0x170>)
 800068e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000692:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 60-1;
 8000694:	4b49      	ldr	r3, [pc, #292]	; (80007bc <MX_TIM2_Init+0x170>)
 8000696:	223b      	movs	r2, #59	; 0x3b
 8000698:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b48      	ldr	r3, [pc, #288]	; (80007bc <MX_TIM2_Init+0x170>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20000-1;
 80006a0:	4b46      	ldr	r3, [pc, #280]	; (80007bc <MX_TIM2_Init+0x170>)
 80006a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006a6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b44      	ldr	r3, [pc, #272]	; (80007bc <MX_TIM2_Init+0x170>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ae:	4b43      	ldr	r3, [pc, #268]	; (80007bc <MX_TIM2_Init+0x170>)
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b4:	4841      	ldr	r0, [pc, #260]	; (80007bc <MX_TIM2_Init+0x170>)
 80006b6:	f003 f81f 	bl	80036f8 <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 80006c0:	f000 fd72 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c4:	483d      	ldr	r0, [pc, #244]	; (80007bc <MX_TIM2_Init+0x170>)
 80006c6:	f003 faa9 	bl	8003c1c <HAL_TIM_PWM_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 80006d0:	f000 fd6a 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80006d4:	4839      	ldr	r0, [pc, #228]	; (80007bc <MX_TIM2_Init+0x170>)
 80006d6:	f003 f94a 	bl	800396e <HAL_TIM_OC_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 80006e0:	f000 fd62 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80006e4:	2108      	movs	r1, #8
 80006e6:	4835      	ldr	r0, [pc, #212]	; (80007bc <MX_TIM2_Init+0x170>)
 80006e8:	f003 faf1 	bl	8003cce <HAL_TIM_OnePulse_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM2_Init+0xaa>
	{
		Error_Handler();
 80006f2:	f000 fd59 	bl	80011a8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80006f6:	2306      	movs	r3, #6
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80006fa:	2350      	movs	r3, #80	; 0x50
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_BOTHEDGE;
 80006fe:	230a      	movs	r3, #10
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 12;
 8000702:	230c      	movs	r3, #12
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	4619      	mov	r1, r3
 800070c:	482b      	ldr	r0, [pc, #172]	; (80007bc <MX_TIM2_Init+0x170>)
 800070e:	f003 ffec 	bl	80046ea <HAL_TIM_SlaveConfigSynchro>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0xd0>
	{
		Error_Handler();
 8000718:	f000 fd46 	bl	80011a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4619      	mov	r1, r3
 800072a:	4824      	ldr	r0, [pc, #144]	; (80007bc <MX_TIM2_Init+0x170>)
 800072c:	f004 fc1c 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0xee>
	{
		Error_Handler();
 8000736:	f000 fd37 	bl	80011a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073a:	2360      	movs	r3, #96	; 0x60
 800073c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2204      	movs	r2, #4
 800074e:	4619      	mov	r1, r3
 8000750:	481a      	ldr	r0, [pc, #104]	; (80007bc <MX_TIM2_Init+0x170>)
 8000752:	f003 fe35 	bl	80043c0 <HAL_TIM_PWM_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x114>
	{
		Error_Handler();
 800075c:	f000 fd24 	bl	80011a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000760:	2330      	movs	r3, #48	; 0x30
 8000762:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2208      	movs	r2, #8
 8000768:	4619      	mov	r1, r3
 800076a:	4814      	ldr	r0, [pc, #80]	; (80007bc <MX_TIM2_Init+0x170>)
 800076c:	f003 fdcc 	bl	8004308 <HAL_TIM_OC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x12e>
	{
		Error_Handler();
 8000776:	f000 fd17 	bl	80011a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 800077a:	2370      	movs	r3, #112	; 0x70
 800077c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000784:	2300      	movs	r3, #0
 8000786:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000788:	2301      	movs	r3, #1
 800078a:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_FALLING;
 800078c:	2302      	movs	r3, #2
 800078e:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim2, &sConfigOP, TIM_CHANNEL_2,
 8000794:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000798:	2300      	movs	r3, #0
 800079a:	2204      	movs	r2, #4
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <MX_TIM2_Init+0x170>)
 800079e:	f003 fed1 	bl	8004544 <HAL_TIM_OnePulse_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x160>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 80007a8:	f000 fcfe 	bl	80011a8 <Error_Handler>
	}
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <MX_TIM2_Init+0x170>)
 80007ae:	f000 fe5f 	bl	8001470 <HAL_TIM_MspPostInit>

}
 80007b2:	bf00      	nop
 80007b4:	3760      	adds	r7, #96	; 0x60
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000002c 	.word	0x2000002c

080007c0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b098      	sub	sp, #96	; 0x60
 80007c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 80007c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007ca:	2224      	movs	r2, #36	; 0x24
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f007 f8a0 	bl	8007914 <memset>
	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000800:	4b4a      	ldr	r3, [pc, #296]	; (800092c <MX_TIM3_Init+0x16c>)
 8000802:	4a4b      	ldr	r2, [pc, #300]	; (8000930 <MX_TIM3_Init+0x170>)
 8000804:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 60-1;
 8000806:	4b49      	ldr	r3, [pc, #292]	; (800092c <MX_TIM3_Init+0x16c>)
 8000808:	223b      	movs	r2, #59	; 0x3b
 800080a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b47      	ldr	r3, [pc, #284]	; (800092c <MX_TIM3_Init+0x16c>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 20000-1;
 8000812:	4b46      	ldr	r3, [pc, #280]	; (800092c <MX_TIM3_Init+0x16c>)
 8000814:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000818:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b44      	ldr	r3, [pc, #272]	; (800092c <MX_TIM3_Init+0x16c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000820:	4b42      	ldr	r3, [pc, #264]	; (800092c <MX_TIM3_Init+0x16c>)
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000826:	4841      	ldr	r0, [pc, #260]	; (800092c <MX_TIM3_Init+0x16c>)
 8000828:	f002 ff66 	bl	80036f8 <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8000832:	f000 fcb9 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000836:	483d      	ldr	r0, [pc, #244]	; (800092c <MX_TIM3_Init+0x16c>)
 8000838:	f003 f9f0 	bl	8003c1c <HAL_TIM_PWM_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x86>
	{
		Error_Handler();
 8000842:	f000 fcb1 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000846:	4839      	ldr	r0, [pc, #228]	; (800092c <MX_TIM3_Init+0x16c>)
 8000848:	f003 f891 	bl	800396e <HAL_TIM_OC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 8000852:	f000 fca9 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000856:	2108      	movs	r1, #8
 8000858:	4834      	ldr	r0, [pc, #208]	; (800092c <MX_TIM3_Init+0x16c>)
 800085a:	f003 fa38 	bl	8003cce <HAL_TIM_OnePulse_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM3_Init+0xa8>
	{
		Error_Handler();
 8000864:	f000 fca0 	bl	80011a8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000868:	2306      	movs	r3, #6
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800086c:	2350      	movs	r3, #80	; 0x50
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_BOTHEDGE;
 8000870:	230a      	movs	r3, #10
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087c:	4619      	mov	r1, r3
 800087e:	482b      	ldr	r0, [pc, #172]	; (800092c <MX_TIM3_Init+0x16c>)
 8000880:	f003 ff33 	bl	80046ea <HAL_TIM_SlaveConfigSynchro>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0xce>
	{
		Error_Handler();
 800088a:	f000 fc8d 	bl	80011a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	4619      	mov	r1, r3
 800089c:	4823      	ldr	r0, [pc, #140]	; (800092c <MX_TIM3_Init+0x16c>)
 800089e:	f004 fb63 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0xec>
	{
		Error_Handler();
 80008a8:	f000 fc7e 	bl	80011a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2204      	movs	r2, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	481a      	ldr	r0, [pc, #104]	; (800092c <MX_TIM3_Init+0x16c>)
 80008c4:	f003 fd7c 	bl	80043c0 <HAL_TIM_PWM_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM3_Init+0x112>
	{
		Error_Handler();
 80008ce:	f000 fc6b 	bl	80011a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80008d2:	2330      	movs	r3, #48	; 0x30
 80008d4:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2208      	movs	r2, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <MX_TIM3_Init+0x16c>)
 80008de:	f003 fd13 	bl	8004308 <HAL_TIM_OC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM3_Init+0x12c>
	{
		Error_Handler();
 80008e8:	f000 fc5e 	bl	80011a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 80008ec:	2370      	movs	r3, #112	; 0x70
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008fa:	2301      	movs	r3, #1
 80008fc:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_FALLING;
 80008fe:	2302      	movs	r3, #2
 8000900:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim3, &sConfigOP, TIM_CHANNEL_2,
 8000906:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800090a:	2300      	movs	r3, #0
 800090c:	2204      	movs	r2, #4
 800090e:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_TIM3_Init+0x16c>)
 8000910:	f003 fe18 	bl	8004544 <HAL_TIM_OnePulse_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x15e>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 800091a:	f000 fc45 	bl	80011a8 <Error_Handler>
	}
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <MX_TIM3_Init+0x16c>)
 8000920:	f000 fda6 	bl	8001470 <HAL_TIM_MspPostInit>

}
 8000924:	bf00      	nop
 8000926:	3760      	adds	r7, #96	; 0x60
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000074 	.word	0x20000074
 8000930:	40000400 	.word	0x40000400

08000934 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b098      	sub	sp, #96	; 0x60
 8000938:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 800093a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800093e:	2224      	movs	r2, #36	; 0x24
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f006 ffe6 	bl	8007914 <memset>
	/* USER CODE END TIM4_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000976:	4a4b      	ldr	r2, [pc, #300]	; (8000aa4 <MX_TIM4_Init+0x170>)
 8000978:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 60-1;
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 800097c:	223b      	movs	r2, #59	; 0x3b
 800097e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 20000-1;
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000988:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800098c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000994:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800099a:	4841      	ldr	r0, [pc, #260]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 800099c:	f002 feac 	bl	80036f8 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM4_Init+0x76>
	{
		Error_Handler();
 80009a6:	f000 fbff 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009aa:	483d      	ldr	r0, [pc, #244]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 80009ac:	f003 f936 	bl	8003c1c <HAL_TIM_PWM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM4_Init+0x86>
	{
		Error_Handler();
 80009b6:	f000 fbf7 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80009ba:	4839      	ldr	r0, [pc, #228]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 80009bc:	f002 ffd7 	bl	800396e <HAL_TIM_OC_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 80009c6:	f000 fbef 	bl	80011a8 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 80009ca:	2108      	movs	r1, #8
 80009cc:	4834      	ldr	r0, [pc, #208]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 80009ce:	f003 f97e 	bl	8003cce <HAL_TIM_OnePulse_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM4_Init+0xa8>
	{
		Error_Handler();
 80009d8:	f000 fbe6 	bl	80011a8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009dc:	2306      	movs	r3, #6
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80009e0:	2350      	movs	r3, #80	; 0x50
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_BOTHEDGE;
 80009e4:	230a      	movs	r3, #10
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80009ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f0:	4619      	mov	r1, r3
 80009f2:	482b      	ldr	r0, [pc, #172]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 80009f4:	f003 fe79 	bl	80046ea <HAL_TIM_SlaveConfigSynchro>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0xce>
	{
		Error_Handler();
 80009fe:	f000 fbd3 	bl	80011a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4823      	ldr	r0, [pc, #140]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000a12:	f004 faa9 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM4_Init+0xec>
	{
		Error_Handler();
 8000a1c:	f000 fbc4 	bl	80011a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	2360      	movs	r3, #96	; 0x60
 8000a22:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2204      	movs	r2, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000a38:	f003 fcc2 	bl	80043c0 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM4_Init+0x112>
	{
		Error_Handler();
 8000a42:	f000 fbb1 	bl	80011a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a46:	2330      	movs	r3, #48	; 0x30
 8000a48:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000a52:	f003 fc59 	bl	8004308 <HAL_TIM_OC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM4_Init+0x12c>
	{
		Error_Handler();
 8000a5c:	f000 fba4 	bl	80011a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 8000a60:	2370      	movs	r3, #112	; 0x70
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 8000a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a68:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_FALLING;
 8000a72:	2302      	movs	r3, #2
 8000a74:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim4, &sConfigOP, TIM_CHANNEL_2,
 8000a7a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2204      	movs	r2, #4
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000a84:	f003 fd5e 	bl	8004544 <HAL_TIM_OnePulse_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM4_Init+0x15e>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 8000a8e:	f000 fb8b 	bl	80011a8 <Error_Handler>
	}
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM4_Init+0x16c>)
 8000a94:	f000 fcec 	bl	8001470 <HAL_TIM_MspPostInit>

}
 8000a98:	bf00      	nop
 8000a9a:	3760      	adds	r7, #96	; 0x60
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000bc 	.word	0x200000bc
 8000aa4:	40000800 	.word	0x40000800

08000aa8 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2224      	movs	r2, #36	; 0x24
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f006 ff2c 	bl	8007914 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <MX_TIM5_Init+0xa0>)
 8000ac6:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <MX_TIM5_Init+0xa4>)
 8000ac8:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_TIM5_Init+0xa0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_TIM5_Init+0xa0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_TIM5_Init+0xa0>)
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM5_Init+0xa0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_TIM5_Init+0xa0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aea:	2303      	movs	r3, #3
 8000aec:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b02:	2301      	movs	r3, #1
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_TIM5_Init+0xa0>)
 8000b16:	f003 f99b 	bl	8003e50 <HAL_TIM_Encoder_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM5_Init+0x7c>
	{
		Error_Handler();
 8000b20:	f000 fb42 	bl	80011a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_TIM5_Init+0xa0>)
 8000b32:	f004 fa19 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM5_Init+0x98>
	{
		Error_Handler();
 8000b3c:	f000 fb34 	bl	80011a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000104 	.word	0x20000104
 8000b4c:	40000c00 	.word	0x40000c00

08000b50 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_TIM10_Init+0x40>)
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <MX_TIM10_Init+0x44>)
 8000b58:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 60000;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_TIM10_Init+0x40>)
 8000b5c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000b60:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_TIM10_Init+0x40>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 100;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_TIM10_Init+0x40>)
 8000b6a:	2264      	movs	r2, #100	; 0x64
 8000b6c:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_TIM10_Init+0x40>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_TIM10_Init+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_TIM10_Init+0x40>)
 8000b7c:	f002 fdbc 	bl	80036f8 <HAL_TIM_Base_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM10_Init+0x3a>
	{
		Error_Handler();
 8000b86:	f000 fb0f 	bl	80011a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000014c 	.word	0x2000014c
 8000b94:	40014400 	.word	0x40014400

08000b98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <MX_GPIO_Init+0xe8>)
 8000c26:	f001 f877 	bl	8001d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480f      	ldr	r0, [pc, #60]	; (8000c80 <MX_GPIO_Init+0xe8>)
 8000c44:	f000 fecc 	bl	80019e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : FIRING_MODE_Pin DEVICE_SEL_Pin */
	GPIO_InitStruct.Pin = FIRING_MODE_Pin|DEVICE_SEL_Pin;
 8000c48:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c4e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4809      	ldr	r0, [pc, #36]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000c60:	f000 febe 	bl	80019e0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2028      	movs	r0, #40	; 0x28
 8000c6a:	f000 fe82 	bl	8001972 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6e:	2028      	movs	r0, #40	; 0x28
 8000c70:	f000 fe9b 	bl	80019aa <HAL_NVIC_EnableIRQ>

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	; 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020400 	.word	0x40020400

08000c88 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

// TRIAC Mode Init
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	// Zero cross detector Handler
	if (htim->Instance == TIM2) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	d13e      	bne.n	8000d18 <HAL_TIM_OC_DelayElapsedCallback+0x90>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7f1b      	ldrb	r3, [r3, #28]
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d13a      	bne.n	8000d18 <HAL_TIM_OC_DelayElapsedCallback+0x90>
			if (button_device_select_state != 1){
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d036      	beq.n	8000d18 <HAL_TIM_OC_DelayElapsedCallback+0x90>
				TIM2->CCMR2 = (TIM2->CCMR2 & ~TIM_CCMR2_OC3M) | (5<< TIM_CCMR2_OC3M_Pos);
 8000caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000cbc:	61d3      	str	r3, [r2, #28]
				if (first_wave_flag_1 != 0) {
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d013      	beq.n	8000cee <HAL_TIM_OC_DelayElapsedCallback+0x66>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, sudut_alpha);
 8000cc6:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000cc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ccc:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM2->CCMR2 = (TIM2->CCMR2 & ~TIM_CCMR2_OC3M) | (4 << TIM_CCMR2_OC3M_Pos);
 8000cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	61d3      	str	r3, [r2, #28]
					first_wave_flag_1 = 0;
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e014      	b.n	8000d18 <HAL_TIM_OC_DelayElapsedCallback+0x90>
				} else {
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	63da      	str	r2, [r3, #60]	; 0x3c
							(sudut_alpha+SCR_PULSE_WIDTH));
					TIM2->CCMR2 = (TIM2->CCMR2 & ~TIM_CCMR2_OC3M) | (5 << TIM_CCMR2_OC3M_Pos);
 8000cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000d10:	61d3      	str	r3, [r2, #28]
					first_wave_flag_1 = 1;
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Phase B
	if (htim->Instance == TIM3) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a2b      	ldr	r2, [pc, #172]	; (8000dcc <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d120      	bne.n	8000d64 <HAL_TIM_OC_DelayElapsedCallback+0xdc>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7f1b      	ldrb	r3, [r3, #28]
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d11c      	bne.n	8000d64 <HAL_TIM_OC_DelayElapsedCallback+0xdc>
			if (button_device_select_state != 1){
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d018      	beq.n	8000d64 <HAL_TIM_OC_DelayElapsedCallback+0xdc>
				if (first_wave_flag_2 != 0) {
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d009      	beq.n	8000d4e <HAL_TIM_OC_DelayElapsedCallback+0xc6>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sudut_alpha);
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000d3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	63da      	str	r2, [r3, #60]	; 0x3c
					first_wave_flag_2 = 0;
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e00a      	b.n	8000d64 <HAL_TIM_OC_DelayElapsedCallback+0xdc>
				} else {
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d54:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c
							(sudut_alpha+SCR_PULSE_WIDTH));
					first_wave_flag_2 = 1;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Phase C
	if (htim->Instance == TIM4) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d120      	bne.n	8000db0 <HAL_TIM_OC_DelayElapsedCallback+0x128>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7f1b      	ldrb	r3, [r3, #28]
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d11c      	bne.n	8000db0 <HAL_TIM_OC_DelayElapsedCallback+0x128>
			if (button_device_select_state != 1){
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d018      	beq.n	8000db0 <HAL_TIM_OC_DelayElapsedCallback+0x128>
				if (first_wave_flag_3 != 0) {
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d009      	beq.n	8000d9a <HAL_TIM_OC_DelayElapsedCallback+0x112>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, sudut_alpha);
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000d88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	63da      	str	r2, [r3, #60]	; 0x3c

					first_wave_flag_3 = 0;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
					first_wave_flag_3 = 1;
				}
			}
		}
	}
}
 8000d98:	e00a      	b.n	8000db0 <HAL_TIM_OC_DelayElapsedCallback+0x128>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da0:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	63da      	str	r2, [r3, #60]	; 0x3c
					first_wave_flag_3 = 1;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	20000199 	.word	0x20000199
 8000dc0:	20000196 	.word	0x20000196
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	2000002c 	.word	0x2000002c
 8000dcc:	40000400 	.word	0x40000400
 8000dd0:	20000197 	.word	0x20000197
 8000dd4:	20000074 	.word	0x20000074
 8000dd8:	40000800 	.word	0x40000800
 8000ddc:	20000198 	.word	0x20000198
 8000de0:	200000bc 	.word	0x200000bc

08000de4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d15d      	bne.n	8000eb2 <HAL_TIM_IC_CaptureCallback+0xce>
		uint16_t current_cnt;
		current_cnt = __HAL_TIM_GET_COUNTER(&htim5);
 8000df6:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	81fb      	strh	r3, [r7, #14]
		uint16_t diff = (uint16_t)(current_cnt - counter_last_val);
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	89fa      	ldrh	r2, [r7, #14]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	81bb      	strh	r3, [r7, #12]

		if (diff == 0u)
 8000e0c:	89bb      	ldrh	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d02c      	beq.n	8000e6c <HAL_TIM_IC_CaptureCallback+0x88>
		{
			// No change
			// sudut_alpha = diff;
		}
		else if (diff & 0x8000u)
 8000e12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da14      	bge.n	8000e44 <HAL_TIM_IC_CaptureCallback+0x60>
		{
			// Counter has decreased, diff is negative
			sudut_alpha += (diff * 100);
 8000e1a:	89bb      	ldrh	r3, [r7, #12]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	461a      	mov	r2, r3
 8000e24:	0091      	lsls	r1, r2, #2
 8000e26:	461a      	mov	r2, r3
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	e013      	b.n	8000e6c <HAL_TIM_IC_CaptureCallback+0x88>

		}
		else
		{
			// Counter has increased, diff is positive
			sudut_alpha += (diff * 100);
 8000e44:	89bb      	ldrh	r3, [r7, #12]
 8000e46:	461a      	mov	r2, r3
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	0091      	lsls	r1, r2, #2
 8000e50:	461a      	mov	r2, r3
 8000e52:	460b      	mov	r3, r1
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	4413      	add	r3, r2
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e6a:	801a      	strh	r2, [r3, #0]
		}

		counter_last_val = current_cnt;
 8000e6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e72:	801a      	strh	r2, [r3, #0]

		if (sudut_alpha <= 5){
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	dc03      	bgt.n	8000e86 <HAL_TIM_IC_CaptureCallback+0xa2>
			sudut_alpha = 2;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	801a      	strh	r2, [r3, #0]
 8000e84:	e00a      	b.n	8000e9c <HAL_TIM_IC_CaptureCallback+0xb8>
		}
		else if(sudut_alpha >= 10000){
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dd03      	ble.n	8000e9c <HAL_TIM_IC_CaptureCallback+0xb8>
			sudut_alpha = 10000;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e96:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e9a:	801a      	strh	r2, [r3, #0]
		}

		set_alpha(sudut_alpha);
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f814 	bl	8000ed0 <set_alpha>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000eae:	f000 ff4c 	bl	8001d4a <HAL_GPIO_TogglePin>
		//				else if(__HAL_TIM_GET_COUNTER(&htim5) >= 85 && __HAL_TIM_GET_COUNTER(&htim5) <= 100){
		//					sudut_alpha = 8500;
		//					__HAL_TIM_SET_COUNTER(&htim5, 85);
		//				}
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40000c00 	.word	0x40000c00
 8000ec0:	20000104 	.word	0x20000104
 8000ec4:	20000194 	.word	0x20000194
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <set_alpha>:

void set_alpha(int alpha) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if (button_device_select_state == 0){
 8000ed8:	4b48      	ldr	r3, [pc, #288]	; (8000ffc <set_alpha+0x12c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d14b      	bne.n	8000f78 <set_alpha+0xa8>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (alpha + PI_ANGLE_TIM));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000ee6:	3310      	adds	r3, #16
 8000ee8:	4a45      	ldr	r2, [pc, #276]	; (8001000 <set_alpha+0x130>)
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (alpha));
 8000eee:	4b44      	ldr	r3, [pc, #272]	; (8001000 <set_alpha+0x130>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim2, (alpha + 10000 + SCR_PULSE_WIDTH));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000efc:	3338      	adds	r3, #56	; 0x38
 8000efe:	4a40      	ldr	r2, [pc, #256]	; (8001000 <set_alpha+0x130>)
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f0a:	3338      	adds	r3, #56	; 0x38
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	; (8001000 <set_alpha+0x130>)
 8000f10:	60da      	str	r2, [r3, #12]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (alpha + PI_ANGLE_TIM));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f18:	3310      	adds	r3, #16
 8000f1a:	4a3a      	ldr	r2, [pc, #232]	; (8001004 <set_alpha+0x134>)
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (alpha));
 8000f20:	4b38      	ldr	r3, [pc, #224]	; (8001004 <set_alpha+0x134>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim3, (alpha+10000+SCR_PULSE_WIDTH));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f2e:	3338      	adds	r3, #56	; 0x38
 8000f30:	4a34      	ldr	r2, [pc, #208]	; (8001004 <set_alpha+0x134>)
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f3c:	3338      	adds	r3, #56	; 0x38
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <set_alpha+0x134>)
 8000f42:	60da      	str	r2, [r3, #12]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (alpha + PI_ANGLE_TIM));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	4a2e      	ldr	r2, [pc, #184]	; (8001008 <set_alpha+0x138>)
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (alpha));
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <set_alpha+0x138>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim4, (alpha + 10000 + SCR_PULSE_WIDTH));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f60:	3338      	adds	r3, #56	; 0x38
 8000f62:	4a29      	ldr	r2, [pc, #164]	; (8001008 <set_alpha+0x138>)
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f6e:	3338      	adds	r3, #56	; 0x38
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <set_alpha+0x138>)
 8000f74:	60da      	str	r2, [r3, #12]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (alpha));
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (100));
		__HAL_TIM_SET_AUTORELOAD(&htim4, (alpha + SCR_PULSE_WIDTH));
	}
}
 8000f76:	e03b      	b.n	8000ff0 <set_alpha+0x120>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (alpha));
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <set_alpha+0x130>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (100));
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <set_alpha+0x130>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2264      	movs	r2, #100	; 0x64
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim2, (alpha + SCR_PULSE_WIDTH));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <set_alpha+0x130>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <set_alpha+0x130>)
 8000f9e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (alpha));
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <set_alpha+0x134>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (100));
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <set_alpha+0x134>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2264      	movs	r2, #100	; 0x64
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim3, (alpha + SCR_PULSE_WIDTH));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <set_alpha+0x134>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <set_alpha+0x134>)
 8000fc6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (alpha));
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <set_alpha+0x138>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (100));
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <set_alpha+0x138>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2264      	movs	r2, #100	; 0x64
 8000fd6:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim4, (alpha + SCR_PULSE_WIDTH));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <set_alpha+0x138>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <set_alpha+0x138>)
 8000fee:	60da      	str	r2, [r3, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	20000199 	.word	0x20000199
 8001000:	2000002c 	.word	0x2000002c
 8001004:	20000074 	.word	0x20000074
 8001008:	200000bc 	.word	0x200000bc

0800100c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DEVICE_SEL_Pin && button_device_select_state == 1) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800101c:	d13a      	bne.n	8001094 <HAL_GPIO_EXTI_Callback+0x88>
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d136      	bne.n	8001094 <HAL_GPIO_EXTI_Callback+0x88>
	{
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xac>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 020a 	bic.w	r2, r2, #10
 8001034:	621a      	str	r2, [r3, #32]
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0202 	orr.w	r2, r2, #2
 8001044:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_GPIO_EXTI_Callback+0xb0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6a1a      	ldr	r2, [r3, #32]
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_GPIO_EXTI_Callback+0xb0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 020a 	bic.w	r2, r2, #10
 8001054:	621a      	str	r2, [r3, #32]
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_GPIO_EXTI_Callback+0xb0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_GPIO_EXTI_Callback+0xb0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 0202 	orr.w	r2, r2, #2
 8001064:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6a1a      	ldr	r2, [r3, #32]
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 020a 	bic.w	r2, r2, #10
 8001074:	621a      	str	r2, [r3, #32]
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0202 	orr.w	r2, r2, #2
 8001084:	621a      	str	r2, [r3, #32]
		HAL_TIM_Base_Start_IT(&htim10);
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001088:	f002 fbe0 	bl	800384c <HAL_TIM_Base_Start_IT>
		button_device_select_state = 0;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == DEVICE_SEL_Pin && button_device_select_state == 0) {
		button_device_select_state = 1;
	}
}
 8001092:	e00a      	b.n	80010aa <HAL_GPIO_EXTI_Callback+0x9e>
	else if (GPIO_Pin == DEVICE_SEL_Pin && button_device_select_state == 0) {
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800109a:	d106      	bne.n	80010aa <HAL_GPIO_EXTI_Callback+0x9e>
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <HAL_GPIO_EXTI_Callback+0x9e>
		button_device_select_state = 1;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xa8>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000199 	.word	0x20000199
 80010b8:	2000002c 	.word	0x2000002c
 80010bc:	20000074 	.word	0x20000074
 80010c0:	200000bc 	.word	0x200000bc
 80010c4:	2000014c 	.word	0x2000014c

080010c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	 */
	if(htim->Instance == TIM10){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d13d      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x8e>
		if(HAL_GPIO_ReadPin(DEVICE_SEL_GPIO_Port, DEVICE_SEL_Pin) == GPIO_PIN_RESET){
 80010da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010de:	482b      	ldr	r0, [pc, #172]	; (800118c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010e0:	f000 fe02 	bl	8001ce8 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d135      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x8e>
			button_device_select_state = 1;
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 80010f0:	4828      	ldr	r0, [pc, #160]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010f2:	f002 fc0d 	bl	8003910 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_BOTHEDGE);
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 020a 	bic.w	r2, r2, #10
 8001104:	621a      	str	r2, [r3, #32]
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a1a      	ldr	r2, [r3, #32]
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 020a 	orr.w	r2, r2, #10
 8001114:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_BOTHEDGE);
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 020a 	bic.w	r2, r2, #10
 8001124:	621a      	str	r2, [r3, #32]
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 020a 	orr.w	r2, r2, #10
 8001134:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_BOTHEDGE);
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6a1a      	ldr	r2, [r3, #32]
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 020a 	bic.w	r2, r2, #10
 8001144:	621a      	str	r2, [r3, #32]
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 020a 	orr.w	r2, r2, #10
 8001154:	621a      	str	r2, [r3, #32]
	/*
	 * Reconfigure channel 3 OC when the timers end (CNT>ARR).
	 * Set the CCRx to the previous sudut_alpha and also set the OC mode as active on match
	 * This must set the CCMR2 register 4-6 bits to 001b or 4U
	 */
	if (htim->Instance == TIM2) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800115e:	d10f      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0xb8>
		TIM2->CCMR2 = (TIM2->CCMR2 & ~TIM_CCMR2_OC3M) | (4 << TIM_CCMR2_OC3M_Pos);
 8001160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800116a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001172:	61d3      	str	r3, [r2, #28]
		TIM2->CCR3 = sudut_alpha;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001176:	f9b3 2000 	ldrsh.w	r2, [r3]
 800117a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40014400 	.word	0x40014400
 800118c:	40020400 	.word	0x40020400
 8001190:	20000199 	.word	0x20000199
 8001194:	2000014c 	.word	0x2000014c
 8001198:	2000002c 	.word	0x2000002c
 800119c:	20000074 	.word	0x20000074
 80011a0:	200000bc 	.word	0x200000bc
 80011a4:	20000000 	.word	0x20000000

080011a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_MspInit+0x4c>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_MspInit+0x4c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d135      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a62      	ldr	r2, [pc, #392]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a5b      	ldr	r2, [pc, #364]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800125e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001270:	2301      	movs	r3, #1
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	4850      	ldr	r0, [pc, #320]	; (80013bc <HAL_TIM_Base_MspInit+0x1b8>)
 800127c:	f000 fbb0 	bl	80019e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	201c      	movs	r0, #28
 8001286:	f000 fb74 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800128a:	201c      	movs	r0, #28
 800128c:	f000 fb8d 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001290:	e08e      	b.n	80013b0 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM3)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a4a      	ldr	r2, [pc, #296]	; (80013c0 <HAL_TIM_Base_MspInit+0x1bc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d134      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a44      	ldr	r2, [pc, #272]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a3d      	ldr	r2, [pc, #244]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012d4:	2310      	movs	r3, #16
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e4:	2302      	movs	r3, #2
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	4835      	ldr	r0, [pc, #212]	; (80013c4 <HAL_TIM_Base_MspInit+0x1c0>)
 80012f0:	f000 fb76 	bl	80019e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	201d      	movs	r0, #29
 80012fa:	f000 fb3a 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012fe:	201d      	movs	r0, #29
 8001300:	f000 fb53 	bl	80019aa <HAL_NVIC_EnableIRQ>
}
 8001304:	e054      	b.n	80013b0 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM4)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <HAL_TIM_Base_MspInit+0x1c4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d134      	bne.n	800137a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001358:	2302      	movs	r3, #2
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	4818      	ldr	r0, [pc, #96]	; (80013c4 <HAL_TIM_Base_MspInit+0x1c0>)
 8001364:	f000 fb3c 	bl	80019e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	201e      	movs	r0, #30
 800136e:	f000 fb00 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001372:	201e      	movs	r0, #30
 8001374:	f000 fb19 	bl	80019aa <HAL_NVIC_EnableIRQ>
}
 8001378:	e01a      	b.n	80013b0 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM10)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_TIM_Base_MspInit+0x1c8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d115      	bne.n	80013b0 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 800138e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001392:	6453      	str	r3, [r2, #68]	; 0x44
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2019      	movs	r0, #25
 80013a6:	f000 fae4 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013aa:	2019      	movs	r0, #25
 80013ac:	f000 fafd 	bl	80019aa <HAL_NVIC_EnableIRQ>
}
 80013b0:	bf00      	nop
 80013b2:	3738      	adds	r7, #56	; 0x38
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40000400 	.word	0x40000400
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40000800 	.word	0x40000800
 80013cc:	40014400 	.word	0x40014400

080013d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_TIM_Encoder_MspInit+0x94>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d133      	bne.n	800145a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_TIM_Encoder_MspInit+0x98>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_TIM_Encoder_MspInit+0x98>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_TIM_Encoder_MspInit+0x98>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_TIM_Encoder_MspInit+0x98>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_TIM_Encoder_MspInit+0x98>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_TIM_Encoder_MspInit+0x98>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800142a:	2303      	movs	r3, #3
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800143a:	2302      	movs	r3, #2
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001446:	f000 facb 	bl	80019e0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2032      	movs	r0, #50	; 0x32
 8001450:	f000 fa8f 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001454:	2032      	movs	r0, #50	; 0x32
 8001456:	f000 faa8 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40000c00 	.word	0x40000c00
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001490:	d11f      	bne.n	80014d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b35      	ldr	r3, [pc, #212]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a34      	ldr	r2, [pc, #208]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b32      	ldr	r3, [pc, #200]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80014ae:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014c0:	2301      	movs	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4829      	ldr	r0, [pc, #164]	; (8001570 <HAL_TIM_MspPostInit+0x100>)
 80014cc:	f000 fa88 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014d0:	e047      	b.n	8001562 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a27      	ldr	r2, [pc, #156]	; (8001574 <HAL_TIM_MspPostInit+0x104>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d11e      	bne.n	800151a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80014f8:	2321      	movs	r3, #33	; 0x21
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001508:	2302      	movs	r3, #2
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <HAL_TIM_MspPostInit+0x100>)
 8001514:	f000 fa64 	bl	80019e0 <HAL_GPIO_Init>
}
 8001518:	e023      	b.n	8001562 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <HAL_TIM_MspPostInit+0x108>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d11e      	bne.n	8001562 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_TIM_MspPostInit+0xfc>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001540:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001552:	2302      	movs	r3, #2
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <HAL_TIM_MspPostInit+0x100>)
 800155e:	f000 fa3f 	bl	80019e0 <HAL_GPIO_Init>
}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40020400 	.word	0x40020400
 8001574:	40000400 	.word	0x40000400
 8001578:	40000800 	.word	0x40000800

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 f8d8 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015d6:	f002 fd8f 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000014c 	.word	0x2000014c

080015e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM2_IRQHandler+0x10>)
 80015ea:	f002 fd85 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000002c 	.word	0x2000002c

080015f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <TIM3_IRQHandler+0x10>)
 80015fe:	f002 fd7b 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000074 	.word	0x20000074

0800160c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM4_IRQHandler+0x10>)
 8001612:	f002 fd71 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000bc 	.word	0x200000bc

08001620 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FIRING_MODE_Pin);
 8001624:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001628:	f000 fbaa 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEVICE_SEL_Pin);
 800162c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001630:	f000 fba6 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <TIM5_IRQHandler+0x10>)
 800163e:	f002 fd5b 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000104 	.word	0x20000104

0800164c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <OTG_FS_IRQHandler+0x10>)
 8001652:	f000 fbad 	bl	8001db0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001a4 	.word	0x200001a4

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a0:	4c0b      	ldr	r4, [pc, #44]	; (80016d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd7 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f006 f90b 	bl	80078cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7fe ff11 	bl	80004dc <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016c8:	0800795c 	.word	0x0800795c
  ldr r2, =_sbss
 80016cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016d0:	200006b0 	.word	0x200006b0

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f92b 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	200f      	movs	r0, #15
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fd52 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f943 	bl	80019c6 <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f90b 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000004 	.word	0x20000004
 8001774:	2000000c 	.word	0x2000000c
 8001778:	20000008 	.word	0x20000008

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	2000019c 	.word	0x2000019c

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000019c 	.word	0x2000019c

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff29 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff3e 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff31 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e159      	b.n	8001cb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8148 	bne.w	8001caa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a2 	beq.w	8001caa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x202>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_GPIO_Init+0x2f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x1fe>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x1f6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x1f2>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f aea2 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e001      	b.n	8001d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d5c:	887a      	ldrh	r2, [r7, #2]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	041a      	lsls	r2, r3, #16
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	400b      	ands	r3, r1
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	619a      	str	r2, [r3, #24]
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f934 	bl	800100c <HAL_GPIO_EXTI_Callback>
  }
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b08d      	sub	sp, #52	; 0x34
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 f93f 	bl	800604a <USB_GetMode>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 848a 	bne.w	80026e8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 f8a3 	bl	8005f24 <USB_ReadInterrupts>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8480 	beq.w	80026e6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f890 	bl	8005f24 <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f002 0202 	and.w	r2, r2, #2
 8001e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 f87e 	bl	8005f24 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d161      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0210 	bic.w	r2, r2, #16
 8001e40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	0c5b      	lsrs	r3, r3, #17
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d124      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d035      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6a38      	ldr	r0, [r7, #32]
 8001e8e:	f003 fef7 	bl	8005c80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e9e:	441a      	add	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb0:	441a      	add	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	621a      	str	r2, [r3, #32]
 8001eb6:	e016      	b.n	8001ee6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	0c5b      	lsrs	r3, r3, #17
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d110      	bne.n	8001ee6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6a38      	ldr	r0, [r7, #32]
 8001ed0:	f003 fed6 	bl	8005c80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ee0:	441a      	add	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0210 	orr.w	r2, r2, #16
 8001ef4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 f812 	bl	8005f24 <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f0a:	f040 80a7 	bne.w	800205c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 f817 	bl	8005f4a <USB_ReadDevAllOutEpInterrupt>
 8001f1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f1e:	e099      	b.n	8002054 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 808e 	beq.w	8002048 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f83b 	bl	8005fb2 <USB_ReadDevOutEPInterrupt>
 8001f3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00c      	beq.n	8001f62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f54:	461a      	mov	r2, r3
 8001f56:	2301      	movs	r3, #1
 8001f58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fe61 	bl	8002c24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00c      	beq.n	8001f86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 ff37 	bl	8002df4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d030      	beq.n	800200e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	d109      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	78db      	ldrb	r3, [r3, #3]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d108      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f005 fb0a 	bl	8007610 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	4413      	add	r3, r2
 8002004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002008:	461a      	mov	r2, r3
 800200a:	2302      	movs	r3, #2
 800200c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002024:	461a      	mov	r2, r3
 8002026:	2320      	movs	r3, #32
 8002028:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	4413      	add	r3, r2
 800203c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002040:	461a      	mov	r2, r3
 8002042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002046:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	3301      	adds	r3, #1
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f af62 	bne.w	8001f20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f003 ff5f 	bl	8005f24 <USB_ReadInterrupts>
 8002066:	4603      	mov	r3, r0
 8002068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002070:	f040 80db 	bne.w	800222a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 ff80 	bl	8005f7e <USB_ReadDevAllInEpInterrupt>
 800207e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002084:	e0cd      	b.n	8002222 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80c2 	beq.w	8002216 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f003 ffa6 	bl	8005fee <USB_ReadDevInEPInterrupt>
 80020a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d057      	beq.n	800215e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	2201      	movs	r2, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69f9      	ldr	r1, [r7, #28]
 80020ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020ce:	4013      	ands	r3, r2
 80020d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020de:	461a      	mov	r2, r3
 80020e0:	2301      	movs	r3, #1
 80020e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d132      	bne.n	8002152 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	334c      	adds	r3, #76	; 0x4c
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4403      	add	r3, r0
 800210c:	3348      	adds	r3, #72	; 0x48
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4419      	add	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4403      	add	r3, r0
 8002120:	334c      	adds	r3, #76	; 0x4c
 8002122:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	d113      	bne.n	8002152 <HAL_PCD_IRQHandler+0x3a2>
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3354      	adds	r3, #84	; 0x54
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800214a:	461a      	mov	r2, r3
 800214c:	2101      	movs	r1, #1
 800214e:	f003 ffad 	bl	80060ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	b2db      	uxtb	r3, r3
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f005 f9df 	bl	800751c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002174:	461a      	mov	r2, r3
 8002176:	2308      	movs	r3, #8
 8002178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002190:	461a      	mov	r2, r3
 8002192:	2310      	movs	r3, #16
 8002194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ac:	461a      	mov	r2, r3
 80021ae:	2340      	movs	r3, #64	; 0x40
 80021b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d023      	beq.n	8002204 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021be:	6a38      	ldr	r0, [r7, #32]
 80021c0:	f002 fff6 	bl	80051b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	3338      	adds	r3, #56	; 0x38
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	3304      	adds	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	78db      	ldrb	r3, [r3, #3]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d108      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2200      	movs	r2, #0
 80021e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f005 fa21 	bl	8007634 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fe:	461a      	mov	r2, r3
 8002200:	2302      	movs	r3, #2
 8002202:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800220e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fc79 	bl	8002b08 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	3301      	adds	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f af2e 	bne.w	8002086 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fe78 	bl	8005f24 <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800223a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800223e:	d122      	bne.n	8002286 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800225a:	2b01      	cmp	r3, #1
 800225c:	d108      	bne.n	8002270 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fe09 	bl	8002e80 <HAL_PCDEx_LPM_Callback>
 800226e:	e002      	b.n	8002276 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f005 f9bf 	bl	80075f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fe4a 	bl	8005f24 <USB_ReadInterrupts>
 8002290:	4603      	mov	r3, r0
 8002292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800229a:	d112      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d102      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f005 f97b 	bl	80075a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 fe2c 	bl	8005f24 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	f040 80b7 	bne.w	8002448 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2110      	movs	r1, #16
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 ff5b 	bl	80051b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fe:	e046      	b.n	800238e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800230c:	461a      	mov	r2, r3
 800230e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002312:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002324:	0151      	lsls	r1, r2, #5
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	440a      	add	r2, r1
 800232a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800232e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002332:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002346:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002358:	0151      	lsls	r1, r2, #5
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	440a      	add	r2, r1
 800235e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002362:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002366:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002378:	0151      	lsls	r1, r2, #5
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	440a      	add	r2, r1
 800237e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002382:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002386:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	3301      	adds	r3, #1
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002394:	429a      	cmp	r2, r3
 8002396:	d3b3      	bcc.n	8002300 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d016      	beq.n	80023e2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c4:	f043 030b 	orr.w	r3, r3, #11
 80023c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023da:	f043 030b 	orr.w	r3, r3, #11
 80023de:	6453      	str	r3, [r2, #68]	; 0x44
 80023e0:	e015      	b.n	800240e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002408:	f043 030b 	orr.w	r3, r3, #11
 800240c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800241c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002420:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002432:	461a      	mov	r2, r3
 8002434:	f003 fe3a 	bl	80060ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f003 fd69 	bl	8005f24 <USB_ReadInterrupts>
 8002452:	4603      	mov	r3, r0
 8002454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245c:	d124      	bne.n	80024a8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fdff 	bl	8006066 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f002 fed3 	bl	8005218 <USB_GetDevSpeed>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681c      	ldr	r4, [r3, #0]
 800247e:	f001 f92f 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8002482:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	4620      	mov	r0, r4
 800248e:	f002 fded 	bl	800506c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f005 f86a 	bl	800756c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 fd39 	bl	8005f24 <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d10a      	bne.n	80024d2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f005 f847 	bl	8007550 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f002 0208 	and.w	r2, r2, #8
 80024d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fd24 	bl	8005f24 <USB_ReadInterrupts>
 80024dc:	4603      	mov	r3, r0
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b80      	cmp	r3, #128	; 0x80
 80024e4:	d122      	bne.n	800252c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024f2:	2301      	movs	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	e014      	b.n	8002522 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fac5 	bl	8002aa6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3301      	adds	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	429a      	cmp	r2, r3
 800252a:	d3e5      	bcc.n	80024f8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f003 fcf7 	bl	8005f24 <USB_ReadInterrupts>
 8002536:	4603      	mov	r3, r0
 8002538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002540:	d13b      	bne.n	80025ba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002542:	2301      	movs	r3, #1
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	e02b      	b.n	80025a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3340      	adds	r3, #64	; 0x40
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d115      	bne.n	800259a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800256e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002570:	2b00      	cmp	r3, #0
 8002572:	da12      	bge.n	800259a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	333f      	adds	r3, #63	; 0x3f
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002590:	b2db      	uxtb	r3, r3
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fa86 	bl	8002aa6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	3301      	adds	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3ce      	bcc.n	8002548 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fcb0 	bl	8005f24 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ce:	d155      	bne.n	800267c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d0:	2301      	movs	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	e045      	b.n	8002662 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d12e      	bne.n	800265c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	da2b      	bge.n	800265c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002610:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002614:	429a      	cmp	r2, r3
 8002616:	d121      	bne.n	800265c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002658:	6053      	str	r3, [r2, #4]
            break;
 800265a:	e007      	b.n	800266c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	3301      	adds	r3, #1
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	429a      	cmp	r2, r3
 800266a:	d3b4      	bcc.n	80025d6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800267a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fc4f 	bl	8005f24 <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002690:	d10a      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f004 ffe0 	bl	8007658 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 fc39 	bl	8005f24 <USB_ReadInterrupts>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d115      	bne.n	80026e8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f004 ffd0 	bl	8007674 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	e000      	b.n	80026e8 <HAL_PCD_IRQHandler+0x938>
      return;
 80026e6:	bf00      	nop
    }
  }
}
 80026e8:	3734      	adds	r7, #52	; 0x34
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}

080026ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_PCD_SetAddress+0x1a>
 8002704:	2302      	movs	r3, #2
 8002706:	e013      	b.n	8002730 <HAL_PCD_SetAddress+0x42>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fbd9 	bl	8005ed8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	4608      	mov	r0, r1
 8002742:	4611      	mov	r1, r2
 8002744:	461a      	mov	r2, r3
 8002746:	4603      	mov	r3, r0
 8002748:	70fb      	strb	r3, [r7, #3]
 800274a:	460b      	mov	r3, r1
 800274c:	803b      	strh	r3, [r7, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	da0f      	bge.n	800277e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	3338      	adds	r3, #56	; 0x38
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	3304      	adds	r3, #4
 8002774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	705a      	strb	r2, [r3, #1]
 800277c:	e00f      	b.n	800279e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	3304      	adds	r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027aa:	883a      	ldrh	r2, [r7, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	78ba      	ldrb	r2, [r7, #2]
 80027b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027c8:	78bb      	ldrb	r3, [r7, #2]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d102      	bne.n	80027d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_PCD_EP_Open+0xaa>
 80027de:	2302      	movs	r3, #2
 80027e0:	e00e      	b.n	8002800 <HAL_PCD_EP_Open+0xc8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68f9      	ldr	r1, [r7, #12]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fd36 	bl	8005262 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	460b      	mov	r3, r1
 8002816:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002818:	7afb      	ldrb	r3, [r7, #11]
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	3304      	adds	r3, #4
 8002830:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2200      	movs	r2, #0
 8002848:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	b2da      	uxtb	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002864:	7afb      	ldrb	r3, [r7, #11]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	6979      	ldr	r1, [r7, #20]
 800287c:	f002 ffc0 	bl	8005800 <USB_EP0StartXfer>
 8002880:	e008      	b.n	8002894 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	6979      	ldr	r1, [r7, #20]
 8002890:	f002 fd6e 	bl	8005370 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	460b      	mov	r3, r1
 80028ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ae:	7afb      	ldrb	r3, [r7, #11]
 80028b0:	f003 020f 	and.w	r2, r3, #15
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	3338      	adds	r3, #56	; 0x38
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4413      	add	r3, r2
 80028c2:	3304      	adds	r3, #4
 80028c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2200      	movs	r2, #0
 80028d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2201      	movs	r2, #1
 80028dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028f8:	7afb      	ldrb	r3, [r7, #11]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	6979      	ldr	r1, [r7, #20]
 8002910:	f002 ff76 	bl	8005800 <USB_EP0StartXfer>
 8002914:	e008      	b.n	8002928 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	6979      	ldr	r1, [r7, #20]
 8002924:	f002 fd24 	bl	8005370 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d901      	bls.n	8002950 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e050      	b.n	80029f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da0f      	bge.n	8002978 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3338      	adds	r3, #56	; 0x38
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	705a      	strb	r2, [r3, #1]
 8002976:	e00d      	b.n	8002994 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_PCD_EP_SetStall+0x82>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e01e      	b.n	80029f2 <HAL_PCD_EP_SetStall+0xc0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68f9      	ldr	r1, [r7, #12]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 f9b4 	bl	8005d30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	b2d9      	uxtb	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029e2:	461a      	mov	r2, r3
 80029e4:	f003 fb62 	bl	80060ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d901      	bls.n	8002a18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e042      	b.n	8002a9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	da0f      	bge.n	8002a40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	f003 020f 	and.w	r2, r3, #15
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	3338      	adds	r3, #56	; 0x38
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	3304      	adds	r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	705a      	strb	r2, [r3, #1]
 8002a3e:	e00f      	b.n	8002a60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 020f 	and.w	r2, r3, #15
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	3304      	adds	r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_EP_ClrStall+0x86>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e00e      	b.n	8002a9e <HAL_PCD_EP_ClrStall+0xa4>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 f9bc 	bl	8005e0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da0c      	bge.n	8002ad4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	3338      	adds	r3, #56	; 0x38
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e00c      	b.n	8002aee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 020f 	and.w	r2, r3, #15
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	3304      	adds	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 ffdb 	bl	8005ab0 <USB_EPStopXfer>
 8002afa:	4603      	mov	r3, r0
 8002afc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002afe:	7afb      	ldrb	r3, [r7, #11]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	3338      	adds	r3, #56	; 0x38
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d901      	bls.n	8002b40 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e06c      	b.n	8002c1a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d902      	bls.n	8002b5c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3303      	adds	r3, #3
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b64:	e02b      	b.n	8002bbe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d902      	bls.n	8002b82 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3303      	adds	r3, #3
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6978      	ldr	r0, [r7, #20]
 8002ba2:	f003 f82f 	bl	8005c04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	441a      	add	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	441a      	add	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d809      	bhi.n	8002be8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d203      	bcs.n	8002be8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1be      	bne.n	8002b66 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d811      	bhi.n	8002c18 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	6939      	ldr	r1, [r7, #16]
 8002c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c14:	4013      	ands	r3, r2
 8002c16:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	333c      	adds	r3, #60	; 0x3c
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d17b      	bne.n	8002d52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	4a61      	ldr	r2, [pc, #388]	; (8002dec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	f240 80b9 	bls.w	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80b3 	beq.w	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c86:	461a      	mov	r2, r3
 8002c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8c:	6093      	str	r3, [r2, #8]
 8002c8e:	e0a7      	b.n	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2320      	movs	r3, #32
 8002caa:	6093      	str	r3, [r2, #8]
 8002cac:	e098      	b.n	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 8093 	bne.w	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	4a4b      	ldr	r2, [pc, #300]	; (8002dec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d90f      	bls.n	8002ce2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cde:	6093      	str	r3, [r2, #8]
 8002ce0:	e07e      	b.n	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	0159      	lsls	r1, r3, #5
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	440b      	add	r3, r1
 8002d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d114      	bne.n	8002d44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2101      	movs	r1, #1
 8002d30:	f003 f9bc 	bl	80060ac <USB_EP0_OutStart>
 8002d34:	e006      	b.n	8002d44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	441a      	add	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f004 fbcb 	bl	80074e6 <HAL_PCD_DataOutStageCallback>
 8002d50:	e046      	b.n	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d124      	bne.n	8002da4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d70:	461a      	mov	r2, r3
 8002d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d76:	6093      	str	r3, [r2, #8]
 8002d78:	e032      	b.n	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d90:	461a      	mov	r2, r3
 8002d92:	2320      	movs	r3, #32
 8002d94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f004 fba2 	bl	80074e6 <HAL_PCD_DataOutStageCallback>
 8002da2:	e01d      	b.n	8002de0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d114      	bne.n	8002dd4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d108      	bne.n	8002dd4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f003 f96c 	bl	80060ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f004 fb83 	bl	80074e6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	4f54300a 	.word	0x4f54300a
 8002df0:	4f54310a 	.word	0x4f54310a

08002df4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	333c      	adds	r3, #60	; 0x3c
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d90e      	bls.n	8002e48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d009      	beq.n	8002e48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	461a      	mov	r2, r3
 8002e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f004 fb3a 	bl	80074c2 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d90c      	bls.n	8002e70 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d108      	bne.n	8002e70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	f003 f91e 	bl	80060ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	4f54300a 	.word	0x4f54300a

08002e80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e267      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d075      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb6:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d00c      	beq.n	8002edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec2:	4b85      	ldr	r3, [pc, #532]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d112      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ece:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eda:	d10b      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	4b7e      	ldr	r3, [pc, #504]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05b      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x108>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d157      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e242      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d106      	bne.n	8002f0c <HAL_RCC_OscConfig+0x74>
 8002efe:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e01d      	b.n	8002f48 <HAL_RCC_OscConfig+0xb0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x98>
 8002f16:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a6f      	ldr	r2, [pc, #444]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b6d      	ldr	r3, [pc, #436]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6c      	ldr	r2, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0xb0>
 8002f30:	4b69      	ldr	r3, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a68      	ldr	r2, [pc, #416]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a65      	ldr	r2, [pc, #404]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc28 	bl	80017a4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fc24 	bl	80017a4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e207      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0xc0>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fc14 	bl	80017a4 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fc10 	bl	80017a4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1f3      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0xe8>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d063      	beq.n	8003076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d11c      	bne.n	8003000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc6:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_RCC_OscConfig+0x152>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1c7      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4937      	ldr	r1, [pc, #220]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	e03a      	b.n	8003076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d020      	beq.n	800304a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003008:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HAL_RCC_OscConfig+0x244>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fbc9 	bl	80017a4 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe fbc5 	bl	80017a4 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1a8      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4925      	ldr	r1, [pc, #148]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
 8003048:	e015      	b.n	8003076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_OscConfig+0x244>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fba8 	bl	80017a4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe fba4 	bl	80017a4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e187      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d036      	beq.n	80030f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_RCC_OscConfig+0x248>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fb88 	bl	80017a4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe fb84 	bl	80017a4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e167      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 80030ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x200>
 80030b6:	e01b      	b.n	80030f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_OscConfig+0x248>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fb71 	bl	80017a4 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	e00e      	b.n	80030e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe fb6d 	bl	80017a4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d907      	bls.n	80030e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e150      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	42470000 	.word	0x42470000
 80030e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4b88      	ldr	r3, [pc, #544]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80030e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ea      	bne.n	80030c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8097 	beq.w	800322c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b81      	ldr	r3, [pc, #516]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	4b7d      	ldr	r3, [pc, #500]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a7c      	ldr	r2, [pc, #496]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b7a      	ldr	r3, [pc, #488]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b77      	ldr	r3, [pc, #476]	; (800330c <HAL_RCC_OscConfig+0x474>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b74      	ldr	r3, [pc, #464]	; (800330c <HAL_RCC_OscConfig+0x474>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a73      	ldr	r2, [pc, #460]	; (800330c <HAL_RCC_OscConfig+0x474>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fe fb2d 	bl	80017a4 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fb29 	bl	80017a4 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e10c      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_OscConfig+0x474>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x2ea>
 8003174:	4b64      	ldr	r3, [pc, #400]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a63      	ldr	r2, [pc, #396]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
 8003180:	e01c      	b.n	80031bc <HAL_RCC_OscConfig+0x324>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b05      	cmp	r3, #5
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x30c>
 800318a:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a5e      	ldr	r2, [pc, #376]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	4b5c      	ldr	r3, [pc, #368]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a5b      	ldr	r2, [pc, #364]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0x324>
 80031a4:	4b58      	ldr	r3, [pc, #352]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a57      	ldr	r2, [pc, #348]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	4b55      	ldr	r3, [pc, #340]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a54      	ldr	r2, [pc, #336]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031b6:	f023 0304 	bic.w	r3, r3, #4
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d015      	beq.n	80031f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe faee 	bl	80017a4 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe faea 	bl	80017a4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0cb      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	4b49      	ldr	r3, [pc, #292]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ee      	beq.n	80031cc <HAL_RCC_OscConfig+0x334>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fad8 	bl	80017a4 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe fad4 	bl	80017a4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0b5      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320e:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ee      	bne.n	80031f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003220:	4b39      	ldr	r3, [pc, #228]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	4a38      	ldr	r2, [pc, #224]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a1 	beq.w	8003378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003236:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b08      	cmp	r3, #8
 8003240:	d05c      	beq.n	80032fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d141      	bne.n	80032ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_OscConfig+0x478>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe faa8 	bl	80017a4 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe faa4 	bl	80017a4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e087      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	491b      	ldr	r1, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x478>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe fa7d 	bl	80017a4 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fe fa79 	bl	80017a4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e05c      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x416>
 80032cc:	e054      	b.n	8003378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCC_OscConfig+0x478>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fe fa66 	bl	80017a4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe fa62 	bl	80017a4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e045      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x444>
 80032fa:	e03d      	b.n	8003378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e038      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
 8003308:	40023800 	.word	0x40023800
 800330c:	40007000 	.word	0x40007000
 8003310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x4ec>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d028      	beq.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d121      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d11a      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800334a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800

08003388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0cc      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b68      	ldr	r3, [pc, #416]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d90c      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d044      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d119      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d003      	beq.n	8003446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003442:	2b03      	cmp	r3, #3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e067      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4934      	ldr	r1, [pc, #208]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fe f994 	bl	80017a4 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe f990 	bl	80017a4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e04f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d20c      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4916      	ldr	r1, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	490e      	ldr	r1, [pc, #56]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800350e:	f000 f821 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003512:	4602      	mov	r2, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	490a      	ldr	r1, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe f8f4 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023c00 	.word	0x40023c00
 8003544:	40023800 	.word	0x40023800
 8003548:	0800793c 	.word	0x0800793c
 800354c:	20000004 	.word	0x20000004
 8003550:	20000008 	.word	0x20000008

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b090      	sub	sp, #64	; 0x40
 800355a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
 8003560:	2300      	movs	r3, #0
 8003562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003564:	2300      	movs	r3, #0
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d00d      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x40>
 8003578:	2b08      	cmp	r3, #8
 800357a:	f200 80a1 	bhi.w	80036c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x34>
 8003582:	2b04      	cmp	r3, #4
 8003584:	d003      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x3a>
 8003586:	e09b      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800358a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800358c:	e09b      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800358e:	4b53      	ldr	r3, [pc, #332]	; (80036dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003592:	e098      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003594:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800359e:	4b4d      	ldr	r3, [pc, #308]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d028      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035aa:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	2200      	movs	r2, #0
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	627a      	str	r2, [r7, #36]	; 0x24
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035bc:	2100      	movs	r1, #0
 80035be:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_RCC_GetSysClockFreq+0x188>)
 80035c0:	fb03 f201 	mul.w	r2, r3, r1
 80035c4:	2300      	movs	r3, #0
 80035c6:	fb00 f303 	mul.w	r3, r0, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	4a43      	ldr	r2, [pc, #268]	; (80036dc <HAL_RCC_GetSysClockFreq+0x188>)
 80035ce:	fba0 1202 	umull	r1, r2, r0, r2
 80035d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d4:	460a      	mov	r2, r1
 80035d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80035d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035da:	4413      	add	r3, r2
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e0:	2200      	movs	r2, #0
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	61fa      	str	r2, [r7, #28]
 80035e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035ee:	f7fc fdf3 	bl	80001d8 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4613      	mov	r3, r2
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fa:	e053      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	2200      	movs	r2, #0
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	617a      	str	r2, [r7, #20]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800360e:	f04f 0b00 	mov.w	fp, #0
 8003612:	4652      	mov	r2, sl
 8003614:	465b      	mov	r3, fp
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	ebb2 080a 	subs.w	r8, r2, sl
 800362e:	eb63 090b 	sbc.w	r9, r3, fp
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800363e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003642:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003646:	ebb2 0408 	subs.w	r4, r2, r8
 800364a:	eb63 0509 	sbc.w	r5, r3, r9
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	00eb      	lsls	r3, r5, #3
 8003658:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800365c:	00e2      	lsls	r2, r4, #3
 800365e:	4614      	mov	r4, r2
 8003660:	461d      	mov	r5, r3
 8003662:	eb14 030a 	adds.w	r3, r4, sl
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	eb45 030b 	adc.w	r3, r5, fp
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800367a:	4629      	mov	r1, r5
 800367c:	028b      	lsls	r3, r1, #10
 800367e:	4621      	mov	r1, r4
 8003680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003684:	4621      	mov	r1, r4
 8003686:	028a      	lsls	r2, r1, #10
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	2200      	movs	r2, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	60fa      	str	r2, [r7, #12]
 8003694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003698:	f7fc fd9e 	bl	80001d8 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	3301      	adds	r3, #1
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80036c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3740      	adds	r7, #64	; 0x40
 80036cc:	46bd      	mov	sp, r7
 80036ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	017d7840 	.word	0x017d7840

080036e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036e6:	681b      	ldr	r3, [r3, #0]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e041      	b.n	800378e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fd70 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f001 f82e 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d001      	beq.n	80037b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e03c      	b.n	800382a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <HAL_TIM_Base_Start+0xa0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <HAL_TIM_Base_Start+0x5c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ca:	d013      	beq.n	80037f4 <HAL_TIM_Base_Start+0x5c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_TIM_Base_Start+0xa4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_TIM_Base_Start+0x5c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_TIM_Base_Start+0xa8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d009      	beq.n	80037f4 <HAL_TIM_Base_Start+0x5c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a17      	ldr	r2, [pc, #92]	; (8003844 <HAL_TIM_Base_Start+0xac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIM_Base_Start+0x5c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_TIM_Base_Start+0xb0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d111      	bne.n	8003818 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d010      	beq.n	8003828 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003816:	e007      	b.n	8003828 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40014000 	.word	0x40014000

0800384c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d001      	beq.n	8003864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e044      	b.n	80038ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <HAL_TIM_Base_Start_IT+0xb0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d018      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x6c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d013      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x6c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <HAL_TIM_Base_Start_IT+0xb4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x6c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_TIM_Base_Start_IT+0xb8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x6c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a17      	ldr	r2, [pc, #92]	; (8003908 <HAL_TIM_Base_Start_IT+0xbc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x6c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a16      	ldr	r2, [pc, #88]	; (800390c <HAL_TIM_Base_Start_IT+0xc0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d111      	bne.n	80038dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d010      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038da:	e007      	b.n	80038ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40010000 	.word	0x40010000
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800
 8003908:	40000c00 	.word	0x40000c00
 800390c:	40014000 	.word	0x40014000

08003910 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a1a      	ldr	r2, [r3, #32]
 800392e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10f      	bne.n	8003958 <HAL_TIM_Base_Stop_IT+0x48>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	f240 4344 	movw	r3, #1092	; 0x444
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_TIM_Base_Stop_IT+0x48>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e041      	b.n	8003a04 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f839 	bl	8003a0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f000 fef3 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_TIM_OC_Start_IT+0x28>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e022      	b.n	8003a8e <HAL_TIM_OC_Start_IT+0x6e>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d109      	bne.n	8003a62 <HAL_TIM_OC_Start_IT+0x42>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	e015      	b.n	8003a8e <HAL_TIM_OC_Start_IT+0x6e>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d109      	bne.n	8003a7c <HAL_TIM_OC_Start_IT+0x5c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e008      	b.n	8003a8e <HAL_TIM_OC_Start_IT+0x6e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0b3      	b.n	8003bfe <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_OC_Start_IT+0x86>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa4:	e013      	b.n	8003ace <HAL_TIM_OC_Start_IT+0xae>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_OC_Start_IT+0x96>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab4:	e00b      	b.n	8003ace <HAL_TIM_OC_Start_IT+0xae>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_OC_Start_IT+0xa6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac4:	e003      	b.n	8003ace <HAL_TIM_OC_Start_IT+0xae>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d841      	bhi.n	8003b58 <HAL_TIM_OC_Start_IT+0x138>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <HAL_TIM_OC_Start_IT+0xbc>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b59 	.word	0x08003b59
 8003ae4:	08003b59 	.word	0x08003b59
 8003ae8:	08003b59 	.word	0x08003b59
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003b59 	.word	0x08003b59
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003b59 	.word	0x08003b59
 8003afc:	08003b35 	.word	0x08003b35
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b47 	.word	0x08003b47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0202 	orr.w	r2, r2, #2
 8003b1e:	60da      	str	r2, [r3, #12]
      break;
 8003b20:	e01d      	b.n	8003b5e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0204 	orr.w	r2, r2, #4
 8003b30:	60da      	str	r2, [r3, #12]
      break;
 8003b32:	e014      	b.n	8003b5e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	60da      	str	r2, [r3, #12]
      break;
 8003b44:	e00b      	b.n	8003b5e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0210 	orr.w	r2, r2, #16
 8003b54:	60da      	str	r2, [r3, #12]
      break;
 8003b56:	e002      	b.n	8003b5e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d14b      	bne.n	8003bfc <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f9d5 	bl	8004f1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <HAL_TIM_OC_Start_IT+0x1e8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_TIM_OC_Start_IT+0x1e8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_TIM_OC_Start_IT+0x1a8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d013      	beq.n	8003bc8 <HAL_TIM_OC_Start_IT+0x1a8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <HAL_TIM_OC_Start_IT+0x1ec>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_TIM_OC_Start_IT+0x1a8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_TIM_OC_Start_IT+0x1f0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_TIM_OC_Start_IT+0x1a8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_TIM_OC_Start_IT+0x1f4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_OC_Start_IT+0x1a8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <HAL_TIM_OC_Start_IT+0x1f8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d111      	bne.n	8003bec <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d010      	beq.n	8003bfc <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bea:	e007      	b.n	8003bfc <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40014000 	.word	0x40014000

08003c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e041      	b.n	8003cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f839 	bl	8003cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f000 fd9c 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e041      	b.n	8003d66 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f839 	bl	8003d6e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f000 fd42 	bl	8004798 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0208 	bic.w	r2, r2, #8
 8003d22:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6819      	ldr	r1, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003da4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dac:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d108      	bne.n	8003dc6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003db4:	7bbb      	ldrb	r3, [r7, #14]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d105      	bne.n	8003dc6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dba:	7b7b      	ldrb	r3, [r7, #13]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d102      	bne.n	8003dc6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dc0:	7b3b      	ldrb	r3, [r7, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d001      	beq.n	8003dca <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e03b      	b.n	8003e42 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0202 	orr.w	r2, r2, #2
 8003df8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0204 	orr.w	r2, r2, #4
 8003e08:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 f882 	bl	8004f1c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	2104      	movs	r1, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 f87b 	bl	8004f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000

08003e50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e097      	b.n	8003f94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fd faa9 	bl	80013d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e94:	f023 0307 	bic.w	r3, r3, #7
 8003e98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f000 fc77 	bl	8004798 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ef0:	f023 030c 	bic.w	r3, r3, #12
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	011a      	lsls	r2, r3, #4
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	031b      	lsls	r3, r3, #12
 8003f20:	4313      	orrs	r3, r2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	4313      	orrs	r3, r2
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d110      	bne.n	8003fee <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d102      	bne.n	8003fd8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fd2:	7b7b      	ldrb	r3, [r7, #13]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d001      	beq.n	8003fdc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e089      	b.n	80040f0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fec:	e031      	b.n	8004052 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d110      	bne.n	8004016 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ff4:	7bbb      	ldrb	r3, [r7, #14]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d102      	bne.n	8004000 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ffa:	7b3b      	ldrb	r3, [r7, #12]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d001      	beq.n	8004004 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e075      	b.n	80040f0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004014:	e01d      	b.n	8004052 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d108      	bne.n	800402e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800401c:	7bbb      	ldrb	r3, [r7, #14]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004022:	7b7b      	ldrb	r3, [r7, #13]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d102      	bne.n	800402e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004028:	7b3b      	ldrb	r3, [r7, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d001      	beq.n	8004032 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e05e      	b.n	80040f0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d010      	beq.n	8004080 <HAL_TIM_Encoder_Start_IT+0xe4>
 800405e:	e01f      	b.n	80040a0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2201      	movs	r2, #1
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f000 ff57 	bl	8004f1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0202 	orr.w	r2, r2, #2
 800407c:	60da      	str	r2, [r3, #12]
      break;
 800407e:	e02e      	b.n	80040de <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2201      	movs	r2, #1
 8004086:	2104      	movs	r1, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ff47 	bl	8004f1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0204 	orr.w	r2, r2, #4
 800409c:	60da      	str	r2, [r3, #12]
      break;
 800409e:	e01e      	b.n	80040de <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2201      	movs	r2, #1
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ff37 	bl	8004f1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	2104      	movs	r1, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 ff30 	bl	8004f1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0202 	orr.w	r2, r2, #2
 80040ca:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0204 	orr.w	r2, r2, #4
 80040da:	60da      	str	r2, [r3, #12]
      break;
 80040dc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d122      	bne.n	8004154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d11b      	bne.n	8004154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0202 	mvn.w	r2, #2
 8004124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc fe52 	bl	8000de4 <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fc fda0 	bl	8000c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fb10 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b04      	cmp	r3, #4
 8004160:	d122      	bne.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d11b      	bne.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0204 	mvn.w	r2, #4
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc fe28 	bl	8000de4 <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fc fd76 	bl	8000c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fae6 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d122      	bne.n	80041fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0208 	mvn.w	r2, #8
 80041cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2204      	movs	r2, #4
 80041d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc fdfe 	bl	8000de4 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fd4c 	bl	8000c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fabc 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b10      	cmp	r3, #16
 8004208:	d122      	bne.n	8004250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b10      	cmp	r3, #16
 8004216:	d11b      	bne.n	8004250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0210 	mvn.w	r2, #16
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2208      	movs	r2, #8
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fc fdd4 	bl	8000de4 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc fd22 	bl	8000c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fa92 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10e      	bne.n	800427c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0201 	mvn.w	r2, #1
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fc ff26 	bl	80010c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b80      	cmp	r3, #128	; 0x80
 8004288:	d10e      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	d107      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fed8 	bl	8005058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d10e      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d107      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa57 	bl	8004782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d10e      	bne.n	8004300 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d107      	bne.n	8004300 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0220 	mvn.w	r2, #32
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fea2 	bl	8005044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004322:	2302      	movs	r3, #2
 8004324:	e048      	b.n	80043b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b0c      	cmp	r3, #12
 8004332:	d839      	bhi.n	80043a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	08004371 	.word	0x08004371
 8004340:	080043a9 	.word	0x080043a9
 8004344:	080043a9 	.word	0x080043a9
 8004348:	080043a9 	.word	0x080043a9
 800434c:	0800437f 	.word	0x0800437f
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043a9 	.word	0x080043a9
 8004358:	080043a9 	.word	0x080043a9
 800435c:	0800438d 	.word	0x0800438d
 8004360:	080043a9 	.word	0x080043a9
 8004364:	080043a9 	.word	0x080043a9
 8004368:	080043a9 	.word	0x080043a9
 800436c:	0800439b 	.word	0x0800439b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fa8e 	bl	8004898 <TIM_OC1_SetConfig>
      break;
 800437c:	e017      	b.n	80043ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 faed 	bl	8004964 <TIM_OC2_SetConfig>
      break;
 800438a:	e010      	b.n	80043ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fb52 	bl	8004a3c <TIM_OC3_SetConfig>
      break;
 8004398:	e009      	b.n	80043ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fbb5 	bl	8004b10 <TIM_OC4_SetConfig>
      break;
 80043a6:	e002      	b.n	80043ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	75fb      	strb	r3, [r7, #23]
      break;
 80043ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043da:	2302      	movs	r3, #2
 80043dc:	e0ae      	b.n	800453c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	f200 809f 	bhi.w	800452c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004429 	.word	0x08004429
 80043f8:	0800452d 	.word	0x0800452d
 80043fc:	0800452d 	.word	0x0800452d
 8004400:	0800452d 	.word	0x0800452d
 8004404:	08004469 	.word	0x08004469
 8004408:	0800452d 	.word	0x0800452d
 800440c:	0800452d 	.word	0x0800452d
 8004410:	0800452d 	.word	0x0800452d
 8004414:	080044ab 	.word	0x080044ab
 8004418:	0800452d 	.word	0x0800452d
 800441c:	0800452d 	.word	0x0800452d
 8004420:	0800452d 	.word	0x0800452d
 8004424:	080044eb 	.word	0x080044eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fa32 	bl	8004898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0208 	orr.w	r2, r2, #8
 8004442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0204 	bic.w	r2, r2, #4
 8004452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6999      	ldr	r1, [r3, #24]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	619a      	str	r2, [r3, #24]
      break;
 8004466:	e064      	b.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fa78 	bl	8004964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6999      	ldr	r1, [r3, #24]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	021a      	lsls	r2, r3, #8
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	619a      	str	r2, [r3, #24]
      break;
 80044a8:	e043      	b.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fac3 	bl	8004a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0208 	orr.w	r2, r2, #8
 80044c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0204 	bic.w	r2, r2, #4
 80044d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69d9      	ldr	r1, [r3, #28]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	61da      	str	r2, [r3, #28]
      break;
 80044e8:	e023      	b.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fb0d 	bl	8004b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69d9      	ldr	r1, [r3, #28]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	021a      	lsls	r2, r3, #8
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	61da      	str	r2, [r3, #28]
      break;
 800452a:	e002      	b.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
      break;
 8004530:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800453a:	7dfb      	ldrb	r3, [r7, #23]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08c      	sub	sp, #48	; 0x30
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	f000 80bf 	beq.w	80046e0 <HAL_TIM_OnePulse_ConfigChannel+0x19c>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIM_OnePulse_ConfigChannel+0x2c>
 800456c:	2302      	movs	r3, #2
 800456e:	e0b8      	b.n	80046e2 <HAL_TIM_OnePulse_ConfigChannel+0x19e>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	613b      	str	r3, [r7, #16]
    temp1.Pulse = sConfig->Pulse;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	617b      	str	r3, [r7, #20]
    temp1.OCPolarity = sConfig->OCPolarity;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	61bb      	str	r3, [r7, #24]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	61fb      	str	r3, [r7, #28]
    temp1.OCIdleState = sConfig->OCIdleState;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
    temp1.OCNIdleState = sConfig->OCNIdleState;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (OutputChannel)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d009      	beq.n	80045c4 <HAL_TIM_OnePulse_ConfigChannel+0x80>
 80045b0:	e011      	b.n	80045d6 <HAL_TIM_OnePulse_ConfigChannel+0x92>
    {
      case TIM_CHANNEL_1:
      {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        TIM_OC1_SetConfig(htim->Instance, &temp1);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f107 0210 	add.w	r2, r7, #16
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 f96b 	bl	8004898 <TIM_OC1_SetConfig>
        break;
 80045c2:	e00c      	b.n	80045de <HAL_TIM_OnePulse_ConfigChannel+0x9a>

      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        TIM_OC2_SetConfig(htim->Instance, &temp1);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f107 0210 	add.w	r2, r7, #16
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f9c8 	bl	8004964 <TIM_OC2_SetConfig>
        break;
 80045d4:	e003      	b.n	80045de <HAL_TIM_OnePulse_ConfigChannel+0x9a>
      }

      default:
        status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 80045dc:	bf00      	nop
    }

    if (status == HAL_OK)
 80045de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d170      	bne.n	80046c8 <HAL_TIM_OnePulse_ConfigChannel+0x184>
    {
      switch (InputChannel)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_TIM_OnePulse_ConfigChannel+0xb0>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d033      	beq.n	800465a <HAL_TIM_OnePulse_ConfigChannel+0x116>
 80045f2:	e065      	b.n	80046c0 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
      {
        case TIM_CHANNEL_1:
        {
          assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

          TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6999      	ldr	r1, [r3, #24]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f000 fb66 	bl	8004cd4 <TIM_TI1_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC1PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 020c 	bic.w	r2, r2, #12
 8004616:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004626:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004636:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0207 	bic.w	r2, r2, #7
 8004646:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0206 	orr.w	r2, r2, #6
 8004656:	609a      	str	r2, [r3, #8]
          break;
 8004658:	e037      	b.n	80046ca <HAL_TIM_OnePulse_ConfigChannel+0x186>

        case TIM_CHANNEL_2:
        {
          assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

          TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6999      	ldr	r1, [r3, #24]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	69da      	ldr	r2, [r3, #28]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f000 fbca 	bl	8004e02 <TIM_TI2_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC2PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699a      	ldr	r2, [r3, #24]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800467c:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800468c:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800469c:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0207 	bic.w	r2, r2, #7
 80046ac:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0206 	orr.w	r2, r2, #6
 80046bc:	609a      	str	r2, [r3, #8]
          break;
 80046be:	e004      	b.n	80046ca <HAL_TIM_OnePulse_ConfigChannel+0x186>
        }

        default:
          status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 80046c6:	e000      	b.n	80046ca <HAL_TIM_OnePulse_ConfigChannel+0x186>
      }
    }
 80046c8:	bf00      	nop

    htim->State = HAL_TIM_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return status;
 80046da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046de:	e000      	b.n	80046e2 <HAL_TIM_OnePulse_ConfigChannel+0x19e>
  }
  else
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
  }
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3730      	adds	r7, #48	; 0x30
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_SlaveConfigSynchro+0x18>
 80046fe:	2302      	movs	r3, #2
 8004700:	e031      	b.n	8004766 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fa4b 	bl	8004bb0 <TIM_SlaveTimer_SetConfig>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e018      	b.n	8004766 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004742:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004752:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a34      	ldr	r2, [pc, #208]	; (800487c <TIM_Base_SetConfig+0xe4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00f      	beq.n	80047d0 <TIM_Base_SetConfig+0x38>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d00b      	beq.n	80047d0 <TIM_Base_SetConfig+0x38>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a31      	ldr	r2, [pc, #196]	; (8004880 <TIM_Base_SetConfig+0xe8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d007      	beq.n	80047d0 <TIM_Base_SetConfig+0x38>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a30      	ldr	r2, [pc, #192]	; (8004884 <TIM_Base_SetConfig+0xec>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_Base_SetConfig+0x38>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a2f      	ldr	r2, [pc, #188]	; (8004888 <TIM_Base_SetConfig+0xf0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d108      	bne.n	80047e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a25      	ldr	r2, [pc, #148]	; (800487c <TIM_Base_SetConfig+0xe4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01b      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d017      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a22      	ldr	r2, [pc, #136]	; (8004880 <TIM_Base_SetConfig+0xe8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a21      	ldr	r2, [pc, #132]	; (8004884 <TIM_Base_SetConfig+0xec>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00f      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a20      	ldr	r2, [pc, #128]	; (8004888 <TIM_Base_SetConfig+0xf0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <TIM_Base_SetConfig+0xf4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <TIM_Base_SetConfig+0xf8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <TIM_Base_SetConfig+0xfc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d108      	bne.n	8004834 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a08      	ldr	r2, [pc, #32]	; (800487c <TIM_Base_SetConfig+0xe4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	615a      	str	r2, [r3, #20]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0201 	bic.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 0302 	bic.w	r3, r3, #2
 80048e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <TIM_OC1_SetConfig+0xc8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10c      	bne.n	800490e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 0308 	bic.w	r3, r3, #8
 80048fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f023 0304 	bic.w	r3, r3, #4
 800490c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a13      	ldr	r2, [pc, #76]	; (8004960 <TIM_OC1_SetConfig+0xc8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d111      	bne.n	800493a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40010000 	.word	0x40010000

08004964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 0320 	bic.w	r3, r3, #32
 80049ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <TIM_OC2_SetConfig+0xd4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10d      	bne.n	80049e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <TIM_OC2_SetConfig+0xd4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d113      	bne.n	8004a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000

08004a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <TIM_OC3_SetConfig+0xd0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10d      	bne.n	8004ab6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <TIM_OC3_SetConfig+0xd0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d113      	bne.n	8004ae6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	621a      	str	r2, [r3, #32]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40010000 	.word	0x40010000

08004b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	031b      	lsls	r3, r3, #12
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a10      	ldr	r2, [pc, #64]	; (8004bac <TIM_OC4_SetConfig+0x9c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000

08004bb0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b70      	cmp	r3, #112	; 0x70
 8004bf8:	d01a      	beq.n	8004c30 <TIM_SlaveTimer_SetConfig+0x80>
 8004bfa:	2b70      	cmp	r3, #112	; 0x70
 8004bfc:	d860      	bhi.n	8004cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004bfe:	2b60      	cmp	r3, #96	; 0x60
 8004c00:	d054      	beq.n	8004cac <TIM_SlaveTimer_SetConfig+0xfc>
 8004c02:	2b60      	cmp	r3, #96	; 0x60
 8004c04:	d85c      	bhi.n	8004cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c06:	2b50      	cmp	r3, #80	; 0x50
 8004c08:	d046      	beq.n	8004c98 <TIM_SlaveTimer_SetConfig+0xe8>
 8004c0a:	2b50      	cmp	r3, #80	; 0x50
 8004c0c:	d858      	bhi.n	8004cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d019      	beq.n	8004c46 <TIM_SlaveTimer_SetConfig+0x96>
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d854      	bhi.n	8004cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c16:	2b30      	cmp	r3, #48	; 0x30
 8004c18:	d055      	beq.n	8004cc6 <TIM_SlaveTimer_SetConfig+0x116>
 8004c1a:	2b30      	cmp	r3, #48	; 0x30
 8004c1c:	d850      	bhi.n	8004cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d051      	beq.n	8004cc6 <TIM_SlaveTimer_SetConfig+0x116>
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d84c      	bhi.n	8004cc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04d      	beq.n	8004cc6 <TIM_SlaveTimer_SetConfig+0x116>
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d04b      	beq.n	8004cc6 <TIM_SlaveTimer_SetConfig+0x116>
 8004c2e:	e047      	b.n	8004cc0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68d9      	ldr	r1, [r3, #12]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f000 f94c 	bl	8004edc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004c44:	e040      	b.n	8004cc8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d101      	bne.n	8004c52 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e03b      	b.n	8004cca <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c78:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
      break;
 8004c96:	e017      	b.n	8004cc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f000 f87d 	bl	8004da4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004caa:	e00d      	b.n	8004cc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6899      	ldr	r1, [r3, #8]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f000 f8df 	bl	8004e7c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004cbe:	e003      	b.n	8004cc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc4:	e000      	b.n	8004cc8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004cc6:	bf00      	nop
  }

  return status;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f023 0201 	bic.w	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <TIM_TI1_SetConfig+0xbc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <TIM_TI1_SetConfig+0x56>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d00f      	beq.n	8004d2a <TIM_TI1_SetConfig+0x56>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <TIM_TI1_SetConfig+0xc0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <TIM_TI1_SetConfig+0x56>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <TIM_TI1_SetConfig+0xc4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <TIM_TI1_SetConfig+0x56>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <TIM_TI1_SetConfig+0xc8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_TI1_SetConfig+0x56>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <TIM_TI1_SetConfig+0xcc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <TIM_TI1_SetConfig+0x5a>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <TIM_TI1_SetConfig+0x5c>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	e003      	b.n	8004d4e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f023 030a 	bic.w	r3, r3, #10
 8004d68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 030a 	and.w	r3, r3, #10
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40014000 	.word	0x40014000

08004da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0201 	bic.w	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 030a 	bic.w	r3, r3, #10
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b087      	sub	sp, #28
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f023 0210 	bic.w	r2, r3, #16
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	031b      	lsls	r3, r3, #12
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	621a      	str	r2, [r3, #32]
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f023 0210 	bic.w	r2, r3, #16
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	031b      	lsls	r3, r3, #12
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2201      	movs	r2, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e050      	b.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d013      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a16      	ldr	r2, [pc, #88]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a15      	ldr	r2, [pc, #84]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10c      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4313      	orrs	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40014000 	.word	0x40014000

08005044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d165      	bne.n	800514c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4a41      	ldr	r2, [pc, #260]	; (8005188 <USB_SetTurnaroundTime+0x11c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d906      	bls.n	8005096 <USB_SetTurnaroundTime+0x2a>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4a40      	ldr	r2, [pc, #256]	; (800518c <USB_SetTurnaroundTime+0x120>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d202      	bcs.n	8005096 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005090:	230f      	movs	r3, #15
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e062      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4a3c      	ldr	r2, [pc, #240]	; (800518c <USB_SetTurnaroundTime+0x120>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d306      	bcc.n	80050ac <USB_SetTurnaroundTime+0x40>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4a3b      	ldr	r2, [pc, #236]	; (8005190 <USB_SetTurnaroundTime+0x124>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d202      	bcs.n	80050ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050a6:	230e      	movs	r3, #14
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e057      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4a38      	ldr	r2, [pc, #224]	; (8005190 <USB_SetTurnaroundTime+0x124>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d306      	bcc.n	80050c2 <USB_SetTurnaroundTime+0x56>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4a37      	ldr	r2, [pc, #220]	; (8005194 <USB_SetTurnaroundTime+0x128>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d202      	bcs.n	80050c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050bc:	230d      	movs	r3, #13
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	e04c      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4a33      	ldr	r2, [pc, #204]	; (8005194 <USB_SetTurnaroundTime+0x128>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d306      	bcc.n	80050d8 <USB_SetTurnaroundTime+0x6c>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4a32      	ldr	r2, [pc, #200]	; (8005198 <USB_SetTurnaroundTime+0x12c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d802      	bhi.n	80050d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050d2:	230c      	movs	r3, #12
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e041      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4a2f      	ldr	r2, [pc, #188]	; (8005198 <USB_SetTurnaroundTime+0x12c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d906      	bls.n	80050ee <USB_SetTurnaroundTime+0x82>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4a2e      	ldr	r2, [pc, #184]	; (800519c <USB_SetTurnaroundTime+0x130>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d802      	bhi.n	80050ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050e8:	230b      	movs	r3, #11
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e036      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4a2a      	ldr	r2, [pc, #168]	; (800519c <USB_SetTurnaroundTime+0x130>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d906      	bls.n	8005104 <USB_SetTurnaroundTime+0x98>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4a29      	ldr	r2, [pc, #164]	; (80051a0 <USB_SetTurnaroundTime+0x134>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d802      	bhi.n	8005104 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050fe:	230a      	movs	r3, #10
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e02b      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <USB_SetTurnaroundTime+0x134>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d906      	bls.n	800511a <USB_SetTurnaroundTime+0xae>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <USB_SetTurnaroundTime+0x138>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d202      	bcs.n	800511a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005114:	2309      	movs	r3, #9
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e020      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4a21      	ldr	r2, [pc, #132]	; (80051a4 <USB_SetTurnaroundTime+0x138>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d306      	bcc.n	8005130 <USB_SetTurnaroundTime+0xc4>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <USB_SetTurnaroundTime+0x13c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d802      	bhi.n	8005130 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800512a:	2308      	movs	r3, #8
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e015      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <USB_SetTurnaroundTime+0x13c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d906      	bls.n	8005146 <USB_SetTurnaroundTime+0xda>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <USB_SetTurnaroundTime+0x140>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d202      	bcs.n	8005146 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005140:	2307      	movs	r3, #7
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e00a      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005146:	2306      	movs	r3, #6
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e007      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005152:	2309      	movs	r3, #9
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	e001      	b.n	800515c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005158:	2309      	movs	r3, #9
 800515a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	029b      	lsls	r3, r3, #10
 8005170:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	00d8acbf 	.word	0x00d8acbf
 800518c:	00e4e1c0 	.word	0x00e4e1c0
 8005190:	00f42400 	.word	0x00f42400
 8005194:	01067380 	.word	0x01067380
 8005198:	011a499f 	.word	0x011a499f
 800519c:	01312cff 	.word	0x01312cff
 80051a0:	014ca43f 	.word	0x014ca43f
 80051a4:	016e3600 	.word	0x016e3600
 80051a8:	01a6ab1f 	.word	0x01a6ab1f
 80051ac:	01e84800 	.word	0x01e84800

080051b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3301      	adds	r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <USB_FlushTxFifo+0x64>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d901      	bls.n	80051d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e01b      	b.n	8005208 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	daf2      	bge.n	80051be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	019b      	lsls	r3, r3, #6
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a08      	ldr	r2, [pc, #32]	; (8005214 <USB_FlushTxFifo+0x64>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e006      	b.n	8005208 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b20      	cmp	r3, #32
 8005204:	d0f0      	beq.n	80051e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	00030d40 	.word	0x00030d40

08005218 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0306 	and.w	r3, r3, #6
 8005230:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005238:	2300      	movs	r3, #0
 800523a:	75fb      	strb	r3, [r7, #23]
 800523c:	e00a      	b.n	8005254 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d002      	beq.n	800524a <USB_GetDevSpeed+0x32>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b06      	cmp	r3, #6
 8005248:	d102      	bne.n	8005250 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800524a:	2302      	movs	r3, #2
 800524c:	75fb      	strb	r3, [r7, #23]
 800524e:	e001      	b.n	8005254 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005250:	230f      	movs	r3, #15
 8005252:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
}
 8005256:	4618      	mov	r0, r3
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d13a      	bne.n	80052f4 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	b29b      	uxth	r3, r3
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800529c:	4313      	orrs	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d155      	bne.n	8005362 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	791b      	ldrb	r3, [r3, #4]
 80052d0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052d2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	059b      	lsls	r3, r3, #22
 80052d8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052da:	4313      	orrs	r3, r2
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e036      	b.n	8005362 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	68f9      	ldr	r1, [r7, #12]
 800530e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005312:	4313      	orrs	r3, r2
 8005314:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11a      	bne.n	8005362 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	791b      	ldrb	r3, [r3, #4]
 8005346:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005348:	430b      	orrs	r3, r1
 800534a:	4313      	orrs	r3, r2
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005360:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b01      	cmp	r3, #1
 800538e:	f040 815c 	bne.w	800564a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d132      	bne.n	8005400 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	0cdb      	lsrs	r3, r3, #19
 80053fa:	04db      	lsls	r3, r3, #19
 80053fc:	6113      	str	r3, [r2, #16]
 80053fe:	e074      	b.n	80054ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541a:	0cdb      	lsrs	r3, r3, #19
 800541c:	04db      	lsls	r3, r3, #19
 800541e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800543e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005450:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6999      	ldr	r1, [r3, #24]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	440b      	add	r3, r1
 800545c:	1e59      	subs	r1, r3, #1
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	fbb1 f3f3 	udiv	r3, r1, r3
 8005466:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005468:	4b9d      	ldr	r3, [pc, #628]	; (80056e0 <USB_EPStartXfer+0x370>)
 800546a:	400b      	ands	r3, r1
 800546c:	69b9      	ldr	r1, [r7, #24]
 800546e:	0148      	lsls	r0, r1, #5
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	4401      	add	r1, r0
 8005474:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005478:	4313      	orrs	r3, r2
 800547a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005492:	69b9      	ldr	r1, [r7, #24]
 8005494:	0148      	lsls	r0, r1, #5
 8005496:	69f9      	ldr	r1, [r7, #28]
 8005498:	4401      	add	r1, r0
 800549a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800549e:	4313      	orrs	r3, r2
 80054a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	791b      	ldrb	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d11f      	bne.n	80054ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d14b      	bne.n	8005588 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	461a      	mov	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	791b      	ldrb	r3, [r3, #4]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d128      	bne.n	8005566 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005520:	2b00      	cmp	r3, #0
 8005522:	d110      	bne.n	8005546 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e00f      	b.n	8005566 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e133      	b.n	80057f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	791b      	ldrb	r3, [r3, #4]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d015      	beq.n	80055dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 811b 	beq.w	80057f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	2101      	movs	r1, #1
 80055cc:	fa01 f303 	lsl.w	r3, r1, r3
 80055d0:	69f9      	ldr	r1, [r7, #28]
 80055d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d6:	4313      	orrs	r3, r2
 80055d8:	634b      	str	r3, [r1, #52]	; 0x34
 80055da:	e109      	b.n	80057f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d110      	bne.n	800560e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	e00f      	b.n	800562e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	440a      	add	r2, r1
 8005624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6919      	ldr	r1, [r3, #16]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	b298      	uxth	r0, r3
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	4603      	mov	r3, r0
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fade 	bl	8005c04 <USB_WritePacket>
 8005648:	e0d2      	b.n	80057f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005664:	0cdb      	lsrs	r3, r3, #19
 8005666:	04db      	lsls	r3, r3, #19
 8005668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005684:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005688:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800568c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d126      	bne.n	80056e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	0148      	lsls	r0, r1, #5
 80056b0:	69f9      	ldr	r1, [r7, #28]
 80056b2:	4401      	add	r1, r0
 80056b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056b8:	4313      	orrs	r3, r2
 80056ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056da:	6113      	str	r3, [r2, #16]
 80056dc:	e03a      	b.n	8005754 <USB_EPStartXfer+0x3e4>
 80056de:	bf00      	nop
 80056e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	1e5a      	subs	r2, r3, #1
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	8afa      	ldrh	r2, [r7, #22]
 8005700:	fb03 f202 	mul.w	r2, r3, r2
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	8afb      	ldrh	r3, [r7, #22]
 8005718:	04d9      	lsls	r1, r3, #19
 800571a:	4b38      	ldr	r3, [pc, #224]	; (80057fc <USB_EPStartXfer+0x48c>)
 800571c:	400b      	ands	r3, r1
 800571e:	69b9      	ldr	r1, [r7, #24]
 8005720:	0148      	lsls	r0, r1, #5
 8005722:	69f9      	ldr	r1, [r7, #28]
 8005724:	4401      	add	r1, r0
 8005726:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800572a:	4313      	orrs	r3, r2
 800572c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005744:	69b9      	ldr	r1, [r7, #24]
 8005746:	0148      	lsls	r0, r1, #5
 8005748:	69f9      	ldr	r1, [r7, #28]
 800574a:	4401      	add	r1, r0
 800574c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005750:	4313      	orrs	r3, r2
 8005752:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d10d      	bne.n	8005776 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6919      	ldr	r1, [r3, #16]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005772:	460a      	mov	r2, r1
 8005774:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	791b      	ldrb	r3, [r3, #4]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d128      	bne.n	80057d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d110      	bne.n	80057b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e00f      	b.n	80057d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	1ff80000 	.word	0x1ff80000

08005800 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	f040 80ce 	bne.w	80059be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d132      	bne.n	8005890 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	440a      	add	r2, r1
 8005840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800584c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	0cdb      	lsrs	r3, r3, #19
 800588a:	04db      	lsls	r3, r3, #19
 800588c:	6113      	str	r3, [r2, #16]
 800588e:	e04e      	b.n	800592e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058aa:	0cdb      	lsrs	r3, r3, #19
 80058ac:	04db      	lsls	r3, r3, #19
 80058ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d903      	bls.n	80058e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800591e:	6939      	ldr	r1, [r7, #16]
 8005920:	0148      	lsls	r0, r1, #5
 8005922:	6979      	ldr	r1, [r7, #20]
 8005924:	4401      	add	r1, r0
 8005926:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800592a:	4313      	orrs	r3, r2
 800592c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d11e      	bne.n	8005972 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	461a      	mov	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	e097      	b.n	8005aa2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005990:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8083 	beq.w	8005aa2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	6979      	ldr	r1, [r7, #20]
 80059b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b8:	4313      	orrs	r3, r2
 80059ba:	634b      	str	r3, [r1, #52]	; 0x34
 80059bc:	e071      	b.n	8005aa2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d8:	0cdb      	lsrs	r3, r3, #19
 80059da:	04db      	lsls	r3, r3, #19
 80059dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a50:	6939      	ldr	r1, [r7, #16]
 8005a52:	0148      	lsls	r0, r1, #5
 8005a54:	6979      	ldr	r1, [r7, #20]
 8005a56:	4401      	add	r1, r0
 8005a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d10d      	bne.n	8005a82 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	460a      	mov	r2, r1
 8005a80:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d14a      	bne.n	8005b64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae6:	f040 8086 	bne.w	8005bf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	7812      	ldrb	r2, [r2, #0]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3301      	adds	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d902      	bls.n	8005b48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
          break;
 8005b46:	e056      	b.n	8005bf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b60:	d0e7      	beq.n	8005b32 <USB_EPStopXfer+0x82>
 8005b62:	e048      	b.n	8005bf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7c:	d13b      	bne.n	8005bf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d902      	bls.n	8005bdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bda:	e00c      	b.n	8005bf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf4:	d0e7      	beq.n	8005bc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	; 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	460b      	mov	r3, r1
 8005c14:	71fb      	strb	r3, [r7, #7]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d123      	bne.n	8005c72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c2a:	88bb      	ldrh	r3, [r7, #4]
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e018      	b.n	8005c6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	031a      	lsls	r2, r3, #12
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c44:	461a      	mov	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3301      	adds	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3301      	adds	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d3e2      	bcc.n	8005c38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3724      	adds	r7, #36	; 0x24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b08b      	sub	sp, #44	; 0x2c
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	089b      	lsrs	r3, r3, #2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	e014      	b.n	8005cd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	3301      	adds	r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	3301      	adds	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	623b      	str	r3, [r7, #32]
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d3e6      	bcc.n	8005cac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cde:	8bfb      	ldrh	r3, [r7, #30]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01e      	beq.n	8005d22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f107 0310 	add.w	r3, r7, #16
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	701a      	strb	r2, [r3, #0]
      i++;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	3301      	adds	r3, #1
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d16:	8bfb      	ldrh	r3, [r7, #30]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d1c:	8bfb      	ldrh	r3, [r7, #30]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1ea      	bne.n	8005cf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	372c      	adds	r7, #44	; 0x2c
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d12c      	bne.n	8005da6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	db12      	blt.n	8005d84 <USB_EPSetStall+0x54>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00f      	beq.n	8005d84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e02b      	b.n	8005dfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db12      	blt.n	8005dde <USB_EPSetStall+0xae>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00f      	beq.n	8005dde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ddc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d128      	bne.n	8005e7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	791b      	ldrb	r3, [r3, #4]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d003      	beq.n	8005e58 <USB_EPClearStall+0x4c>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	791b      	ldrb	r3, [r3, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d138      	bne.n	8005eca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e027      	b.n	8005eca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	791b      	ldrb	r3, [r3, #4]
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d003      	beq.n	8005eaa <USB_EPClearStall+0x9e>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	791b      	ldrb	r3, [r3, #4]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d10f      	bne.n	8005eca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005efa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f0c:	68f9      	ldr	r1, [r7, #12]
 8005f0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f12:	4313      	orrs	r3, r2
 8005f14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	0c1b      	lsrs	r3, r3, #16
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	b29b      	uxth	r3, r3
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b087      	sub	sp, #28
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	01db      	lsls	r3, r3, #7
 8006020:	b2db      	uxtb	r3, r3
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4013      	ands	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800603c:	68bb      	ldr	r3, [r7, #8]
}
 800603e:	4618      	mov	r0, r3
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f003 0301 	and.w	r3, r3, #1
}
 800605a:	4618      	mov	r0, r3
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006080:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006084:	f023 0307 	bic.w	r3, r3, #7
 8006088:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	460b      	mov	r3, r1
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	333c      	adds	r3, #60	; 0x3c
 80060c2:	3304      	adds	r3, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4a26      	ldr	r2, [pc, #152]	; (8006164 <USB_EP0_OutStart+0xb8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d90a      	bls.n	80060e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e0:	d101      	bne.n	80060e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e037      	b.n	8006156 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	461a      	mov	r2, r3
 80060ee:	2300      	movs	r3, #0
 80060f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f043 0318 	orr.w	r3, r3, #24
 8006118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006128:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800612c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d10f      	bne.n	8006154 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006152:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	4f54300a 	.word	0x4f54300a

08006168 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006170:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	4611      	mov	r1, r2
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	4611      	mov	r1, r2
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 f8b2 	bl	8007366 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006210:	461a      	mov	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b02      	cmp	r3, #2
 8006224:	d01a      	beq.n	800625c <USBD_LL_SetupStage+0x72>
 8006226:	2b02      	cmp	r3, #2
 8006228:	d822      	bhi.n	8006270 <USBD_LL_SetupStage+0x86>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <USBD_LL_SetupStage+0x4a>
 800622e:	2b01      	cmp	r3, #1
 8006230:	d00a      	beq.n	8006248 <USBD_LL_SetupStage+0x5e>
 8006232:	e01d      	b.n	8006270 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fb09 	bl	8006854 <USBD_StdDevReq>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
      break;
 8006246:	e020      	b.n	800628a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fb71 	bl	8006938 <USBD_StdItfReq>
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
      break;
 800625a:	e016      	b.n	800628a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fbd3 	bl	8006a10 <USBD_StdEPReq>
 800626a:	4603      	mov	r3, r0
 800626c:	73fb      	strb	r3, [r7, #15]
      break;
 800626e:	e00c      	b.n	800628a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006276:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800627a:	b2db      	uxtb	r3, r3
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fa2c 	bl	80076dc <USBD_LL_StallEP>
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]
      break;
 8006288:	bf00      	nop
  }

  return ret;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	460b      	mov	r3, r1
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80062a6:	7afb      	ldrb	r3, [r7, #11]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d16e      	bne.n	800638a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	f040 8098 	bne.w	80063f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d913      	bls.n	80062f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	1ad2      	subs	r2, r2, r3
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4293      	cmp	r3, r2
 80062e4:	bf28      	it	cs
 80062e6:	4613      	movcs	r3, r2
 80062e8:	461a      	mov	r2, r3
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f001 f8b1 	bl	8007454 <USBD_CtlContinueRx>
 80062f2:	e07d      	b.n	80063f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d014      	beq.n	800632c <USBD_LL_DataOutStage+0x98>
 8006302:	2b02      	cmp	r3, #2
 8006304:	d81d      	bhi.n	8006342 <USBD_LL_DataOutStage+0xae>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <USBD_LL_DataOutStage+0x7c>
 800630a:	2b01      	cmp	r3, #1
 800630c:	d003      	beq.n	8006316 <USBD_LL_DataOutStage+0x82>
 800630e:	e018      	b.n	8006342 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	75bb      	strb	r3, [r7, #22]
            break;
 8006314:	e018      	b.n	8006348 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800631c:	b2db      	uxtb	r3, r3
 800631e:	4619      	mov	r1, r3
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fa5e 	bl	80067e2 <USBD_CoreFindIF>
 8006326:	4603      	mov	r3, r0
 8006328:	75bb      	strb	r3, [r7, #22]
            break;
 800632a:	e00d      	b.n	8006348 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006332:	b2db      	uxtb	r3, r3
 8006334:	4619      	mov	r1, r3
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fa60 	bl	80067fc <USBD_CoreFindEP>
 800633c:	4603      	mov	r3, r0
 800633e:	75bb      	strb	r3, [r7, #22]
            break;
 8006340:	e002      	b.n	8006348 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	75bb      	strb	r3, [r7, #22]
            break;
 8006346:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006348:	7dbb      	ldrb	r3, [r7, #22]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d119      	bne.n	8006382 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b03      	cmp	r3, #3
 8006358:	d113      	bne.n	8006382 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800635a:	7dba      	ldrb	r2, [r7, #22]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	32ae      	adds	r2, #174	; 0xae
 8006360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800636a:	7dba      	ldrb	r2, [r7, #22]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006372:	7dba      	ldrb	r2, [r7, #22]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	32ae      	adds	r2, #174	; 0xae
 8006378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f001 f877 	bl	8007476 <USBD_CtlSendStatus>
 8006388:	e032      	b.n	80063f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006390:	b2db      	uxtb	r3, r3
 8006392:	4619      	mov	r1, r3
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fa31 	bl	80067fc <USBD_CoreFindEP>
 800639a:	4603      	mov	r3, r0
 800639c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800639e:	7dbb      	ldrb	r3, [r7, #22]
 80063a0:	2bff      	cmp	r3, #255	; 0xff
 80063a2:	d025      	beq.n	80063f0 <USBD_LL_DataOutStage+0x15c>
 80063a4:	7dbb      	ldrb	r3, [r7, #22]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d122      	bne.n	80063f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d117      	bne.n	80063e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063b6:	7dba      	ldrb	r2, [r7, #22]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	32ae      	adds	r2, #174	; 0xae
 80063bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00f      	beq.n	80063e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063c6:	7dba      	ldrb	r2, [r7, #22]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063ce:	7dba      	ldrb	r2, [r7, #22]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	32ae      	adds	r2, #174	; 0xae
 80063d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	7afa      	ldrb	r2, [r7, #11]
 80063dc:	4611      	mov	r1, r2
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	4798      	blx	r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
 80063ee:	e000      	b.n	80063f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b086      	sub	sp, #24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	460b      	mov	r3, r1
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006408:	7afb      	ldrb	r3, [r7, #11]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d16f      	bne.n	80064ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3314      	adds	r3, #20
 8006412:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800641a:	2b02      	cmp	r3, #2
 800641c:	d15a      	bne.n	80064d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	429a      	cmp	r2, r3
 8006428:	d914      	bls.n	8006454 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	461a      	mov	r2, r3
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fff6 	bl	8007432 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006446:	2300      	movs	r3, #0
 8006448:	2200      	movs	r2, #0
 800644a:	2100      	movs	r1, #0
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f001 f9ef 	bl	8007830 <USBD_LL_PrepareReceive>
 8006452:	e03f      	b.n	80064d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	d11c      	bne.n	800649a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006468:	429a      	cmp	r2, r3
 800646a:	d316      	bcc.n	800649a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006476:	429a      	cmp	r2, r3
 8006478:	d20f      	bcs.n	800649a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800647a:	2200      	movs	r2, #0
 800647c:	2100      	movs	r1, #0
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 ffd7 	bl	8007432 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800648c:	2300      	movs	r3, #0
 800648e:	2200      	movs	r2, #0
 8006490:	2100      	movs	r1, #0
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f001 f9cc 	bl	8007830 <USBD_LL_PrepareReceive>
 8006498:	e01c      	b.n	80064d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d10f      	bne.n	80064c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 f907 	bl	80076dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 ffe4 	bl	800749c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d03a      	beq.n	8006554 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff fe42 	bl	8006168 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80064ec:	e032      	b.n	8006554 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f97f 	bl	80067fc <USBD_CoreFindEP>
 80064fe:	4603      	mov	r3, r0
 8006500:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	2bff      	cmp	r3, #255	; 0xff
 8006506:	d025      	beq.n	8006554 <USBD_LL_DataInStage+0x15a>
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d122      	bne.n	8006554 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b03      	cmp	r3, #3
 8006518:	d11c      	bne.n	8006554 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800651a:	7dfa      	ldrb	r2, [r7, #23]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	32ae      	adds	r2, #174	; 0xae
 8006520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d014      	beq.n	8006554 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800652a:	7dfa      	ldrb	r2, [r7, #23]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006532:	7dfa      	ldrb	r2, [r7, #23]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	32ae      	adds	r2, #174	; 0xae
 8006538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	7afa      	ldrb	r2, [r7, #11]
 8006540:	4611      	mov	r1, r2
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	4798      	blx	r3
 8006546:	4603      	mov	r3, r0
 8006548:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800654a:	7dbb      	ldrb	r3, [r7, #22]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006550:	7dbb      	ldrb	r3, [r7, #22]
 8006552:	e000      	b.n	8006556 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d014      	beq.n	80065c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6852      	ldr	r2, [r2, #4]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	4611      	mov	r1, r2
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065c0:	2303      	movs	r3, #3
 80065c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	2200      	movs	r2, #0
 80065c8:	2100      	movs	r1, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 f860 	bl	8007690 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2240      	movs	r2, #64	; 0x40
 80065dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	2200      	movs	r2, #0
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f852 	bl	8007690 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2240      	movs	r2, #64	; 0x40
 80065f6:	621a      	str	r2, [r3, #32]

  return ret;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	78fa      	ldrb	r2, [r7, #3]
 8006612:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006630:	b2da      	uxtb	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2204      	movs	r2, #4
 800663c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b04      	cmp	r3, #4
 8006660:	d106      	bne.n	8006670 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b03      	cmp	r3, #3
 8006690:	d110      	bne.n	80066b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	32ae      	adds	r2, #174	; 0xae
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	e01c      	b.n	800671a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d115      	bne.n	8006718 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32ae      	adds	r2, #174	; 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	32ae      	adds	r2, #174	; 0xae
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	78fa      	ldrb	r2, [r7, #3]
 8006712:	4611      	mov	r1, r2
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	32ae      	adds	r2, #174	; 0xae
 8006738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e01c      	b.n	800677e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b03      	cmp	r3, #3
 800674e:	d115      	bne.n	800677c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	32ae      	adds	r2, #174	; 0xae
 800675a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32ae      	adds	r2, #174	; 0xae
 800676e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	4611      	mov	r1, r2
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00e      	beq.n	80067d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6852      	ldr	r2, [r2, #4]
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	4611      	mov	r1, r2
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006808:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	3301      	adds	r3, #1
 800682c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006834:	8a3b      	ldrh	r3, [r7, #16]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	b21a      	sxth	r2, r3
 800683a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800683e:	4313      	orrs	r3, r2
 8006840:	b21b      	sxth	r3, r3
 8006842:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006844:	89fb      	ldrh	r3, [r7, #14]
}
 8006846:	4618      	mov	r0, r3
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d005      	beq.n	800687a <USBD_StdDevReq+0x26>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d857      	bhi.n	8006922 <USBD_StdDevReq+0xce>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00f      	beq.n	8006896 <USBD_StdDevReq+0x42>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d153      	bne.n	8006922 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	32ae      	adds	r2, #174	; 0xae
 8006884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
      break;
 8006894:	e04a      	b.n	800692c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	785b      	ldrb	r3, [r3, #1]
 800689a:	2b09      	cmp	r3, #9
 800689c:	d83b      	bhi.n	8006916 <USBD_StdDevReq+0xc2>
 800689e:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <USBD_StdDevReq+0x50>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	0800690d 	.word	0x0800690d
 80068ac:	08006917 	.word	0x08006917
 80068b0:	08006903 	.word	0x08006903
 80068b4:	08006917 	.word	0x08006917
 80068b8:	080068d7 	.word	0x080068d7
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	08006917 	.word	0x08006917
 80068c4:	080068ef 	.word	0x080068ef
 80068c8:	080068e1 	.word	0x080068e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa3c 	bl	8006d4c <USBD_GetDescriptor>
          break;
 80068d4:	e024      	b.n	8006920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fba1 	bl	8007020 <USBD_SetAddress>
          break;
 80068de:	e01f      	b.n	8006920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fbe0 	bl	80070a8 <USBD_SetConfig>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]
          break;
 80068ec:	e018      	b.n	8006920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fc83 	bl	80071fc <USBD_GetConfig>
          break;
 80068f6:	e013      	b.n	8006920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fcb4 	bl	8007268 <USBD_GetStatus>
          break;
 8006900:	e00e      	b.n	8006920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fce3 	bl	80072d0 <USBD_SetFeature>
          break;
 800690a:	e009      	b.n	8006920 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fd07 	bl	8007322 <USBD_ClrFeature>
          break;
 8006914:	e004      	b.n	8006920 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fd5e 	bl	80073da <USBD_CtlError>
          break;
 800691e:	bf00      	nop
      }
      break;
 8006920:	e004      	b.n	800692c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fd58 	bl	80073da <USBD_CtlError>
      break;
 800692a:	bf00      	nop
  }

  return ret;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d005      	beq.n	800695e <USBD_StdItfReq+0x26>
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	d852      	bhi.n	80069fc <USBD_StdItfReq+0xc4>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <USBD_StdItfReq+0x26>
 800695a:	2b20      	cmp	r3, #32
 800695c:	d14e      	bne.n	80069fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006964:	b2db      	uxtb	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	2b02      	cmp	r3, #2
 800696a:	d840      	bhi.n	80069ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	889b      	ldrh	r3, [r3, #4]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d836      	bhi.n	80069e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	889b      	ldrh	r3, [r3, #4]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff ff2f 	bl	80067e2 <USBD_CoreFindIF>
 8006984:	4603      	mov	r3, r0
 8006986:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	2bff      	cmp	r3, #255	; 0xff
 800698c:	d01d      	beq.n	80069ca <USBD_StdItfReq+0x92>
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11a      	bne.n	80069ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006994:	7bba      	ldrb	r2, [r7, #14]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	; 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00f      	beq.n	80069c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80069a4:	7bba      	ldrb	r2, [r7, #14]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069ac:	7bba      	ldrb	r2, [r7, #14]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	32ae      	adds	r2, #174	; 0xae
 80069b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069c2:	e004      	b.n	80069ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069c8:	e001      	b.n	80069ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	88db      	ldrh	r3, [r3, #6]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d110      	bne.n	80069f8 <USBD_StdItfReq+0xc0>
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10d      	bne.n	80069f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fd4a 	bl	8007476 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069e2:	e009      	b.n	80069f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fcf7 	bl	80073da <USBD_CtlError>
          break;
 80069ec:	e004      	b.n	80069f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fcf2 	bl	80073da <USBD_CtlError>
          break;
 80069f6:	e000      	b.n	80069fa <USBD_StdItfReq+0xc2>
          break;
 80069f8:	bf00      	nop
      }
      break;
 80069fa:	e004      	b.n	8006a06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fceb 	bl	80073da <USBD_CtlError>
      break;
 8006a04:	bf00      	nop
  }

  return ret;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	889b      	ldrh	r3, [r3, #4]
 8006a22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	d007      	beq.n	8006a40 <USBD_StdEPReq+0x30>
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	f200 817f 	bhi.w	8006d34 <USBD_StdEPReq+0x324>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d02a      	beq.n	8006a90 <USBD_StdEPReq+0x80>
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	f040 817a 	bne.w	8006d34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff fed9 	bl	80067fc <USBD_CoreFindEP>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a4e:	7b7b      	ldrb	r3, [r7, #13]
 8006a50:	2bff      	cmp	r3, #255	; 0xff
 8006a52:	f000 8174 	beq.w	8006d3e <USBD_StdEPReq+0x32e>
 8006a56:	7b7b      	ldrb	r3, [r7, #13]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 8170 	bne.w	8006d3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a5e:	7b7a      	ldrb	r2, [r7, #13]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a66:	7b7a      	ldrb	r2, [r7, #13]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	32ae      	adds	r2, #174	; 0xae
 8006a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8163 	beq.w	8006d3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a78:	7b7a      	ldrb	r2, [r7, #13]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	32ae      	adds	r2, #174	; 0xae
 8006a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a8e:	e156      	b.n	8006d3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d008      	beq.n	8006aaa <USBD_StdEPReq+0x9a>
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	f300 8145 	bgt.w	8006d28 <USBD_StdEPReq+0x318>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 809b 	beq.w	8006bda <USBD_StdEPReq+0x1ca>
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d03c      	beq.n	8006b22 <USBD_StdEPReq+0x112>
 8006aa8:	e13e      	b.n	8006d28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d002      	beq.n	8006abc <USBD_StdEPReq+0xac>
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d016      	beq.n	8006ae8 <USBD_StdEPReq+0xd8>
 8006aba:	e02c      	b.n	8006b16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00d      	beq.n	8006ade <USBD_StdEPReq+0xce>
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	2b80      	cmp	r3, #128	; 0x80
 8006ac6:	d00a      	beq.n	8006ade <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fe05 	bl	80076dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fe01 	bl	80076dc <USBD_LL_StallEP>
 8006ada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006adc:	e020      	b.n	8006b20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fc7a 	bl	80073da <USBD_CtlError>
              break;
 8006ae6:	e01b      	b.n	8006b20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	885b      	ldrh	r3, [r3, #2]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10e      	bne.n	8006b0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00b      	beq.n	8006b0e <USBD_StdEPReq+0xfe>
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d008      	beq.n	8006b0e <USBD_StdEPReq+0xfe>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	88db      	ldrh	r3, [r3, #6]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fde7 	bl	80076dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fcb1 	bl	8007476 <USBD_CtlSendStatus>

              break;
 8006b14:	e004      	b.n	8006b20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fc5e 	bl	80073da <USBD_CtlError>
              break;
 8006b1e:	bf00      	nop
          }
          break;
 8006b20:	e107      	b.n	8006d32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d002      	beq.n	8006b34 <USBD_StdEPReq+0x124>
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d016      	beq.n	8006b60 <USBD_StdEPReq+0x150>
 8006b32:	e04b      	b.n	8006bcc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00d      	beq.n	8006b56 <USBD_StdEPReq+0x146>
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b80      	cmp	r3, #128	; 0x80
 8006b3e:	d00a      	beq.n	8006b56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fdc9 	bl	80076dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b4a:	2180      	movs	r1, #128	; 0x80
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fdc5 	bl	80076dc <USBD_LL_StallEP>
 8006b52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b54:	e040      	b.n	8006bd8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fc3e 	bl	80073da <USBD_CtlError>
              break;
 8006b5e:	e03b      	b.n	8006bd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	885b      	ldrh	r3, [r3, #2]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d136      	bne.n	8006bd6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fdcf 	bl	800771a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fc7a 	bl	8007476 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff fe38 	bl	80067fc <USBD_CoreFindEP>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b90:	7b7b      	ldrb	r3, [r7, #13]
 8006b92:	2bff      	cmp	r3, #255	; 0xff
 8006b94:	d01f      	beq.n	8006bd6 <USBD_StdEPReq+0x1c6>
 8006b96:	7b7b      	ldrb	r3, [r7, #13]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d11c      	bne.n	8006bd6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b9c:	7b7a      	ldrb	r2, [r7, #13]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ba4:	7b7a      	ldrb	r2, [r7, #13]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	32ae      	adds	r2, #174	; 0xae
 8006baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d010      	beq.n	8006bd6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bb4:	7b7a      	ldrb	r2, [r7, #13]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	32ae      	adds	r2, #174	; 0xae
 8006bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006bca:	e004      	b.n	8006bd6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fc03 	bl	80073da <USBD_CtlError>
              break;
 8006bd4:	e000      	b.n	8006bd8 <USBD_StdEPReq+0x1c8>
              break;
 8006bd6:	bf00      	nop
          }
          break;
 8006bd8:	e0ab      	b.n	8006d32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d002      	beq.n	8006bec <USBD_StdEPReq+0x1dc>
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d032      	beq.n	8006c50 <USBD_StdEPReq+0x240>
 8006bea:	e097      	b.n	8006d1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <USBD_StdEPReq+0x1f2>
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d004      	beq.n	8006c02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fbed 	bl	80073da <USBD_CtlError>
                break;
 8006c00:	e091      	b.n	8006d26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da0b      	bge.n	8006c22 <USBD_StdEPReq+0x212>
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	3310      	adds	r3, #16
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3304      	adds	r3, #4
 8006c20:	e00b      	b.n	8006c3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4413      	add	r3, r2
 8006c38:	3304      	adds	r3, #4
 8006c3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2202      	movs	r2, #2
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fbd7 	bl	80073fc <USBD_CtlSendData>
              break;
 8006c4e:	e06a      	b.n	8006d26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da11      	bge.n	8006c7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	f003 020f 	and.w	r2, r3, #15
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	3324      	adds	r3, #36	; 0x24
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d117      	bne.n	8006ca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fbb0 	bl	80073da <USBD_CtlError>
                  break;
 8006c7a:	e054      	b.n	8006d26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	f003 020f 	and.w	r2, r3, #15
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fb9d 	bl	80073da <USBD_CtlError>
                  break;
 8006ca0:	e041      	b.n	8006d26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da0b      	bge.n	8006cc2 <USBD_StdEPReq+0x2b2>
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	3310      	adds	r3, #16
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	e00b      	b.n	8006cda <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3304      	adds	r3, #4
 8006cda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <USBD_StdEPReq+0x2d8>
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	2b80      	cmp	r3, #128	; 0x80
 8006ce6:	d103      	bne.n	8006cf0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e00e      	b.n	8006d0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fd2f 	bl	8007758 <USBD_LL_IsStallEP>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e002      	b.n	8006d0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2202      	movs	r2, #2
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fb71 	bl	80073fc <USBD_CtlSendData>
              break;
 8006d1a:	e004      	b.n	8006d26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fb5b 	bl	80073da <USBD_CtlError>
              break;
 8006d24:	bf00      	nop
          }
          break;
 8006d26:	e004      	b.n	8006d32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fb55 	bl	80073da <USBD_CtlError>
          break;
 8006d30:	bf00      	nop
      }
      break;
 8006d32:	e005      	b.n	8006d40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fb4f 	bl	80073da <USBD_CtlError>
      break;
 8006d3c:	e000      	b.n	8006d40 <USBD_StdEPReq+0x330>
      break;
 8006d3e:	bf00      	nop
  }

  return ret;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	885b      	ldrh	r3, [r3, #2]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	2b06      	cmp	r3, #6
 8006d6e:	f200 8128 	bhi.w	8006fc2 <USBD_GetDescriptor+0x276>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <USBD_GetDescriptor+0x2c>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	08006dad 	.word	0x08006dad
 8006d80:	08006ded 	.word	0x08006ded
 8006d84:	08006fc3 	.word	0x08006fc3
 8006d88:	08006fc3 	.word	0x08006fc3
 8006d8c:	08006f63 	.word	0x08006f63
 8006d90:	08006f8f 	.word	0x08006f8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	7c12      	ldrb	r2, [r2, #16]
 8006da0:	f107 0108 	add.w	r1, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
      break;
 8006daa:	e112      	b.n	8006fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	7c1b      	ldrb	r3, [r3, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10d      	bne.n	8006dd0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	f107 0208 	add.w	r2, r7, #8
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	2202      	movs	r2, #2
 8006dcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dce:	e100      	b.n	8006fd2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	f107 0208 	add.w	r2, r7, #8
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4798      	blx	r3
 8006de0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	2202      	movs	r2, #2
 8006de8:	701a      	strb	r2, [r3, #0]
      break;
 8006dea:	e0f2      	b.n	8006fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	885b      	ldrh	r3, [r3, #2]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b05      	cmp	r3, #5
 8006df4:	f200 80ac 	bhi.w	8006f50 <USBD_GetDescriptor+0x204>
 8006df8:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <USBD_GetDescriptor+0xb4>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e19 	.word	0x08006e19
 8006e04:	08006e4d 	.word	0x08006e4d
 8006e08:	08006e81 	.word	0x08006e81
 8006e0c:	08006eb5 	.word	0x08006eb5
 8006e10:	08006ee9 	.word	0x08006ee9
 8006e14:	08006f1d 	.word	0x08006f1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	7c12      	ldrb	r2, [r2, #16]
 8006e30:	f107 0108 	add.w	r1, r7, #8
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
 8006e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e3a:	e091      	b.n	8006f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 facb 	bl	80073da <USBD_CtlError>
            err++;
 8006e44:	7afb      	ldrb	r3, [r7, #11]
 8006e46:	3301      	adds	r3, #1
 8006e48:	72fb      	strb	r3, [r7, #11]
          break;
 8006e4a:	e089      	b.n	8006f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	7c12      	ldrb	r2, [r2, #16]
 8006e64:	f107 0108 	add.w	r1, r7, #8
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4798      	blx	r3
 8006e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e6e:	e077      	b.n	8006f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fab1 	bl	80073da <USBD_CtlError>
            err++;
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e7e:	e06f      	b.n	8006f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7c12      	ldrb	r2, [r2, #16]
 8006e98:	f107 0108 	add.w	r1, r7, #8
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea2:	e05d      	b.n	8006f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa97 	bl	80073da <USBD_CtlError>
            err++;
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006eb2:	e055      	b.n	8006f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	7c12      	ldrb	r2, [r2, #16]
 8006ecc:	f107 0108 	add.w	r1, r7, #8
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ed6:	e043      	b.n	8006f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa7d 	bl	80073da <USBD_CtlError>
            err++;
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ee6:	e03b      	b.n	8006f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	7c12      	ldrb	r2, [r2, #16]
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0a:	e029      	b.n	8006f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa63 	bl	80073da <USBD_CtlError>
            err++;
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	3301      	adds	r3, #1
 8006f18:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1a:	e021      	b.n	8006f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f3e:	e00f      	b.n	8006f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa49 	bl	80073da <USBD_CtlError>
            err++;
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f4e:	e007      	b.n	8006f60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa41 	bl	80073da <USBD_CtlError>
          err++;
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f5e:	bf00      	nop
      }
      break;
 8006f60:	e037      	b.n	8006fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7c1b      	ldrb	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f72:	f107 0208 	add.w	r2, r7, #8
 8006f76:	4610      	mov	r0, r2
 8006f78:	4798      	blx	r3
 8006f7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f7c:	e029      	b.n	8006fd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fa2a 	bl	80073da <USBD_CtlError>
        err++;
 8006f86:	7afb      	ldrb	r3, [r7, #11]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f8c:	e021      	b.n	8006fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	7c1b      	ldrb	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10d      	bne.n	8006fb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	f107 0208 	add.w	r2, r7, #8
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4798      	blx	r3
 8006fa6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3301      	adds	r3, #1
 8006fac:	2207      	movs	r2, #7
 8006fae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fb0:	e00f      	b.n	8006fd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa10 	bl	80073da <USBD_CtlError>
        err++;
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8006fc0:	e007      	b.n	8006fd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fa08 	bl	80073da <USBD_CtlError>
      err++;
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	72fb      	strb	r3, [r7, #11]
      break;
 8006fd0:	bf00      	nop
  }

  if (err != 0U)
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d11e      	bne.n	8007016 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	88db      	ldrh	r3, [r3, #6]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d016      	beq.n	800700e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fe0:	893b      	ldrh	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00e      	beq.n	8007004 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	88da      	ldrh	r2, [r3, #6]
 8006fea:	893b      	ldrh	r3, [r7, #8]
 8006fec:	4293      	cmp	r3, r2
 8006fee:	bf28      	it	cs
 8006ff0:	4613      	movcs	r3, r2
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ff6:	893b      	ldrh	r3, [r7, #8]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68f9      	ldr	r1, [r7, #12]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9fd 	bl	80073fc <USBD_CtlSendData>
 8007002:	e009      	b.n	8007018 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f9e7 	bl	80073da <USBD_CtlError>
 800700c:	e004      	b.n	8007018 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa31 	bl	8007476 <USBD_CtlSendStatus>
 8007014:	e000      	b.n	8007018 <USBD_GetDescriptor+0x2cc>
    return;
 8007016:	bf00      	nop
  }
}
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	889b      	ldrh	r3, [r3, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d131      	bne.n	8007096 <USBD_SetAddress+0x76>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	88db      	ldrh	r3, [r3, #6]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d12d      	bne.n	8007096 <USBD_SetAddress+0x76>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	885b      	ldrh	r3, [r3, #2]
 800703e:	2b7f      	cmp	r3, #127	; 0x7f
 8007040:	d829      	bhi.n	8007096 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b03      	cmp	r3, #3
 8007058:	d104      	bne.n	8007064 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f9bc 	bl	80073da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007062:	e01d      	b.n	80070a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	7bfa      	ldrb	r2, [r7, #15]
 8007068:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fb9d 	bl	80077b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9fd 	bl	8007476 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708a:	e009      	b.n	80070a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007094:	e004      	b.n	80070a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f99e 	bl	80073da <USBD_CtlError>
  }
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	885b      	ldrh	r3, [r3, #2]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	4b4e      	ldr	r3, [pc, #312]	; (80071f8 <USBD_SetConfig+0x150>)
 80070be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070c0:	4b4d      	ldr	r3, [pc, #308]	; (80071f8 <USBD_SetConfig+0x150>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d905      	bls.n	80070d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f985 	bl	80073da <USBD_CtlError>
    return USBD_FAIL;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e08c      	b.n	80071ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d002      	beq.n	80070e6 <USBD_SetConfig+0x3e>
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d029      	beq.n	8007138 <USBD_SetConfig+0x90>
 80070e4:	e075      	b.n	80071d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070e6:	4b44      	ldr	r3, [pc, #272]	; (80071f8 <USBD_SetConfig+0x150>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d020      	beq.n	8007130 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070ee:	4b42      	ldr	r3, [pc, #264]	; (80071f8 <USBD_SetConfig+0x150>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070f8:	4b3f      	ldr	r3, [pc, #252]	; (80071f8 <USBD_SetConfig+0x150>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff f83d 	bl	800617e <USBD_SetClassConfig>
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d008      	beq.n	8007120 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f962 	bl	80073da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800711e:	e065      	b.n	80071ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f9a8 	bl	8007476 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2203      	movs	r2, #3
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800712e:	e05d      	b.n	80071ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f9a0 	bl	8007476 <USBD_CtlSendStatus>
      break;
 8007136:	e059      	b.n	80071ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007138:	4b2f      	ldr	r3, [pc, #188]	; (80071f8 <USBD_SetConfig+0x150>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d112      	bne.n	8007166 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007148:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <USBD_SetConfig+0x150>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007152:	4b29      	ldr	r3, [pc, #164]	; (80071f8 <USBD_SetConfig+0x150>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff f82c 	bl	80061b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f989 	bl	8007476 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007164:	e042      	b.n	80071ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007166:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <USBD_SetConfig+0x150>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d02a      	beq.n	80071ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff f81a 	bl	80061b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007182:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <USBD_SetConfig+0x150>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800718c:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <USBD_SetConfig+0x150>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fe fff3 	bl	800617e <USBD_SetClassConfig>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00f      	beq.n	80071c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f918 	bl	80073da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fe ffff 	bl	80061b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071c0:	e014      	b.n	80071ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f957 	bl	8007476 <USBD_CtlSendStatus>
      break;
 80071c8:	e010      	b.n	80071ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f953 	bl	8007476 <USBD_CtlSendStatus>
      break;
 80071d0:	e00c      	b.n	80071ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f900 	bl	80073da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071da:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <USBD_SetConfig+0x150>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7fe ffe8 	bl	80061b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071e6:	2303      	movs	r3, #3
 80071e8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ea:	bf00      	nop
  }

  return ret;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200001a0 	.word	0x200001a0

080071fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d004      	beq.n	8007218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f8e2 	bl	80073da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007216:	e023      	b.n	8007260 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	dc02      	bgt.n	800722a <USBD_GetConfig+0x2e>
 8007224:	2b00      	cmp	r3, #0
 8007226:	dc03      	bgt.n	8007230 <USBD_GetConfig+0x34>
 8007228:	e015      	b.n	8007256 <USBD_GetConfig+0x5a>
 800722a:	2b03      	cmp	r3, #3
 800722c:	d00b      	beq.n	8007246 <USBD_GetConfig+0x4a>
 800722e:	e012      	b.n	8007256 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3308      	adds	r3, #8
 800723a:	2201      	movs	r2, #1
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8dc 	bl	80073fc <USBD_CtlSendData>
        break;
 8007244:	e00c      	b.n	8007260 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	2201      	movs	r2, #1
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f8d4 	bl	80073fc <USBD_CtlSendData>
        break;
 8007254:	e004      	b.n	8007260 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f8be 	bl	80073da <USBD_CtlError>
        break;
 800725e:	bf00      	nop
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007278:	b2db      	uxtb	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	2b02      	cmp	r3, #2
 800727e:	d81e      	bhi.n	80072be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	88db      	ldrh	r3, [r3, #6]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d004      	beq.n	8007292 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8a5 	bl	80073da <USBD_CtlError>
        break;
 8007290:	e01a      	b.n	80072c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f043 0202 	orr.w	r2, r3, #2
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	330c      	adds	r3, #12
 80072b2:	2202      	movs	r2, #2
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8a0 	bl	80073fc <USBD_CtlSendData>
      break;
 80072bc:	e004      	b.n	80072c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f88a 	bl	80073da <USBD_CtlError>
      break;
 80072c6:	bf00      	nop
  }
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d107      	bne.n	80072f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f8c3 	bl	8007476 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072f0:	e013      	b.n	800731a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	885b      	ldrh	r3, [r3, #2]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d10b      	bne.n	8007312 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	889b      	ldrh	r3, [r3, #4]
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	b29b      	uxth	r3, r3
 8007302:	b2da      	uxtb	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f8b3 	bl	8007476 <USBD_CtlSendStatus>
}
 8007310:	e003      	b.n	800731a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f860 	bl	80073da <USBD_CtlError>
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007332:	b2db      	uxtb	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	2b02      	cmp	r3, #2
 8007338:	d80b      	bhi.n	8007352 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	885b      	ldrh	r3, [r3, #2]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d10c      	bne.n	800735c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f893 	bl	8007476 <USBD_CtlSendStatus>
      }
      break;
 8007350:	e004      	b.n	800735c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f840 	bl	80073da <USBD_CtlError>
      break;
 800735a:	e000      	b.n	800735e <USBD_ClrFeature+0x3c>
      break;
 800735c:	bf00      	nop
  }
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3301      	adds	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff fa40 	bl	8006816 <SWAPBYTE>
 8007396:	4603      	mov	r3, r0
 8007398:	461a      	mov	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3301      	adds	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff fa33 	bl	8006816 <SWAPBYTE>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3301      	adds	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff fa26 	bl	8006816 <SWAPBYTE>
 80073ca:	4603      	mov	r3, r0
 80073cc:	461a      	mov	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	80da      	strh	r2, [r3, #6]
}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073e4:	2180      	movs	r1, #128	; 0x80
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f978 	bl	80076dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073ec:	2100      	movs	r1, #0
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f974 	bl	80076dc <USBD_LL_StallEP>
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2202      	movs	r2, #2
 800740c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	2100      	movs	r1, #0
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f9e3 	bl	80077ee <USBD_LL_Transmit>

  return USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	2100      	movs	r1, #0
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f9d2 	bl	80077ee <USBD_LL_Transmit>

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	2100      	movs	r1, #0
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 f9e2 	bl	8007830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2204      	movs	r2, #4
 8007482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007486:	2300      	movs	r3, #0
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9ae 	bl	80077ee <USBD_LL_Transmit>

  return USBD_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2205      	movs	r2, #5
 80074a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074ac:	2300      	movs	r3, #0
 80074ae:	2200      	movs	r2, #0
 80074b0:	2100      	movs	r1, #0
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f9bc 	bl	8007830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7fe fe86 	bl	80061ea <USBD_LL_SetupStage>
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	4613      	mov	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	4619      	mov	r1, r3
 8007510:	f7fe fec0 	bl	8006294 <USBD_LL_DataOutStage>
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800752e:	78fa      	ldrb	r2, [r7, #3]
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	334c      	adds	r3, #76	; 0x4c
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	4619      	mov	r1, r3
 8007544:	f7fe ff59 	bl	80063fa <USBD_LL_DataInStage>
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff f88d 	bl	800667e <USBD_LL_SOF>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007574:	2301      	movs	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d001      	beq.n	8007584 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007580:	f7f9 fe12 	bl	80011a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800758a:	7bfa      	ldrb	r2, [r7, #15]
 800758c:	4611      	mov	r1, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff f837 	bl	8006602 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe ffdf 	bl	800655e <USBD_LL_Reset>
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff f833 	bl	8006622 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075dc:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <HAL_PCD_SuspendCallback+0x48>)
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	4a03      	ldr	r2, [pc, #12]	; (80075f0 <HAL_PCD_SuspendCallback+0x48>)
 80075e2:	f043 0306 	orr.w	r3, r3, #6
 80075e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	e000ed00 	.word	0xe000ed00

080075f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff f823 	bl	800664e <USBD_LL_Resume>
}
 8007608:	bf00      	nop
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007622:	78fa      	ldrb	r2, [r7, #3]
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff f87b 	bl	8006722 <USBD_LL_IsoOUTIncomplete>
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff f837 	bl	80066be <USBD_LL_IsoINIncomplete>
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff f88d 	bl	8006786 <USBD_LL_DevConnected>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff f88a 	bl	800679c <USBD_LL_DevDisconnected>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	4608      	mov	r0, r1
 800769a:	4611      	mov	r1, r2
 800769c:	461a      	mov	r2, r3
 800769e:	4603      	mov	r3, r0
 80076a0:	70fb      	strb	r3, [r7, #3]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70bb      	strb	r3, [r7, #2]
 80076a6:	4613      	mov	r3, r2
 80076a8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076b8:	78bb      	ldrb	r3, [r7, #2]
 80076ba:	883a      	ldrh	r2, [r7, #0]
 80076bc:	78f9      	ldrb	r1, [r7, #3]
 80076be:	f7fb f83b 	bl	8002738 <HAL_PCD_EP_Open>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 f8d3 	bl	8007874 <USBD_Get_USB_Status>
 80076ce:	4603      	mov	r3, r0
 80076d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fb f919 	bl	8002932 <HAL_PCD_EP_SetStall>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f8b4 	bl	8007874 <USBD_Get_USB_Status>
 800770c:	4603      	mov	r3, r0
 800770e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007710:	7bbb      	ldrb	r3, [r7, #14]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	4611      	mov	r1, r2
 8007738:	4618      	mov	r0, r3
 800773a:	f7fb f95e 	bl	80029fa <HAL_PCD_EP_ClrStall>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f895 	bl	8007874 <USBD_Get_USB_Status>
 800774a:	4603      	mov	r3, r0
 800774c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800776a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800776c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007770:	2b00      	cmp	r3, #0
 8007772:	da0b      	bge.n	800778c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	333e      	adds	r3, #62	; 0x3e
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	e00b      	b.n	80077a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	4613      	mov	r3, r2
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80077a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ca:	78fa      	ldrb	r2, [r7, #3]
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fa ff8d 	bl	80026ee <HAL_PCD_SetAddress>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f84a 	bl	8007874 <USBD_Get_USB_Status>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
 80077fa:	460b      	mov	r3, r1
 80077fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800780c:	7af9      	ldrb	r1, [r7, #11]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	f7fb f844 	bl	800289e <HAL_PCD_EP_Transmit>
 8007816:	4603      	mov	r3, r0
 8007818:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 f829 	bl	8007874 <USBD_Get_USB_Status>
 8007822:	4603      	mov	r3, r0
 8007824:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007826:	7dbb      	ldrb	r3, [r7, #22]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	460b      	mov	r3, r1
 800783e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800784e:	7af9      	ldrb	r1, [r7, #11]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	f7fa ffd8 	bl	8002808 <HAL_PCD_EP_Receive>
 8007858:	4603      	mov	r3, r0
 800785a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	4618      	mov	r0, r3
 8007860:	f000 f808 	bl	8007874 <USBD_Get_USB_Status>
 8007864:	4603      	mov	r3, r0
 8007866:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007868:	7dbb      	ldrb	r3, [r7, #22]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d817      	bhi.n	80078b8 <USBD_Get_USB_Status+0x44>
 8007888:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <USBD_Get_USB_Status+0x1c>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078a1 	.word	0x080078a1
 8007894:	080078a7 	.word	0x080078a7
 8007898:	080078ad 	.word	0x080078ad
 800789c:	080078b3 	.word	0x080078b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
    break;
 80078a4:	e00b      	b.n	80078be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	73fb      	strb	r3, [r7, #15]
    break;
 80078aa:	e008      	b.n	80078be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078ac:	2301      	movs	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
    break;
 80078b0:	e005      	b.n	80078be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078b2:	2303      	movs	r3, #3
 80078b4:	73fb      	strb	r3, [r7, #15]
    break;
 80078b6:	e002      	b.n	80078be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	73fb      	strb	r3, [r7, #15]
    break;
 80078bc:	bf00      	nop
  }
  return usb_status;
 80078be:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <__libc_init_array>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4d0d      	ldr	r5, [pc, #52]	; (8007904 <__libc_init_array+0x38>)
 80078d0:	4c0d      	ldr	r4, [pc, #52]	; (8007908 <__libc_init_array+0x3c>)
 80078d2:	1b64      	subs	r4, r4, r5
 80078d4:	10a4      	asrs	r4, r4, #2
 80078d6:	2600      	movs	r6, #0
 80078d8:	42a6      	cmp	r6, r4
 80078da:	d109      	bne.n	80078f0 <__libc_init_array+0x24>
 80078dc:	4d0b      	ldr	r5, [pc, #44]	; (800790c <__libc_init_array+0x40>)
 80078de:	4c0c      	ldr	r4, [pc, #48]	; (8007910 <__libc_init_array+0x44>)
 80078e0:	f000 f820 	bl	8007924 <_init>
 80078e4:	1b64      	subs	r4, r4, r5
 80078e6:	10a4      	asrs	r4, r4, #2
 80078e8:	2600      	movs	r6, #0
 80078ea:	42a6      	cmp	r6, r4
 80078ec:	d105      	bne.n	80078fa <__libc_init_array+0x2e>
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f4:	4798      	blx	r3
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7ee      	b.n	80078d8 <__libc_init_array+0xc>
 80078fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80078fe:	4798      	blx	r3
 8007900:	3601      	adds	r6, #1
 8007902:	e7f2      	b.n	80078ea <__libc_init_array+0x1e>
 8007904:	08007954 	.word	0x08007954
 8007908:	08007954 	.word	0x08007954
 800790c:	08007954 	.word	0x08007954
 8007910:	08007958 	.word	0x08007958

08007914 <memset>:
 8007914:	4402      	add	r2, r0
 8007916:	4603      	mov	r3, r0
 8007918:	4293      	cmp	r3, r2
 800791a:	d100      	bne.n	800791e <memset+0xa>
 800791c:	4770      	bx	lr
 800791e:	f803 1b01 	strb.w	r1, [r3], #1
 8007922:	e7f9      	b.n	8007918 <memset+0x4>

08007924 <_init>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr

08007930 <_fini>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	bf00      	nop
 8007934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007936:	bc08      	pop	{r3}
 8007938:	469e      	mov	lr, r3
 800793a:	4770      	bx	lr
