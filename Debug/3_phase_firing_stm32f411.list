
3_phase_firing_stm32f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009abc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca4  08009ca4  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cac  08009cac  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cac  08009cac  00019cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cb0  08009cb0  00019cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  20000100  08009db4  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ee4  08009db4  00021ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153d4  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320c  00000000  00000000  00035504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  00039930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5ab  00000000  00000000  0003aa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bf8  00000000  00000000  00054fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6bb  00000000  00000000  0006aba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010625e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba4  00000000  00000000  001062b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009c3c 	.word	0x08009c3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08009c3c 	.word	0x08009c3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f001 f8aa 	bl	8001638 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 f854 	bl	8000590 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 fbb2 	bl	8000c50 <MX_GPIO_Init>
	MX_TIM2_Init();
 80004ec:	f000 f90a 	bl	8000704 <MX_TIM2_Init>
	MX_TIM3_Init();
 80004f0:	f000 f9c2 	bl	8000878 <MX_TIM3_Init>
	MX_TIM4_Init();
 80004f4:	f000 fa7a 	bl	80009ec <MX_TIM4_Init>
	MX_TIM5_Init();
 80004f8:	f000 fb32 	bl	8000b60 <MX_TIM5_Init>
	MX_USB_DEVICE_Init();
 80004fc:	f008 fe88 	bl	8009210 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8000500:	f000 f8ae 	bl	8000660 <MX_ADC1_Init>
	MX_TIM10_Init();
 8000504:	f000 fb80 	bl	8000c08 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	// Initializing Timer Base
	HAL_TIM_Base_Start_IT(&htim2);
 8000508:	481b      	ldr	r0, [pc, #108]	; (8000578 <main+0x9c>)
 800050a:	f003 fdef 	bl	80040ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800050e:	481b      	ldr	r0, [pc, #108]	; (800057c <main+0xa0>)
 8000510:	f003 fdec 	bl	80040ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <main+0xa4>)
 8000516:	f003 fde9 	bl	80040ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 800051a:	481a      	ldr	r0, [pc, #104]	; (8000584 <main+0xa8>)
 800051c:	f003 fd8c 	bl	8004038 <HAL_TIM_Base_Start>

	// Initializing One Pulse mode for unidirectional mode
	HAL_TIM_OnePulse_Start_IT(&htim2, TIM_CHANNEL_2);
 8000520:	2104      	movs	r1, #4
 8000522:	4815      	ldr	r0, [pc, #84]	; (8000578 <main+0x9c>)
 8000524:	f004 f930 	bl	8004788 <HAL_TIM_OnePulse_Start_IT>
	HAL_TIM_OnePulse_Start_IT(&htim3, TIM_CHANNEL_2);
 8000528:	2104      	movs	r1, #4
 800052a:	4814      	ldr	r0, [pc, #80]	; (800057c <main+0xa0>)
 800052c:	f004 f92c 	bl	8004788 <HAL_TIM_OnePulse_Start_IT>
	HAL_TIM_OnePulse_Start_IT(&htim4, TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	4813      	ldr	r0, [pc, #76]	; (8000580 <main+0xa4>)
 8000534:	f004 f928 	bl	8004788 <HAL_TIM_OnePulse_Start_IT>

	// Intializing Output Compare mode for bidirectional mode
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000538:	2108      	movs	r1, #8
 800053a:	480f      	ldr	r0, [pc, #60]	; (8000578 <main+0x9c>)
 800053c:	f003 fec0 	bl	80042c0 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000540:	2108      	movs	r1, #8
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <main+0xa0>)
 8000544:	f003 febc 	bl	80042c0 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000548:	2108      	movs	r1, #8
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <main+0xa4>)
 800054c:	f003 feb8 	bl	80042c0 <HAL_TIM_OC_Start_IT>

	// Initializing Encoder
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000550:	213c      	movs	r1, #60	; 0x3c
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0xa8>)
 8000554:	f004 fa24 	bl	80049a0 <HAL_TIM_Encoder_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		set_alpha(sudut_alpha);
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0xac>)
 800055a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fce0 	bl	8000f24 <set_alpha>
		HAL_Delay(100);
 8000564:	2064      	movs	r0, #100	; 0x64
 8000566:	f001 f8d9 	bl	800171c <HAL_Delay>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 800056a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056e:	4807      	ldr	r0, [pc, #28]	; (800058c <main+0xb0>)
 8000570:	f001 fe31 	bl	80021d6 <HAL_GPIO_TogglePin>
		set_alpha(sudut_alpha);
 8000574:	e7f0      	b.n	8000558 <main+0x7c>
 8000576:	bf00      	nop
 8000578:	20000164 	.word	0x20000164
 800057c:	200001ac 	.word	0x200001ac
 8000580:	200001f4 	.word	0x200001f4
 8000584:	2000023c 	.word	0x2000023c
 8000588:	20000000 	.word	0x20000000
 800058c:	40020800 	.word	0x40020800

08000590 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f009 fb44 	bl	8009c2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <SystemClock_Config+0xc8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <SystemClock_Config+0xcc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 8000600:	230f      	movs	r3, #15
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000604:	2390      	movs	r3, #144	; 0x90
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000608:	2304      	movs	r3, #4
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800060c:	2305      	movs	r3, #5
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f88f 	bl	8003738 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000620:	f000 fd2e 	bl	8001080 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2101      	movs	r1, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f003 faf1 	bl	8003c28 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800064c:	f000 fd18 	bl	8001080 <Error_Handler>
	}
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c0:	f001 f850 	bl	8001764 <HAL_ADC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80006ca:	f000 fcd9 	bl	8001080 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e0:	f001 f884 	bl	80017ec <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 80006ea:	f000 fcc9 	bl	8001080 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000011c 	.word	0x2000011c
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b098      	sub	sp, #96	; 0x60
 8000708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 800070a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800070e:	2224      	movs	r2, #36	; 0x24
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f009 fa8a 	bl	8009c2c <memset>
	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
 8000742:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000744:	4b4b      	ldr	r3, [pc, #300]	; (8000874 <MX_TIM2_Init+0x170>)
 8000746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 60-1;
 800074c:	4b49      	ldr	r3, [pc, #292]	; (8000874 <MX_TIM2_Init+0x170>)
 800074e:	223b      	movs	r2, #59	; 0x3b
 8000750:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	4b48      	ldr	r3, [pc, #288]	; (8000874 <MX_TIM2_Init+0x170>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20000-1;
 8000758:	4b46      	ldr	r3, [pc, #280]	; (8000874 <MX_TIM2_Init+0x170>)
 800075a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800075e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <MX_TIM2_Init+0x170>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <MX_TIM2_Init+0x170>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <MX_TIM2_Init+0x170>)
 800076e:	f003 fc13 	bl	8003f98 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8000778:	f000 fc82 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800077c:	483d      	ldr	r0, [pc, #244]	; (8000874 <MX_TIM2_Init+0x170>)
 800077e:	f003 ff4f 	bl	8004620 <HAL_TIM_PWM_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 8000788:	f000 fc7a 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800078c:	4839      	ldr	r0, [pc, #228]	; (8000874 <MX_TIM2_Init+0x170>)
 800078e:	f003 fd3e 	bl	800420e <HAL_TIM_OC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 8000798:	f000 fc72 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800079c:	2108      	movs	r1, #8
 800079e:	4835      	ldr	r0, [pc, #212]	; (8000874 <MX_TIM2_Init+0x170>)
 80007a0:	f003 ff97 	bl	80046d2 <HAL_TIM_OnePulse_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0xaa>
	{
		Error_Handler();
 80007aa:	f000 fc69 	bl	8001080 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007ae:	2306      	movs	r3, #6
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80007b2:	2350      	movs	r3, #80	; 0x50
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 80007b6:	2302      	movs	r3, #2
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80007be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c2:	4619      	mov	r1, r3
 80007c4:	482b      	ldr	r0, [pc, #172]	; (8000874 <MX_TIM2_Init+0x170>)
 80007c6:	f004 fc92 	bl	80050ee <HAL_TIM_SlaveConfigSynchro>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0xd0>
	{
		Error_Handler();
 80007d0:	f000 fc56 	bl	8001080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4619      	mov	r1, r3
 80007e2:	4824      	ldr	r0, [pc, #144]	; (8000874 <MX_TIM2_Init+0x170>)
 80007e4:	f005 f8c2 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0xee>
	{
		Error_Handler();
 80007ee:	f000 fc47 	bl	8001080 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f2:	2360      	movs	r3, #96	; 0x60
 80007f4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2204      	movs	r2, #4
 8000806:	4619      	mov	r1, r3
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <MX_TIM2_Init+0x170>)
 800080a:	f004 fadb 	bl	8004dc4 <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x114>
	{
		Error_Handler();
 8000814:	f000 fc34 	bl	8001080 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000818:	2330      	movs	r3, #48	; 0x30
 800081a:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2208      	movs	r2, #8
 8000820:	4619      	mov	r1, r3
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_TIM2_Init+0x170>)
 8000824:	f004 fa72 	bl	8004d0c <HAL_TIM_OC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x12e>
	{
		Error_Handler();
 800082e:	f000 fc27 	bl	8001080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 8000832:	2370      	movs	r3, #112	; 0x70
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000840:	2301      	movs	r3, #1
 8000842:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_RISING;
 8000844:	2300      	movs	r3, #0
 8000846:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim2, &sConfigOP, TIM_CHANNEL_2,
 800084c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000850:	2300      	movs	r3, #0
 8000852:	2204      	movs	r2, #4
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <MX_TIM2_Init+0x170>)
 8000856:	f004 fb77 	bl	8004f48 <HAL_TIM_OnePulse_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x160>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 8000860:	f000 fc0e 	bl	8001080 <Error_Handler>
	}
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <MX_TIM2_Init+0x170>)
 8000866:	f000 fdb3 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 800086a:	bf00      	nop
 800086c:	3760      	adds	r7, #96	; 0x60
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000164 	.word	0x20000164

08000878 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b098      	sub	sp, #96	; 0x60
 800087c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 800087e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000882:	2224      	movs	r2, #36	; 0x24
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f009 f9d0 	bl	8009c2c <memset>
	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800088c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80008b8:	4b4a      	ldr	r3, [pc, #296]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008ba:	4a4b      	ldr	r2, [pc, #300]	; (80009e8 <MX_TIM3_Init+0x170>)
 80008bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 60-1;
 80008be:	4b49      	ldr	r3, [pc, #292]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008c0:	223b      	movs	r2, #59	; 0x3b
 80008c2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 20000-1;
 80008ca:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80008d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d8:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008de:	4841      	ldr	r0, [pc, #260]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008e0:	f003 fb5a 	bl	8003f98 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 80008ea:	f000 fbc9 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008ee:	483d      	ldr	r0, [pc, #244]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80008f0:	f003 fe96 	bl	8004620 <HAL_TIM_PWM_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x86>
	{
		Error_Handler();
 80008fa:	f000 fbc1 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008fe:	4839      	ldr	r0, [pc, #228]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000900:	f003 fc85 	bl	800420e <HAL_TIM_OC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 800090a:	f000 fbb9 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800090e:	2108      	movs	r1, #8
 8000910:	4834      	ldr	r0, [pc, #208]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000912:	f003 fede 	bl	80046d2 <HAL_TIM_OnePulse_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0xa8>
	{
		Error_Handler();
 800091c:	f000 fbb0 	bl	8001080 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000920:	2306      	movs	r3, #6
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000924:	2350      	movs	r3, #80	; 0x50
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000934:	4619      	mov	r1, r3
 8000936:	482b      	ldr	r0, [pc, #172]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000938:	f004 fbd9 	bl	80050ee <HAL_TIM_SlaveConfigSynchro>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0xce>
	{
		Error_Handler();
 8000942:	f000 fb9d 	bl	8001080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	4619      	mov	r1, r3
 8000954:	4823      	ldr	r0, [pc, #140]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000956:	f005 f809 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0xec>
	{
		Error_Handler();
 8000960:	f000 fb8e 	bl	8001080 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000964:	2360      	movs	r3, #96	; 0x60
 8000966:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2204      	movs	r2, #4
 8000978:	4619      	mov	r1, r3
 800097a:	481a      	ldr	r0, [pc, #104]	; (80009e4 <MX_TIM3_Init+0x16c>)
 800097c:	f004 fa22 	bl	8004dc4 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x112>
	{
		Error_Handler();
 8000986:	f000 fb7b 	bl	8001080 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800098a:	2330      	movs	r3, #48	; 0x30
 800098c:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2208      	movs	r2, #8
 8000992:	4619      	mov	r1, r3
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_TIM3_Init+0x16c>)
 8000996:	f004 f9b9 	bl	8004d0c <HAL_TIM_OC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x12c>
	{
		Error_Handler();
 80009a0:	f000 fb6e 	bl	8001080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 80009a4:	2370      	movs	r3, #112	; 0x70
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 80009a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ac:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009b2:	2301      	movs	r3, #1
 80009b4:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_RISING;
 80009b6:	2300      	movs	r3, #0
 80009b8:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim3, &sConfigOP, TIM_CHANNEL_2,
 80009be:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80009c2:	2300      	movs	r3, #0
 80009c4:	2204      	movs	r2, #4
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80009c8:	f004 fabe 	bl	8004f48 <HAL_TIM_OnePulse_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x15e>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 80009d2:	f000 fb55 	bl	8001080 <Error_Handler>
	}
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM3_Init+0x16c>)
 80009d8:	f000 fcfa 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 80009dc:	bf00      	nop
 80009de:	3760      	adds	r7, #96	; 0x60
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200001ac 	.word	0x200001ac
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b098      	sub	sp, #96	; 0x60
 80009f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = { 0 };
 80009f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009f6:	2224      	movs	r2, #36	; 0x24
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f009 f916 	bl	8009c2c <memset>
	/* USER CODE END TIM4_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000a2c:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a2e:	4a4b      	ldr	r2, [pc, #300]	; (8000b5c <MX_TIM4_Init+0x170>)
 8000a30:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 60-1;
 8000a32:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a34:	223b      	movs	r2, #59	; 0x3b
 8000a36:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b47      	ldr	r3, [pc, #284]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 20000-1;
 8000a3e:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a40:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a44:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b44      	ldr	r3, [pc, #272]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a4c:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a52:	4841      	ldr	r0, [pc, #260]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a54:	f003 faa0 	bl	8003f98 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM4_Init+0x76>
	{
		Error_Handler();
 8000a5e:	f000 fb0f 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a62:	483d      	ldr	r0, [pc, #244]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a64:	f003 fddc 	bl	8004620 <HAL_TIM_PWM_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM4_Init+0x86>
	{
		Error_Handler();
 8000a6e:	f000 fb07 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000a72:	4839      	ldr	r0, [pc, #228]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a74:	f003 fbcb 	bl	800420e <HAL_TIM_OC_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 8000a7e:	f000 faff 	bl	8001080 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8000a82:	2108      	movs	r1, #8
 8000a84:	4834      	ldr	r0, [pc, #208]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000a86:	f003 fe24 	bl	80046d2 <HAL_TIM_OnePulse_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0xa8>
	{
		Error_Handler();
 8000a90:	f000 faf6 	bl	8001080 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a94:	2306      	movs	r3, #6
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a98:	2350      	movs	r3, #80	; 0x50
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.TriggerFilter = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482b      	ldr	r0, [pc, #172]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000aac:	f004 fb1f 	bl	80050ee <HAL_TIM_SlaveConfigSynchro>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM4_Init+0xce>
	{
		Error_Handler();
 8000ab6:	f000 fae3 	bl	8001080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4823      	ldr	r0, [pc, #140]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000aca:	f004 ff4f 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM4_Init+0xec>
	{
		Error_Handler();
 8000ad4:	f000 fad4 	bl	8001080 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	; 0x60
 8000ada:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2204      	movs	r2, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	481a      	ldr	r0, [pc, #104]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000af0:	f004 f968 	bl	8004dc4 <HAL_TIM_PWM_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM4_Init+0x112>
	{
		Error_Handler();
 8000afa:	f000 fac1 	bl	8001080 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000afe:	2330      	movs	r3, #48	; 0x30
 8000b00:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2208      	movs	r2, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000b0a:	f004 f8ff 	bl	8004d0c <HAL_TIM_OC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM4_Init+0x12c>
	{
		Error_Handler();
 8000b14:	f000 fab4 	bl	8001080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 8000b18:	2370      	movs	r3, #112	; 0x70
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOP.Pulse = 1000;
 8000b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b20:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOP.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	647b      	str	r3, [r7, #68]	; 0x44

	sConfigOP.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b26:	2301      	movs	r3, #1
 8000b28:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOP.ICPolarity = TIM_ICPOLARITY_FALLING;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOP.ICFilter = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_OnePulse_ConfigChannel(&htim4, &sConfigOP, TIM_CHANNEL_2,
 8000b32:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000b36:	2300      	movs	r3, #0
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000b3c:	f004 fa04 	bl	8004f48 <HAL_TIM_OnePulse_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x15e>
			TIM_CHANNEL_1) != HAL_OK) {
		Error_Handler();
 8000b46:	f000 fa9b 	bl	8001080 <Error_Handler>
	}
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_TIM4_Init+0x16c>)
 8000b4c:	f000 fc40 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8000b50:	bf00      	nop
 8000b52:	3760      	adds	r7, #96	; 0x60
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001f4 	.word	0x200001f4
 8000b5c:	40000800 	.word	0x40000800

08000b60 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2224      	movs	r2, #36	; 0x24
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f009 f85c 	bl	8009c2c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <MX_TIM5_Init+0xa4>)
 8000b80:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000baa:	2301      	movs	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000bce:	f003 fe41 	bl	8004854 <HAL_TIM_Encoder_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM5_Init+0x7c>
	{
		Error_Handler();
 8000bd8:	f000 fa52 	bl	8001080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_TIM5_Init+0xa0>)
 8000bea:	f004 febf 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM5_Init+0x98>
	{
		Error_Handler();
 8000bf4:	f000 fa44 	bl	8001080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000023c 	.word	0x2000023c
 8000c04:	40000c00 	.word	0x40000c00

08000c08 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <MX_TIM10_Init+0x44>)
 8000c10:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 60000;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c14:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000c18:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 100;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c22:	2264      	movs	r2, #100	; 0x64
 8000c24:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_TIM10_Init+0x40>)
 8000c34:	f003 f9b0 	bl	8003f98 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM10_Init+0x3a>
	{
		Error_Handler();
 8000c3e:	f000 fa1f 	bl	8001080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000284 	.word	0x20000284
 8000c4c:	40014400 	.word	0x40014400

08000c50 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_GPIO_Init+0xe4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cdc:	4816      	ldr	r0, [pc, #88]	; (8000d38 <MX_GPIO_Init+0xe8>)
 8000cde:	f001 fa61 	bl	80021a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480f      	ldr	r0, [pc, #60]	; (8000d38 <MX_GPIO_Init+0xe8>)
 8000cfc:	f001 f8b6 	bl	8001e6c <HAL_GPIO_Init>

	/*Configure GPIO pins : FIRING_MODE_Pin DEVICE_SEL_Pin */
	GPIO_InitStruct.Pin = FIRING_MODE_Pin|DEVICE_SEL_Pin;
 8000d00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d06:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <MX_GPIO_Init+0xec>)
 8000d18:	f001 f8a8 	bl	8001e6c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2028      	movs	r0, #40	; 0x28
 8000d22:	f001 f86c 	bl	8001dfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d26:	2028      	movs	r0, #40	; 0x28
 8000d28:	f001 f885 	bl	8001e36 <HAL_NVIC_EnableIRQ>

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020400 	.word	0x40020400

08000d40 <HAL_TIM_OC_DelayElapsedCallback>:
	HAL_TIM_MspPostInit(&htim2);

}


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	// Zero cross detector Handler
	if (htim->Instance == TIM2) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d11c      	bne.n	8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x4c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7f1b      	ldrb	r3, [r3, #28]
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d118      	bne.n	8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x4c>
			if (first_wave_flag_1 != 0) {
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d009      	beq.n	8000d76 <HAL_TIM_OC_DelayElapsedCallback+0x36>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, sudut_alpha);
 8000d62:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000d64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	63da      	str	r2, [r3, #60]	; 0x3c
				first_wave_flag_1 = 0;
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e00a      	b.n	8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x4c>
			} else {
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d80:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	63da      	str	r2, [r3, #60]	; 0x3c
						(sudut_alpha+SCR_PULSE_WIDTH));
				first_wave_flag_1 = 1;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Phase B
	if (htim->Instance == TIM3) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d11c      	bne.n	8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x90>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7f1b      	ldrb	r3, [r3, #28]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d118      	bne.n	8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x90>
			if (first_wave_flag_2 != 0) {
 8000d9e:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d009      	beq.n	8000dba <HAL_TIM_OC_DelayElapsedCallback+0x7a>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sudut_alpha);
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000da8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	63da      	str	r2, [r3, #60]	; 0x3c
				first_wave_flag_2 = 0;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e00a      	b.n	8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x90>
			} else {
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc0:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
						(sudut_alpha+SCR_PULSE_WIDTH));
				first_wave_flag_2 = 1;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Phase C
	if (htim->Instance == TIM4) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d11c      	bne.n	8000e14 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7f1b      	ldrb	r3, [r3, #28]
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d118      	bne.n	8000e14 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
			if (first_wave_flag_3 != 0) {
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <HAL_TIM_OC_DelayElapsedCallback+0xbe>
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, sudut_alpha);
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000dec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
				first_wave_flag_3 = 0;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
						(sudut_alpha+SCR_PULSE_WIDTH));
				first_wave_flag_3 = 1;
			}
		}
	}
}
 8000dfc:	e00a      	b.n	8000e14 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c
				first_wave_flag_3 = 1;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	200002ce 	.word	0x200002ce
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000164 	.word	0x20000164
 8000e2c:	40000400 	.word	0x40000400
 8000e30:	200002cf 	.word	0x200002cf
 8000e34:	200001ac 	.word	0x200001ac
 8000e38:	40000800 	.word	0x40000800
 8000e3c:	200002d0 	.word	0x200002d0
 8000e40:	200001f4 	.word	0x200001f4

08000e44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d157      	bne.n	8000f06 <HAL_TIM_IC_CaptureCallback+0xc2>
		uint16_t current_cnt;
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5a:	482e      	ldr	r0, [pc, #184]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e5c:	f001 f9bb 	bl	80021d6 <HAL_GPIO_TogglePin>
		current_cnt = __HAL_TIM_GET_COUNTER(&htim5);
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	81fb      	strh	r3, [r7, #14]
		uint16_t diff = (uint16_t)(current_cnt - counter_last_val);
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	89fa      	ldrh	r2, [r7, #14]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	81bb      	strh	r3, [r7, #12]

		if (diff == 0u)
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d02c      	beq.n	8000ed6 <HAL_TIM_IC_CaptureCallback+0x92>
		{
			// No change
			// sudut_alpha = diff;
		}
		else if (diff & 0x8000u)
 8000e7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da14      	bge.n	8000eae <HAL_TIM_IC_CaptureCallback+0x6a>
		{
			// Counter has decreased, diff is negative
			sudut_alpha += (diff * 100);
 8000e84:	89bb      	ldrh	r3, [r7, #12]
 8000e86:	461a      	mov	r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	0091      	lsls	r1, r2, #2
 8000e90:	461a      	mov	r2, r3
 8000e92:	460b      	mov	r3, r1
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000eaa:	801a      	strh	r2, [r3, #0]
 8000eac:	e013      	b.n	8000ed6 <HAL_TIM_IC_CaptureCallback+0x92>

		}
		else
		{
			// Counter has increased, diff is positive
			sudut_alpha += (diff * 100);
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	0091      	lsls	r1, r2, #2
 8000eba:	461a      	mov	r2, r3
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ed4:	801a      	strh	r2, [r3, #0]
		}

		counter_last_val = current_cnt;
 8000ed6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000edc:	801a      	strh	r2, [r3, #0]

		if (sudut_alpha <= 5){
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	dc03      	bgt.n	8000ef0 <HAL_TIM_IC_CaptureCallback+0xac>
			sudut_alpha = 2;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	801a      	strh	r2, [r3, #0]
		//				else if(__HAL_TIM_GET_COUNTER(&htim5) >= 85 && __HAL_TIM_GET_COUNTER(&htim5) <= 100){
		//					sudut_alpha = 8500;
		//					__HAL_TIM_SET_COUNTER(&htim5, 85);
		//				}
	}
}
 8000eee:	e00a      	b.n	8000f06 <HAL_TIM_IC_CaptureCallback+0xc2>
		else if(sudut_alpha >= 10000){
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000efa:	4293      	cmp	r3, r2
 8000efc:	dd03      	ble.n	8000f06 <HAL_TIM_IC_CaptureCallback+0xc2>
			sudut_alpha = 10000;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000f00:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f04:	801a      	strh	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40000c00 	.word	0x40000c00
 8000f14:	40020800 	.word	0x40020800
 8000f18:	2000023c 	.word	0x2000023c
 8000f1c:	200002cc 	.word	0x200002cc
 8000f20:	20000000 	.word	0x20000000

08000f24 <set_alpha>:

void set_alpha(int alpha) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	if (button_device_select_state == 1){
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <set_alpha+0xb4>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d14a      	bne.n	8000fca <set_alpha+0xa6>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (alpha + 10000));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <set_alpha+0xb8>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (alpha));
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <set_alpha+0xb8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim2, (alpha+10000+SCR_PULSE_WIDTH));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f50:	3338      	adds	r3, #56	; 0x38
 8000f52:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <set_alpha+0xb8>)
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f5e:	3338      	adds	r3, #56	; 0x38
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <set_alpha+0xb8>)
 8000f64:	60da      	str	r2, [r3, #12]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (alpha + PI_ANGLE_TIM));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <set_alpha+0xbc>)
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (alpha));
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <set_alpha+0xbc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim3, (alpha+10000+SCR_PULSE_WIDTH));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f82:	3338      	adds	r3, #56	; 0x38
 8000f84:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <set_alpha+0xbc>)
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000f90:	3338      	adds	r3, #56	; 0x38
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <set_alpha+0xbc>)
 8000f96:	60da      	str	r2, [r3, #12]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (alpha + PI_ANGLE_TIM));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f9e:	3310      	adds	r3, #16
 8000fa0:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <set_alpha+0xc0>)
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (alpha));
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <set_alpha+0xc0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_AUTORELOAD(&htim4, (alpha + 10000 + SCR_PULSE_WIDTH));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000fb4:	3338      	adds	r3, #56	; 0x38
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <set_alpha+0xc0>)
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8000fc2:	3338      	adds	r3, #56	; 0x38
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <set_alpha+0xc0>)
 8000fc8:	60da      	str	r2, [r3, #12]
	}
	else{

	}
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000002 	.word	0x20000002
 8000fdc:	20000164 	.word	0x20000164
 8000fe0:	200001ac 	.word	0x200001ac
 8000fe4:	200001f4 	.word	0x200001f4

08000fe8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DEVICE_SEL_Pin && button_device_select_state == 1) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ff8:	d10d      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0x2e>
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d109      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_3);
 8001002:	2108      	movs	r1, #8
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001006:	f003 fa59 	bl	80044bc <HAL_TIM_OC_Stop_IT>


		HAL_TIM_Base_Start_IT(&htim10);
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <HAL_GPIO_EXTI_Callback+0x40>)
 800100c:	f003 f86e 	bl	80040ec <HAL_TIM_Base_Start_IT>
		button_device_select_state = 0;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GPIO_EXTI_Callback+0x38>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
	}
	else {

	}
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000002 	.word	0x20000002
 8001024:	20000164 	.word	0x20000164
 8001028:	20000284 	.word	0x20000284

0800102c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

	/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	 */
	if(htim->Instance == TIM10){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d111      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x36>
		if(HAL_GPIO_ReadPin(DEVICE_SEL_GPIO_Port, DEVICE_SEL_Pin) == GPIO_PIN_RESET){
 800103e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001044:	f001 f896 	bl	8002174 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x36>
			button_device_select_state = 1;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001056:	f003 f8ab 	bl	80041b0 <HAL_TIM_Base_Stop_IT>

			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 800105a:	2108      	movs	r1, #8
 800105c:	4807      	ldr	r0, [pc, #28]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800105e:	f003 f92f 	bl	80042c0 <HAL_TIM_OC_Start_IT>
		}
	}
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40014400 	.word	0x40014400
 8001070:	40020400 	.word	0x40020400
 8001074:	20000002 	.word	0x20000002
 8001078:	20000284 	.word	0x20000284
 800107c:	20000164 	.word	0x20000164

08001080 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_MspInit+0x4c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_ADC_MspInit+0x7c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d127      	bne.n	800114e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_ADC_MspInit+0x80>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001136:	23fc      	movs	r3, #252	; 0xfc
 8001138:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_ADC_MspInit+0x84>)
 800114a:	f000 fe8f 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40012000 	.word	0x40012000
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001184:	d135      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a62      	ldr	r2, [pc, #392]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b60      	ldr	r3, [pc, #384]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	623b      	str	r3, [r7, #32]
 80011a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	4b5c      	ldr	r3, [pc, #368]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d0:	2301      	movs	r3, #1
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4850      	ldr	r0, [pc, #320]	; (800131c <HAL_TIM_Base_MspInit+0x1b8>)
 80011dc:	f000 fe46 	bl	8001e6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	201c      	movs	r0, #28
 80011e6:	f000 fe0a 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ea:	201c      	movs	r0, #28
 80011ec:	f000 fe23 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80011f0:	e08e      	b.n	8001310 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM3)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a4a      	ldr	r2, [pc, #296]	; (8001320 <HAL_TIM_Base_MspInit+0x1bc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d134      	bne.n	8001266 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a44      	ldr	r2, [pc, #272]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b42      	ldr	r3, [pc, #264]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a3d      	ldr	r2, [pc, #244]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001234:	2310      	movs	r3, #16
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4835      	ldr	r0, [pc, #212]	; (8001324 <HAL_TIM_Base_MspInit+0x1c0>)
 8001250:	f000 fe0c 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	201d      	movs	r0, #29
 800125a:	f000 fdd0 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800125e:	201d      	movs	r0, #29
 8001260:	f000 fde9 	bl	8001e36 <HAL_NVIC_EnableIRQ>
}
 8001264:	e054      	b.n	8001310 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM4)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <HAL_TIM_Base_MspInit+0x1c4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d134      	bne.n	80012da <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a20      	ldr	r2, [pc, #128]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012a8:	2340      	movs	r3, #64	; 0x40
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012b8:	2302      	movs	r3, #2
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <HAL_TIM_Base_MspInit+0x1c0>)
 80012c4:	f000 fdd2 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	201e      	movs	r0, #30
 80012ce:	f000 fd96 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012d2:	201e      	movs	r0, #30
 80012d4:	f000 fdaf 	bl	8001e36 <HAL_NVIC_EnableIRQ>
}
 80012d8:	e01a      	b.n	8001310 <HAL_TIM_Base_MspInit+0x1ac>
  else if(htim_base->Instance==TIM10)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_TIM_Base_MspInit+0x1c8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d115      	bne.n	8001310 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f2:	6453      	str	r3, [r2, #68]	; 0x44
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_TIM_Base_MspInit+0x1b4>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2019      	movs	r0, #25
 8001306:	f000 fd7a 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800130a:	2019      	movs	r0, #25
 800130c:	f000 fd93 	bl	8001e36 <HAL_NVIC_EnableIRQ>
}
 8001310:	bf00      	nop
 8001312:	3738      	adds	r7, #56	; 0x38
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000
 8001320:	40000400 	.word	0x40000400
 8001324:	40020400 	.word	0x40020400
 8001328:	40000800 	.word	0x40000800
 800132c:	40014400 	.word	0x40014400

08001330 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_TIM_Encoder_MspInit+0x94>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d133      	bne.n	80013ba <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_TIM_Encoder_MspInit+0x98>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800138a:	2303      	movs	r3, #3
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800139a:	2302      	movs	r3, #2
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <HAL_TIM_Encoder_MspInit+0x9c>)
 80013a6:	f000 fd61 	bl	8001e6c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2032      	movs	r0, #50	; 0x32
 80013b0:	f000 fd25 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f000 fd3e 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40000c00 	.word	0x40000c00
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d11f      	bne.n	8001432 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a34      	ldr	r2, [pc, #208]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800140e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001420:	2301      	movs	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4829      	ldr	r0, [pc, #164]	; (80014d0 <HAL_TIM_MspPostInit+0x100>)
 800142c:	f000 fd1e 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001430:	e047      	b.n	80014c2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_TIM_MspPostInit+0x104>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d11e      	bne.n	800147a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001458:	2321      	movs	r3, #33	; 0x21
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001468:	2302      	movs	r3, #2
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4817      	ldr	r0, [pc, #92]	; (80014d0 <HAL_TIM_MspPostInit+0x100>)
 8001474:	f000 fcfa 	bl	8001e6c <HAL_GPIO_Init>
}
 8001478:	e023      	b.n	80014c2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_TIM_MspPostInit+0x108>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d11e      	bne.n	80014c2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_TIM_MspPostInit+0xfc>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014b2:	2302      	movs	r3, #2
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <HAL_TIM_MspPostInit+0x100>)
 80014be:	f000 fcd5 	bl	8001e6c <HAL_GPIO_Init>
}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40000400 	.word	0x40000400
 80014d8:	40000800 	.word	0x40000800

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f8d8 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001536:	f003 fae1 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000284 	.word	0x20000284

08001544 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM2_IRQHandler+0x10>)
 800154a:	f003 fad7 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000164 	.word	0x20000164

08001558 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM3_IRQHandler+0x10>)
 800155e:	f003 facd 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001ac 	.word	0x200001ac

0800156c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM4_IRQHandler+0x10>)
 8001572:	f003 fac3 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001f4 	.word	0x200001f4

08001580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FIRING_MODE_Pin);
 8001584:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001588:	f000 fe40 	bl	800220c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEVICE_SEL_Pin);
 800158c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001590:	f000 fe3c 	bl	800220c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM5_IRQHandler+0x10>)
 800159e:	f003 faad 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000023c 	.word	0x2000023c

080015ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <OTG_FS_IRQHandler+0x10>)
 80015b2:	f000 ff93 	bl	80024dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200017b8 	.word	0x200017b8

080015c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160e:	f7ff ffd7 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f008 fae7 	bl	8009be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7fe ff61 	bl	80004dc <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800161c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001628:	08009cb4 	.word	0x08009cb4
  ldr r2, =_sbss
 800162c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001630:	20001ee4 	.word	0x20001ee4

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 fbc1 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fd0e 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fbd9 	bl	8001e52 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 fba1 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000004 	.word	0x20000004
 80016d4:	2000000c 	.word	0x2000000c
 80016d8:	20000008 	.word	0x20000008

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	2000000c 	.word	0x2000000c
 8001700:	200002d4 	.word	0x200002d4

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	200002d4 	.word	0x200002d4

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000000c 	.word	0x2000000c

08001764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e033      	b.n	80017e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fcaa 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017aa:	f023 0302 	bic.w	r3, r3, #2
 80017ae:	f043 0202 	orr.w	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f94a 	bl	8001a50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f023 0303 	bic.w	r3, r3, #3
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1c>
 8001804:	2302      	movs	r3, #2
 8001806:	e113      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x244>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b09      	cmp	r3, #9
 8001816:	d925      	bls.n	8001864 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68d9      	ldr	r1, [r3, #12]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	3b1e      	subs	r3, #30
 800182e:	2207      	movs	r2, #7
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43da      	mvns	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	400a      	ands	r2, r1
 800183c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68d9      	ldr	r1, [r3, #12]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	4603      	mov	r3, r0
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4403      	add	r3, r0
 8001856:	3b1e      	subs	r3, #30
 8001858:	409a      	lsls	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	e022      	b.n	80018aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6919      	ldr	r1, [r3, #16]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	2207      	movs	r2, #7
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	400a      	ands	r2, r1
 8001886:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6919      	ldr	r1, [r3, #16]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	4603      	mov	r3, r0
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4403      	add	r3, r0
 80018a0:	409a      	lsls	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d824      	bhi.n	80018fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b05      	subs	r3, #5
 80018c4:	221f      	movs	r2, #31
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	400a      	ands	r2, r1
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b05      	subs	r3, #5
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
 80018fa:	e04c      	b.n	8001996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d824      	bhi.n	800194e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b23      	subs	r3, #35	; 0x23
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43da      	mvns	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	400a      	ands	r2, r1
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4618      	mov	r0, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	3b23      	subs	r3, #35	; 0x23
 8001940:	fa00 f203 	lsl.w	r2, r0, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
 800194c:	e023      	b.n	8001996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b41      	subs	r3, #65	; 0x41
 8001960:	221f      	movs	r2, #31
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	400a      	ands	r2, r1
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	3b41      	subs	r3, #65	; 0x41
 800198a:	fa00 f203 	lsl.w	r2, r0, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_ADC_ConfigChannel+0x250>)
 8001998:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <HAL_ADC_ConfigChannel+0x254>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d10f      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1d8>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b12      	cmp	r3, #18
 80019aa:	d10b      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_ADC_ConfigChannel+0x254>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x23a>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_ADC_ConfigChannel+0x258>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d003      	beq.n	80019e0 <HAL_ADC_ConfigChannel+0x1f4>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b11      	cmp	r3, #17
 80019de:	d122      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_ADC_ConfigChannel+0x258>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d111      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_ADC_ConfigChannel+0x25c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_ADC_ConfigChannel+0x260>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9a      	lsrs	r2, r3, #18
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40012300 	.word	0x40012300
 8001a40:	40012000 	.word	0x40012000
 8001a44:	10000012 	.word	0x10000012
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	431bde83 	.word	0x431bde83

08001a50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a58:	4b79      	ldr	r3, [pc, #484]	; (8001c40 <ADC_Init+0x1f0>)
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	021a      	lsls	r2, r3, #8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <ADC_Init+0x1f4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d022      	beq.n	8001b2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6899      	ldr	r1, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e00f      	b.n	8001b4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0202 	bic.w	r2, r2, #2
 8001b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6899      	ldr	r1, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e1b      	ldrb	r3, [r3, #24]
 8001b68:	005a      	lsls	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	035a      	lsls	r2, r3, #13
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	e007      	b.n	8001bc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	051a      	lsls	r2, r3, #20
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c06:	025a      	lsls	r2, r3, #9
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6899      	ldr	r1, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	029a      	lsls	r2, r3, #10
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40012300 	.word	0x40012300
 8001c44:	0f000001 	.word	0x0f000001

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff29 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff3e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff31 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e159      	b.n	800213c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8148 	bne.w	8002136 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d005      	beq.n	8001ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a2 	beq.w	8002136 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b54      	ldr	r3, [pc, #336]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200e:	4a52      	ldr	r2, [pc, #328]	; (8002158 <HAL_GPIO_Init+0x2ec>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a49      	ldr	r2, [pc, #292]	; (800215c <HAL_GPIO_Init+0x2f0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x202>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a48      	ldr	r2, [pc, #288]	; (8002160 <HAL_GPIO_Init+0x2f4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x1fe>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a47      	ldr	r2, [pc, #284]	; (8002164 <HAL_GPIO_Init+0x2f8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x1fa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a46      	ldr	r2, [pc, #280]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x1f6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_GPIO_Init+0x300>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x1f2>
 800205a:	2304      	movs	r3, #4
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800205e:	2307      	movs	r3, #7
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x204>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x204>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_GPIO_Init+0x2ec>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <HAL_GPIO_Init+0x304>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_GPIO_Init+0x304>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a24      	ldr	r2, [pc, #144]	; (8002170 <HAL_GPIO_Init+0x304>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_GPIO_Init+0x304>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_GPIO_Init+0x304>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002130:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f aea2 	bls.w	8001e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40013800 	.word	0x40013800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	041a      	lsls	r2, r3, #16
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	400b      	ands	r3, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fedc 	bl	8000fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223e:	b08f      	sub	sp, #60	; 0x3c
 8002240:	af0a      	add	r7, sp, #40	; 0x28
 8002242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e10f      	b.n	800246e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f007 f9b1 	bl	80095d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2203      	movs	r2, #3
 8002272:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fd04 	bl	8005c9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	687e      	ldr	r6, [r7, #4]
 800229a:	466d      	mov	r5, sp
 800229c:	f106 0410 	add.w	r4, r6, #16
 80022a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b0:	1d33      	adds	r3, r6, #4
 80022b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f003 fbdb 	bl	8005a70 <USB_CoreInit>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0d0      	b.n	800246e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fcf2 	bl	8005cbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e04a      	b.n	8002374 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	333d      	adds	r3, #61	; 0x3d
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	333c      	adds	r3, #60	; 0x3c
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	b298      	uxth	r0, r3
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3344      	adds	r3, #68	; 0x44
 800231a:	4602      	mov	r2, r0
 800231c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3340      	adds	r3, #64	; 0x40
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3348      	adds	r3, #72	; 0x48
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	334c      	adds	r3, #76	; 0x4c
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3354      	adds	r3, #84	; 0x54
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3301      	adds	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d3af      	bcc.n	80022de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	e044      	b.n	800240e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	3301      	adds	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d3b5      	bcc.n	8002384 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	687e      	ldr	r6, [r7, #4]
 8002420:	466d      	mov	r5, sp
 8002422:	f106 0410 	add.w	r4, r6, #16
 8002426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002432:	e885 0003 	stmia.w	r5, {r0, r1}
 8002436:	1d33      	adds	r3, r6, #4
 8002438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243a:	6838      	ldr	r0, [r7, #0]
 800243c:	f003 fc8a 	bl	8005d54 <USB_DevInit>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00d      	b.n	800246e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f004 fdd9 	bl	800701e <USB_DevDisconnect>

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002476 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_PCD_Start+0x1c>
 800248e:	2302      	movs	r3, #2
 8002490:	e020      	b.n	80024d4 <HAL_PCD_Start+0x5e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d109      	bne.n	80024b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fbdc 	bl	8005c78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fd89 	bl	8006fdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b08d      	sub	sp, #52	; 0x34
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f004 fe47 	bl	8007186 <USB_GetMode>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 848a 	bne.w	8002e14 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f004 fdab 	bl	8007060 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8480 	beq.w	8002e12 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fd98 	bl	8007060 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d107      	bne.n	800254a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f002 0202 	and.w	r2, r2, #2
 8002548:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fd86 	bl	8007060 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b10      	cmp	r3, #16
 800255c:	d161      	bne.n	8002622 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0210 	bic.w	r2, r2, #16
 800256c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	0c5b      	lsrs	r3, r3, #17
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	2b02      	cmp	r3, #2
 8002598:	d124      	bne.n	80025e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d035      	beq.n	8002612 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	6a38      	ldr	r0, [r7, #32]
 80025ba:	f004 fbbd 	bl	8006d38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ca:	441a      	add	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	6a1a      	ldr	r2, [r3, #32]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025dc:	441a      	add	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	621a      	str	r2, [r3, #32]
 80025e2:	e016      	b.n	8002612 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	0c5b      	lsrs	r3, r3, #17
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d110      	bne.n	8002612 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025f6:	2208      	movs	r2, #8
 80025f8:	4619      	mov	r1, r3
 80025fa:	6a38      	ldr	r0, [r7, #32]
 80025fc:	f004 fb9c 	bl	8006d38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260c:	441a      	add	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0210 	orr.w	r2, r2, #16
 8002620:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f004 fd1a 	bl	8007060 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002632:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002636:	f040 80a7 	bne.w	8002788 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f004 fd1f 	bl	8007086 <USB_ReadDevAllOutEpInterrupt>
 8002648:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800264a:	e099      	b.n	8002780 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 808e 	beq.w	8002774 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fd43 	bl	80070ee <USB_ReadDevOutEPInterrupt>
 8002668:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00c      	beq.n	800268e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002680:	461a      	mov	r2, r3
 8002682:	2301      	movs	r3, #1
 8002684:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fec3 	bl	8003414 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a4:	461a      	mov	r2, r3
 80026a6:	2308      	movs	r3, #8
 80026a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 ff99 	bl	80035e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c8:	461a      	mov	r2, r3
 80026ca:	2310      	movs	r3, #16
 80026cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d030      	beq.n	800273a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	d109      	bne.n	80026f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	3304      	adds	r3, #4
 800270c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	78db      	ldrb	r3, [r3, #3]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d108      	bne.n	8002728 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4619      	mov	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f007 f850 	bl	80097c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002734:	461a      	mov	r2, r3
 8002736:	2302      	movs	r3, #2
 8002738:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002750:	461a      	mov	r2, r3
 8002752:	2320      	movs	r3, #32
 8002754:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276c:	461a      	mov	r2, r3
 800276e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002772:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	3301      	adds	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	f47f af62 	bne.w	800264c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f004 fc67 	bl	8007060 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800279c:	f040 80db 	bne.w	8002956 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 fc88 	bl	80070ba <USB_ReadDevAllInEpInterrupt>
 80027aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027b0:	e0cd      	b.n	800294e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80c2 	beq.w	8002942 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 fcae 	bl	800712a <USB_ReadDevInEPInterrupt>
 80027ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d057      	beq.n	800288a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	2201      	movs	r2, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69f9      	ldr	r1, [r7, #28]
 80027f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027fa:	4013      	ands	r3, r2
 80027fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280a:	461a      	mov	r2, r3
 800280c:	2301      	movs	r3, #1
 800280e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d132      	bne.n	800287e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334c      	adds	r3, #76	; 0x4c
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4403      	add	r3, r0
 8002838:	3348      	adds	r3, #72	; 0x48
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4419      	add	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4403      	add	r3, r0
 800284c:	334c      	adds	r3, #76	; 0x4c
 800284e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	2b00      	cmp	r3, #0
 8002854:	d113      	bne.n	800287e <HAL_PCD_IRQHandler+0x3a2>
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3354      	adds	r3, #84	; 0x54
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002876:	461a      	mov	r2, r3
 8002878:	2101      	movs	r1, #1
 800287a:	f004 fcb5 	bl	80071e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	b2db      	uxtb	r3, r3
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f006 ff24 	bl	80096d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a0:	461a      	mov	r2, r3
 80028a2:	2308      	movs	r3, #8
 80028a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d8:	461a      	mov	r2, r3
 80028da:	2340      	movs	r3, #64	; 0x40
 80028dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d023      	beq.n	8002930 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ea:	6a38      	ldr	r0, [r7, #32]
 80028ec:	f003 fb96 	bl	800601c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	3338      	adds	r3, #56	; 0x38
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	78db      	ldrb	r3, [r3, #3]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d108      	bne.n	800291e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2200      	movs	r2, #0
 8002910:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	b2db      	uxtb	r3, r3
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f006 ff67 	bl	80097ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292a:	461a      	mov	r2, r3
 800292c:	2302      	movs	r3, #2
 800292e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800293a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fcdb 	bl	80032f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	3301      	adds	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f af2e 	bne.w	80027b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fb80 	bl	8007060 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800296a:	d122      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002992:	2100      	movs	r1, #0
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fec3 	bl	8003720 <HAL_PCDEx_LPM_Callback>
 800299a:	e002      	b.n	80029a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f006 ff05 	bl	80097ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 fb52 	bl	8007060 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c6:	d112      	bne.n	80029ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d102      	bne.n	80029de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f006 fec1 	bl	8009760 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 fb34 	bl	8007060 <USB_ReadInterrupts>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	f040 80b7 	bne.w	8002b74 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2110      	movs	r1, #16
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fafb 	bl	800601c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2a:	e046      	b.n	8002aba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a50:	0151      	lsls	r1, r2, #5
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	440a      	add	r2, r1
 8002a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a84:	0151      	lsls	r1, r2, #5
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	440a      	add	r2, r1
 8002a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa4:	0151      	lsls	r1, r2, #5
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	440a      	add	r2, r1
 8002aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002aae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ab2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3b3      	bcc.n	8002a2c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ad6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d016      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af0:	f043 030b 	orr.w	r3, r3, #11
 8002af4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b06:	f043 030b 	orr.w	r3, r3, #11
 8002b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0c:	e015      	b.n	8002b3a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b20:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b24:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b34:	f043 030b 	orr.w	r3, r3, #11
 8002b38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f004 fb42 	bl	80071e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fa71 	bl	8007060 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b88:	d124      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fb07 	bl	80071a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fabc 	bl	8006116 <USB_GetDevSpeed>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681c      	ldr	r4, [r3, #0]
 8002baa:	f001 f9e9 	bl	8003f80 <HAL_RCC_GetHCLKFreq>
 8002bae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f002 ffbb 	bl	8005b34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f006 fdaf 	bl	8009722 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 fa41 	bl	8007060 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d10a      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f006 fd8c 	bl	8009706 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f002 0208 	and.w	r2, r2, #8
 8002bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 fa2c 	bl	8007060 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d122      	bne.n	8002c58 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c1e:	2301      	movs	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	e014      	b.n	8002c4e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fb27 	bl	8003296 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3e5      	bcc.n	8002c24 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 f9ff 	bl	8007060 <USB_ReadInterrupts>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6c:	d13b      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c6e:	2301      	movs	r3, #1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
 8002c72:	e02b      	b.n	8002ccc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3340      	adds	r3, #64	; 0x40
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d115      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	da12      	bge.n	8002cc6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	333f      	adds	r3, #63	; 0x3f
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fae8 	bl	8003296 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	3301      	adds	r3, #1
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3ce      	bcc.n	8002c74 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 f9b8 	bl	8007060 <USB_ReadInterrupts>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cfa:	d155      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	e045      	b.n	8002d8e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d12e      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da2b      	bge.n	8002d88 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d3c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d121      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d84:	6053      	str	r3, [r2, #4]
            break;
 8002d86:	e007      	b.n	8002d98 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d3b4      	bcc.n	8002d02 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 f957 	bl	8007060 <USB_ReadInterrupts>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f006 fd26 	bl	8009810 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 f941 	bl	8007060 <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d115      	bne.n	8002e14 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f006 fd16 	bl	800982c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	e000      	b.n	8002e14 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e12:	bf00      	nop
    }
  }
}
 8002e14:	3734      	adds	r7, #52	; 0x34
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}

08002e1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_SetAddress+0x1a>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e013      	b.n	8002e5c <HAL_PCD_SetAddress+0x42>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 f89f 	bl	8006f90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	461a      	mov	r2, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	70fb      	strb	r3, [r7, #3]
 8002e76:	460b      	mov	r3, r1
 8002e78:	803b      	strh	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	da0f      	bge.n	8002eaa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	3338      	adds	r3, #56	; 0x38
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	705a      	strb	r2, [r3, #1]
 8002ea8:	e00f      	b.n	8002eca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ed6:	883a      	ldrh	r2, [r7, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	78ba      	ldrb	r2, [r7, #2]
 8002ee0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ef4:	78bb      	ldrb	r3, [r7, #2]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d102      	bne.n	8002f00 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_PCD_EP_Open+0xaa>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e00e      	b.n	8002f2c <HAL_PCD_EP_Open+0xc8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 f91f 	bl	8006160 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da0f      	bge.n	8002f68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3338      	adds	r3, #56	; 0x38
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	705a      	strb	r2, [r3, #1]
 8002f66:	e00f      	b.n	8002f88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f003 020f 	and.w	r2, r3, #15
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3304      	adds	r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_PCD_EP_Close+0x6e>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e00e      	b.n	8002fc0 <HAL_PCD_EP_Close+0x8c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68f9      	ldr	r1, [r7, #12]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f003 f95d 	bl	8006270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	b2da      	uxtb	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003024:	7afb      	ldrb	r3, [r7, #11]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	6979      	ldr	r1, [r7, #20]
 800303c:	f003 fc3c 	bl	80068b8 <USB_EP0StartXfer>
 8003040:	e008      	b.n	8003054 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	6979      	ldr	r1, [r7, #20]
 8003050:	f003 f9ea 	bl	8006428 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 020f 	and.w	r2, r3, #15
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003080:	681b      	ldr	r3, [r3, #0]
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	460b      	mov	r3, r1
 800309c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	3338      	adds	r3, #56	; 0x38
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2200      	movs	r2, #0
 80030c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2201      	movs	r2, #1
 80030cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ce:	7afb      	ldrb	r3, [r7, #11]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d102      	bne.n	80030e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	6979      	ldr	r1, [r7, #20]
 8003100:	f003 fbda 	bl	80068b8 <USB_EP0StartXfer>
 8003104:	e008      	b.n	8003118 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	6979      	ldr	r1, [r7, #20]
 8003114:	f003 f988 	bl	8006428 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	d901      	bls.n	8003140 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e050      	b.n	80031e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003144:	2b00      	cmp	r3, #0
 8003146:	da0f      	bge.n	8003168 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	3338      	adds	r3, #56	; 0x38
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	3304      	adds	r3, #4
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
 8003166:	e00d      	b.n	8003184 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	3304      	adds	r3, #4
 800317c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_PCD_EP_SetStall+0x82>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e01e      	b.n	80031e2 <HAL_PCD_EP_SetStall+0xc0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fe18 	bl	8006de8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	b2d9      	uxtb	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031d2:	461a      	mov	r2, r3
 80031d4:	f004 f808 	bl	80071e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d901      	bls.n	8003208 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e042      	b.n	800328e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800320c:	2b00      	cmp	r3, #0
 800320e:	da0f      	bge.n	8003230 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	f003 020f 	and.w	r2, r3, #15
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	3338      	adds	r3, #56	; 0x38
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	3304      	adds	r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	705a      	strb	r2, [r3, #1]
 800322e:	e00f      	b.n	8003250 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 020f 	and.w	r2, r3, #15
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	3304      	adds	r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_PCD_EP_ClrStall+0x86>
 800326c:	2302      	movs	r3, #2
 800326e:	e00e      	b.n	800328e <HAL_PCD_EP_ClrStall+0xa4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68f9      	ldr	r1, [r7, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f003 fe20 	bl	8006ec4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da0c      	bge.n	80032c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	3338      	adds	r3, #56	; 0x38
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e00c      	b.n	80032de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	f003 020f 	and.w	r2, r3, #15
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 fc3f 	bl	8006b68 <USB_EPStopXfer>
 80032ea:	4603      	mov	r3, r0
 80032ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032ee:	7afb      	ldrb	r3, [r7, #11]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	3338      	adds	r3, #56	; 0x38
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	429a      	cmp	r2, r3
 800332a:	d901      	bls.n	8003330 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e06c      	b.n	800340a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	429a      	cmp	r2, r3
 8003344:	d902      	bls.n	800334c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	3303      	adds	r3, #3
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003354:	e02b      	b.n	80033ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	429a      	cmp	r2, r3
 800336a:	d902      	bls.n	8003372 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3303      	adds	r3, #3
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6919      	ldr	r1, [r3, #16]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800338a:	b2db      	uxtb	r3, r3
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	4603      	mov	r3, r0
 8003390:	6978      	ldr	r0, [r7, #20]
 8003392:	f003 fc93 	bl	8006cbc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	441a      	add	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1a      	ldr	r2, [r3, #32]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	441a      	add	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d809      	bhi.n	80033d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d203      	bcs.n	80033d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1be      	bne.n	8003356 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d811      	bhi.n	8003408 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	2201      	movs	r2, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	6939      	ldr	r1, [r7, #16]
 8003400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003404:	4013      	ands	r3, r2
 8003406:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	333c      	adds	r3, #60	; 0x3c
 800342c:	3304      	adds	r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d17b      	bne.n	8003542 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	4a61      	ldr	r2, [pc, #388]	; (80035dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	f240 80b9 	bls.w	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80b3 	beq.w	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003476:	461a      	mov	r2, r3
 8003478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347c:	6093      	str	r3, [r2, #8]
 800347e:	e0a7      	b.n	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003496:	461a      	mov	r2, r3
 8003498:	2320      	movs	r3, #32
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	e098      	b.n	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 8093 	bne.w	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	4a4b      	ldr	r2, [pc, #300]	; (80035dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d90f      	bls.n	80034d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c8:	461a      	mov	r2, r3
 80034ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ce:	6093      	str	r3, [r2, #8]
 80034d0:	e07e      	b.n	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	3304      	adds	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	0159      	lsls	r1, r3, #5
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fe:	1ad2      	subs	r2, r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d114      	bne.n	8003534 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800351c:	461a      	mov	r2, r3
 800351e:	2101      	movs	r1, #1
 8003520:	f003 fe62 	bl	80071e8 <USB_EP0_OutStart>
 8003524:	e006      	b.n	8003534 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	441a      	add	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f006 f8ae 	bl	800969c <HAL_PCD_DataOutStageCallback>
 8003540:	e046      	b.n	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d124      	bne.n	8003594 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	461a      	mov	r2, r3
 8003562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003566:	6093      	str	r3, [r2, #8]
 8003568:	e032      	b.n	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003580:	461a      	mov	r2, r3
 8003582:	2320      	movs	r3, #32
 8003584:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f006 f885 	bl	800969c <HAL_PCD_DataOutStageCallback>
 8003592:	e01d      	b.n	80035d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d114      	bne.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d108      	bne.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035bc:	461a      	mov	r2, r3
 80035be:	2100      	movs	r1, #0
 80035c0:	f003 fe12 	bl	80071e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f006 f866 	bl	800969c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	4f54300a 	.word	0x4f54300a
 80035e0:	4f54310a 	.word	0x4f54310a

080035e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	333c      	adds	r3, #60	; 0x3c
 80035fc:	3304      	adds	r3, #4
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a15      	ldr	r2, [pc, #84]	; (800366c <PCD_EP_OutSetupPacket_int+0x88>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d90e      	bls.n	8003638 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003630:	461a      	mov	r2, r3
 8003632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003636:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f006 f81d 	bl	8009678 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a0a      	ldr	r2, [pc, #40]	; (800366c <PCD_EP_OutSetupPacket_int+0x88>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d90c      	bls.n	8003660 <PCD_EP_OutSetupPacket_int+0x7c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d108      	bne.n	8003660 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003658:	461a      	mov	r2, r3
 800365a:	2101      	movs	r1, #1
 800365c:	f003 fdc4 	bl	80071e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	4f54300a 	.word	0x4f54300a

08003670 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
 800367c:	4613      	mov	r3, r2
 800367e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800368e:	883b      	ldrh	r3, [r7, #0]
 8003690:	0419      	lsls	r1, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	430a      	orrs	r2, r1
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
 800369c:	e028      	b.n	80036f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4413      	add	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e00d      	b.n	80036ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	3340      	adds	r3, #64	; 0x40
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4413      	add	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	3301      	adds	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d3ec      	bcc.n	80036b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036d8:	883b      	ldrh	r3, [r7, #0]
 80036da:	0418      	lsls	r0, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	4302      	orrs	r2, r0
 80036e8:	3340      	adds	r3, #64	; 0x40
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e267      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d075      	beq.n	8003842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b04      	cmp	r3, #4
 8003760:	d00c      	beq.n	800377c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b85      	ldr	r3, [pc, #532]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376a:	2b08      	cmp	r3, #8
 800376c:	d112      	bne.n	8003794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376e:	4b82      	ldr	r3, [pc, #520]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377a:	d10b      	bne.n	8003794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	4b7e      	ldr	r3, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05b      	beq.n	8003840 <HAL_RCC_OscConfig+0x108>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d157      	bne.n	8003840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e242      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x74>
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e01d      	b.n	80037e8 <HAL_RCC_OscConfig+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x98>
 80037b6:	4b70      	ldr	r3, [pc, #448]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6f      	ldr	r2, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b6d      	ldr	r3, [pc, #436]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a6c      	ldr	r2, [pc, #432]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e00b      	b.n	80037e8 <HAL_RCC_OscConfig+0xb0>
 80037d0:	4b69      	ldr	r3, [pc, #420]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a68      	ldr	r2, [pc, #416]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a65      	ldr	r2, [pc, #404]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fd ff88 	bl	8001704 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fd ff84 	bl	8001704 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e207      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0xc0>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fd ff74 	bl	8001704 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003820:	f7fd ff70 	bl	8001704 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1f3      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	4b51      	ldr	r3, [pc, #324]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0xe8>
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d063      	beq.n	8003916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003862:	2b08      	cmp	r3, #8
 8003864:	d11c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d116      	bne.n	80038a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_RCC_OscConfig+0x152>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e1c7      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4937      	ldr	r1, [pc, #220]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	e03a      	b.n	8003916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a8:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCC_OscConfig+0x244>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fd ff29 	bl	8001704 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fd ff25 	bl	8001704 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1a8      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4925      	ldr	r1, [pc, #148]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x244>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fd ff08 	bl	8001704 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f8:	f7fd ff04 	bl	8001704 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e187      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d036      	beq.n	8003990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x248>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd fee8 	bl	8001704 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003938:	f7fd fee4 	bl	8001704 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e167      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x200>
 8003956:	e01b      	b.n	8003990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCC_OscConfig+0x248>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395e:	f7fd fed1 	bl	8001704 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	e00e      	b.n	8003984 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003966:	f7fd fecd 	bl	8001704 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d907      	bls.n	8003984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e150      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
 8003978:	40023800 	.word	0x40023800
 800397c:	42470000 	.word	0x42470000
 8003980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ea      	bne.n	8003966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8097 	beq.w	8003acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a2:	4b81      	ldr	r3, [pc, #516]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10f      	bne.n	80039ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b7d      	ldr	r3, [pc, #500]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a7c      	ldr	r2, [pc, #496]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b7a      	ldr	r3, [pc, #488]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b77      	ldr	r3, [pc, #476]	; (8003bac <HAL_RCC_OscConfig+0x474>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039da:	4b74      	ldr	r3, [pc, #464]	; (8003bac <HAL_RCC_OscConfig+0x474>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a73      	ldr	r2, [pc, #460]	; (8003bac <HAL_RCC_OscConfig+0x474>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e6:	f7fd fe8d 	bl	8001704 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fd fe89 	bl	8001704 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e10c      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCC_OscConfig+0x474>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x2ea>
 8003a14:	4b64      	ldr	r3, [pc, #400]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a63      	ldr	r2, [pc, #396]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	e01c      	b.n	8003a5c <HAL_RCC_OscConfig+0x324>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x30c>
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a5e      	ldr	r2, [pc, #376]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b5c      	ldr	r3, [pc, #368]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	e00b      	b.n	8003a5c <HAL_RCC_OscConfig+0x324>
 8003a44:	4b58      	ldr	r3, [pc, #352]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a57      	ldr	r2, [pc, #348]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	4b55      	ldr	r3, [pc, #340]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a54      	ldr	r2, [pc, #336]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a56:	f023 0304 	bic.w	r3, r3, #4
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fd fe4e 	bl	8001704 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fd fe4a 	bl	8001704 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0cb      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ee      	beq.n	8003a6c <HAL_RCC_OscConfig+0x334>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7fd fe38 	bl	8001704 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fd fe34 	bl	8001704 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0b5      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aae:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ee      	bne.n	8003a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80a1 	beq.w	8003c18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad6:	4b34      	ldr	r3, [pc, #208]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d05c      	beq.n	8003b9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d141      	bne.n	8003b6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd fe08 	bl	8001704 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fd fe04 	bl	8001704 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e087      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	019b      	lsls	r3, r3, #6
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	491b      	ldr	r1, [pc, #108]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fd fddd 	bl	8001704 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fd fdd9 	bl	8001704 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e05c      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x416>
 8003b6c:	e054      	b.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fd fdc6 	bl	8001704 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fd fdc2 	bl	8001704 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e045      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x444>
 8003b9a:	e03d      	b.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e038      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x4ec>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d028      	beq.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d121      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d11a      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800

08003c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0cc      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b68      	ldr	r3, [pc, #416]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d90c      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b63      	ldr	r3, [pc, #396]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0b8      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d020      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c7c:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c94:	4b53      	ldr	r3, [pc, #332]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a52      	ldr	r2, [pc, #328]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	494d      	ldr	r1, [pc, #308]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d044      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d119      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e07f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e067      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4934      	ldr	r1, [pc, #208]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d18:	f7fd fcf4 	bl	8001704 <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fd fcf0 	bl	8001704 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e04f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d20c      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e032      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4916      	ldr	r1, [pc, #88]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	490e      	ldr	r1, [pc, #56]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dae:	f000 f821 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	490a      	ldr	r1, [pc, #40]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	5ccb      	ldrb	r3, [r1, r3]
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd fc54 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023c00 	.word	0x40023c00
 8003de4:	40023800 	.word	0x40023800
 8003de8:	08009c94 	.word	0x08009c94
 8003dec:	20000004 	.word	0x20000004
 8003df0:	20000008 	.word	0x20000008

08003df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b090      	sub	sp, #64	; 0x40
 8003dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003e00:	2300      	movs	r3, #0
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e04:	2300      	movs	r3, #0
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d00d      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x40>
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	f200 80a1 	bhi.w	8003f60 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x34>
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d003      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e26:	e09b      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e2c:	e09b      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e2e:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e32:	e098      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e34:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e3e:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d028      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4a:	4b4a      	ldr	r3, [pc, #296]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	2200      	movs	r2, #0
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	627a      	str	r2, [r7, #36]	; 0x24
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e60:	fb03 f201 	mul.w	r2, r3, r1
 8003e64:	2300      	movs	r3, #0
 8003e66:	fb00 f303 	mul.w	r3, r0, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	4a43      	ldr	r2, [pc, #268]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e6e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e74:	460a      	mov	r2, r1
 8003e76:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7a:	4413      	add	r3, r2
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	2200      	movs	r2, #0
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	61fa      	str	r2, [r7, #28]
 8003e86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e8e:	f7fc f9a3 	bl	80001d8 <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4613      	mov	r3, r2
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e9a:	e053      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	617a      	str	r2, [r7, #20]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003eae:	f04f 0b00 	mov.w	fp, #0
 8003eb2:	4652      	mov	r2, sl
 8003eb4:	465b      	mov	r3, fp
 8003eb6:	f04f 0000 	mov.w	r0, #0
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	0159      	lsls	r1, r3, #5
 8003ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec4:	0150      	lsls	r0, r2, #5
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	ebb2 080a 	subs.w	r8, r2, sl
 8003ece:	eb63 090b 	sbc.w	r9, r3, fp
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ede:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ee2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ee6:	ebb2 0408 	subs.w	r4, r2, r8
 8003eea:	eb63 0509 	sbc.w	r5, r3, r9
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	00eb      	lsls	r3, r5, #3
 8003ef8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003efc:	00e2      	lsls	r2, r4, #3
 8003efe:	4614      	mov	r4, r2
 8003f00:	461d      	mov	r5, r3
 8003f02:	eb14 030a 	adds.w	r3, r4, sl
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	eb45 030b 	adc.w	r3, r5, fp
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	028b      	lsls	r3, r1, #10
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f24:	4621      	mov	r1, r4
 8003f26:	028a      	lsls	r2, r1, #10
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	2200      	movs	r2, #0
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	60fa      	str	r2, [r7, #12]
 8003f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f38:	f7fc f94e 	bl	80001d8 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4613      	mov	r3, r2
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f5e:	e002      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3740      	adds	r7, #64	; 0x40
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
 8003f78:	00f42400 	.word	0x00f42400
 8003f7c:	017d7840 	.word	0x017d7840

08003f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000004 	.word	0x20000004

08003f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e041      	b.n	800402e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd f8d0 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f001 f8e0 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d001      	beq.n	8004050 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e03c      	b.n	80040ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <HAL_TIM_Base_Start+0xa0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_TIM_Base_Start+0x5c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d013      	beq.n	8004094 <HAL_TIM_Base_Start+0x5c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <HAL_TIM_Base_Start+0xa4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <HAL_TIM_Base_Start+0x5c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <HAL_TIM_Base_Start+0xa8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_TIM_Base_Start+0x5c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_TIM_Base_Start+0xac>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_TIM_Base_Start+0x5c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <HAL_TIM_Base_Start+0xb0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d010      	beq.n	80040c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	e007      	b.n	80040c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40014000 	.word	0x40014000

080040ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d001      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e044      	b.n	800418e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1e      	ldr	r2, [pc, #120]	; (800419c <HAL_TIM_Base_Start_IT+0xb0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d018      	beq.n	8004158 <HAL_TIM_Base_Start_IT+0x6c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d013      	beq.n	8004158 <HAL_TIM_Base_Start_IT+0x6c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00e      	beq.n	8004158 <HAL_TIM_Base_Start_IT+0x6c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_TIM_Base_Start_IT+0x6c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_TIM_Base_Start_IT+0x6c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a16      	ldr	r2, [pc, #88]	; (80041ac <HAL_TIM_Base_Start_IT+0xc0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d111      	bne.n	800417c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b06      	cmp	r3, #6
 8004168:	d010      	beq.n	800418c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417a:	e007      	b.n	800418c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40014000 	.word	0x40014000

080041b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10f      	bne.n	80041f8 <HAL_TIM_Base_Stop_IT+0x48>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6a1a      	ldr	r2, [r3, #32]
 80041de:	f240 4344 	movw	r3, #1092	; 0x444
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_Base_Stop_IT+0x48>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e041      	b.n	80042a4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f839 	bl	80042ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f000 ffa5 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_OC_Start_IT+0x28>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e022      	b.n	800432e <HAL_TIM_OC_Start_IT+0x6e>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d109      	bne.n	8004302 <HAL_TIM_OC_Start_IT+0x42>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e015      	b.n	800432e <HAL_TIM_OC_Start_IT+0x6e>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d109      	bne.n	800431c <HAL_TIM_OC_Start_IT+0x5c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e008      	b.n	800432e <HAL_TIM_OC_Start_IT+0x6e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0b3      	b.n	800449e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <HAL_TIM_OC_Start_IT+0x86>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004344:	e013      	b.n	800436e <HAL_TIM_OC_Start_IT+0xae>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d104      	bne.n	8004356 <HAL_TIM_OC_Start_IT+0x96>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004354:	e00b      	b.n	800436e <HAL_TIM_OC_Start_IT+0xae>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d104      	bne.n	8004366 <HAL_TIM_OC_Start_IT+0xa6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004364:	e003      	b.n	800436e <HAL_TIM_OC_Start_IT+0xae>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b0c      	cmp	r3, #12
 8004372:	d841      	bhi.n	80043f8 <HAL_TIM_OC_Start_IT+0x138>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <HAL_TIM_OC_Start_IT+0xbc>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080043f9 	.word	0x080043f9
 8004384:	080043f9 	.word	0x080043f9
 8004388:	080043f9 	.word	0x080043f9
 800438c:	080043c3 	.word	0x080043c3
 8004390:	080043f9 	.word	0x080043f9
 8004394:	080043f9 	.word	0x080043f9
 8004398:	080043f9 	.word	0x080043f9
 800439c:	080043d5 	.word	0x080043d5
 80043a0:	080043f9 	.word	0x080043f9
 80043a4:	080043f9 	.word	0x080043f9
 80043a8:	080043f9 	.word	0x080043f9
 80043ac:	080043e7 	.word	0x080043e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0202 	orr.w	r2, r2, #2
 80043be:	60da      	str	r2, [r3, #12]
      break;
 80043c0:	e01d      	b.n	80043fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0204 	orr.w	r2, r2, #4
 80043d0:	60da      	str	r2, [r3, #12]
      break;
 80043d2:	e014      	b.n	80043fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0208 	orr.w	r2, r2, #8
 80043e2:	60da      	str	r2, [r3, #12]
      break;
 80043e4:	e00b      	b.n	80043fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0210 	orr.w	r2, r2, #16
 80043f4:	60da      	str	r2, [r3, #12]
      break;
 80043f6:	e002      	b.n	80043fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      break;
 80043fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d14b      	bne.n	800449c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	6839      	ldr	r1, [r7, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f001 fa87 	bl	8005920 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d107      	bne.n	800442c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_TIM_OC_Start_IT+0x1a8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d013      	beq.n	8004468 <HAL_TIM_OC_Start_IT+0x1a8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_TIM_OC_Start_IT+0x1ec>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_TIM_OC_Start_IT+0x1a8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_TIM_OC_Start_IT+0x1a8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_TIM_OC_Start_IT+0x1f4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_TIM_OC_Start_IT+0x1a8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d111      	bne.n	800448c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d010      	beq.n	800449c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448a:	e007      	b.n	800449c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40014000 	.word	0x40014000

080044bc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d841      	bhi.n	8004554 <HAL_TIM_OC_Stop_IT+0x98>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_TIM_OC_Stop_IT+0x1c>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	08004555 	.word	0x08004555
 80044e0:	08004555 	.word	0x08004555
 80044e4:	08004555 	.word	0x08004555
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	08004555 	.word	0x08004555
 80044f0:	08004555 	.word	0x08004555
 80044f4:	08004555 	.word	0x08004555
 80044f8:	08004531 	.word	0x08004531
 80044fc:	08004555 	.word	0x08004555
 8004500:	08004555 	.word	0x08004555
 8004504:	08004555 	.word	0x08004555
 8004508:	08004543 	.word	0x08004543
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0202 	bic.w	r2, r2, #2
 800451a:	60da      	str	r2, [r3, #12]
      break;
 800451c:	e01d      	b.n	800455a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0204 	bic.w	r2, r2, #4
 800452c:	60da      	str	r2, [r3, #12]
      break;
 800452e:	e014      	b.n	800455a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0208 	bic.w	r2, r2, #8
 800453e:	60da      	str	r2, [r3, #12]
      break;
 8004540:	e00b      	b.n	800455a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0210 	bic.w	r2, r2, #16
 8004550:	60da      	str	r2, [r3, #12]
      break;
 8004552:	e002      	b.n	800455a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	bf00      	nop
  }

  if (status == HAL_OK)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d157      	bne.n	8004610 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2200      	movs	r2, #0
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f001 f9d9 	bl	8005920 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2a      	ldr	r2, [pc, #168]	; (800461c <HAL_TIM_OC_Stop_IT+0x160>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d117      	bne.n	80045a8 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10f      	bne.n	80045a8 <HAL_TIM_OC_Stop_IT+0xec>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	f240 4344 	movw	r3, #1092	; 0x444
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_OC_Stop_IT+0xec>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10f      	bne.n	80045d8 <HAL_TIM_OC_Stop_IT+0x11c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	f240 4344 	movw	r3, #1092	; 0x444
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_OC_Stop_IT+0x11c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <HAL_TIM_OC_Stop_IT+0x12c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e6:	e013      	b.n	8004610 <HAL_TIM_OC_Stop_IT+0x154>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d104      	bne.n	80045f8 <HAL_TIM_OC_Stop_IT+0x13c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f6:	e00b      	b.n	8004610 <HAL_TIM_OC_Stop_IT+0x154>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d104      	bne.n	8004608 <HAL_TIM_OC_Stop_IT+0x14c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004606:	e003      	b.n	8004610 <HAL_TIM_OC_Stop_IT+0x154>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000

08004620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e041      	b.n	80046b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f839 	bl	80046be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 fd9c 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e041      	b.n	800476a <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f839 	bl	8004772 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 fd42 	bl	800519c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0208 	bic.w	r2, r2, #8
 8004726:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004798:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047b0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d108      	bne.n	80047ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047b8:	7bbb      	ldrb	r3, [r7, #14]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047be:	7b7b      	ldrb	r3, [r7, #13]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d102      	bne.n	80047ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047c4:	7b3b      	ldrb	r3, [r7, #12]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d001      	beq.n	80047ce <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e03b      	b.n	8004846 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0202 	orr.w	r2, r2, #2
 80047fc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0204 	orr.w	r2, r2, #4
 800480c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2201      	movs	r2, #1
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f001 f882 	bl	8005920 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2201      	movs	r2, #1
 8004822:	2104      	movs	r1, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f001 f87b 	bl	8005920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a08      	ldr	r2, [pc, #32]	; (8004850 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d107      	bne.n	8004844 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40010000 	.word	0x40010000

08004854 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e097      	b.n	8004998 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7fc fd57 	bl	8001330 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004898:	f023 0307 	bic.w	r3, r3, #7
 800489c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 fc77 	bl	800519c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	4313      	orrs	r3, r2
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048f4:	f023 030c 	bic.w	r3, r3, #12
 80048f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	4313      	orrs	r3, r2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	011a      	lsls	r2, r3, #4
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	031b      	lsls	r3, r3, #12
 8004924:	4313      	orrs	r3, r2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800493a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	4313      	orrs	r3, r2
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d110      	bne.n	80049f2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d102      	bne.n	80049dc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049d6:	7b7b      	ldrb	r3, [r7, #13]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d001      	beq.n	80049e0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e089      	b.n	8004af4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f0:	e031      	b.n	8004a56 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d110      	bne.n	8004a1a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049fe:	7b3b      	ldrb	r3, [r7, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d001      	beq.n	8004a08 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e075      	b.n	8004af4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a18:	e01d      	b.n	8004a56 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d108      	bne.n	8004a32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a26:	7b7b      	ldrb	r3, [r7, #13]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d102      	bne.n	8004a32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a2c:	7b3b      	ldrb	r3, [r7, #12]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d001      	beq.n	8004a36 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e05e      	b.n	8004af4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d010      	beq.n	8004a84 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004a62:	e01f      	b.n	8004aa4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 ff57 	bl	8005920 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0202 	orr.w	r2, r2, #2
 8004a80:	60da      	str	r2, [r3, #12]
      break;
 8004a82:	e02e      	b.n	8004ae2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2104      	movs	r1, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff47 	bl	8005920 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0204 	orr.w	r2, r2, #4
 8004aa0:	60da      	str	r2, [r3, #12]
      break;
 8004aa2:	e01e      	b.n	8004ae2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 ff37 	bl	8005920 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	2104      	movs	r1, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 ff30 	bl	8005920 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0202 	orr.w	r2, r2, #2
 8004ace:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0204 	orr.w	r2, r2, #4
 8004ade:	60da      	str	r2, [r3, #12]
      break;
 8004ae0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d122      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d11b      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0202 	mvn.w	r2, #2
 8004b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc f980 	bl	8000e44 <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc f8fa 	bl	8000d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fb10 	bl	8005172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d122      	bne.n	8004bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d11b      	bne.n	8004bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0204 	mvn.w	r2, #4
 8004b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc f956 	bl	8000e44 <HAL_TIM_IC_CaptureCallback>
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fc f8d0 	bl	8000d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fae6 	bl	8005172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0208 	mvn.w	r2, #8
 8004bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc f92c 	bl	8000e44 <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc f8a6 	bl	8000d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fabc 	bl	8005172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0210 	mvn.w	r2, #16
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fc f902 	bl	8000e44 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc f87c 	bl	8000d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa92 	bl	8005172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d10e      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d107      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0201 	mvn.w	r2, #1
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fc f9d6 	bl	800102c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d10e      	bne.n	8004cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d107      	bne.n	8004cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fed8 	bl	8005a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d10e      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d107      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa57 	bl	8005186 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d10e      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d107      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0220 	mvn.w	r2, #32
 8004cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fea2 	bl	8005a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e048      	b.n	8004dbc <HAL_TIM_OC_ConfigChannel+0xb0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d839      	bhi.n	8004dac <HAL_TIM_OC_ConfigChannel+0xa0>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004dad 	.word	0x08004dad
 8004d48:	08004dad 	.word	0x08004dad
 8004d4c:	08004dad 	.word	0x08004dad
 8004d50:	08004d83 	.word	0x08004d83
 8004d54:	08004dad 	.word	0x08004dad
 8004d58:	08004dad 	.word	0x08004dad
 8004d5c:	08004dad 	.word	0x08004dad
 8004d60:	08004d91 	.word	0x08004d91
 8004d64:	08004dad 	.word	0x08004dad
 8004d68:	08004dad 	.word	0x08004dad
 8004d6c:	08004dad 	.word	0x08004dad
 8004d70:	08004d9f 	.word	0x08004d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fa8e 	bl	800529c <TIM_OC1_SetConfig>
      break;
 8004d80:	e017      	b.n	8004db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 faed 	bl	8005368 <TIM_OC2_SetConfig>
      break;
 8004d8e:	e010      	b.n	8004db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fb52 	bl	8005440 <TIM_OC3_SetConfig>
      break;
 8004d9c:	e009      	b.n	8004db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fbb5 	bl	8005514 <TIM_OC4_SetConfig>
      break;
 8004daa:	e002      	b.n	8004db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e0ae      	b.n	8004f40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b0c      	cmp	r3, #12
 8004dee:	f200 809f 	bhi.w	8004f30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004f31 	.word	0x08004f31
 8004e00:	08004f31 	.word	0x08004f31
 8004e04:	08004f31 	.word	0x08004f31
 8004e08:	08004e6d 	.word	0x08004e6d
 8004e0c:	08004f31 	.word	0x08004f31
 8004e10:	08004f31 	.word	0x08004f31
 8004e14:	08004f31 	.word	0x08004f31
 8004e18:	08004eaf 	.word	0x08004eaf
 8004e1c:	08004f31 	.word	0x08004f31
 8004e20:	08004f31 	.word	0x08004f31
 8004e24:	08004f31 	.word	0x08004f31
 8004e28:	08004eef 	.word	0x08004eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fa32 	bl	800529c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0208 	orr.w	r2, r2, #8
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	619a      	str	r2, [r3, #24]
      break;
 8004e6a:	e064      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fa78 	bl	8005368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6999      	ldr	r1, [r3, #24]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	021a      	lsls	r2, r3, #8
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	619a      	str	r2, [r3, #24]
      break;
 8004eac:	e043      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fac3 	bl	8005440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0208 	orr.w	r2, r2, #8
 8004ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0204 	bic.w	r2, r2, #4
 8004ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	61da      	str	r2, [r3, #28]
      break;
 8004eec:	e023      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fb0d 	bl	8005514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69d9      	ldr	r1, [r3, #28]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	021a      	lsls	r2, r3, #8
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	61da      	str	r2, [r3, #28]
      break;
 8004f2e:	e002      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
      break;
 8004f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	; 0x30
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	f000 80bf 	beq.w	80050e4 <HAL_TIM_OnePulse_ConfigChannel+0x19c>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIM_OnePulse_ConfigChannel+0x2c>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0b8      	b.n	80050e6 <HAL_TIM_OnePulse_ConfigChannel+0x19e>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	613b      	str	r3, [r7, #16]
    temp1.Pulse = sConfig->Pulse;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	617b      	str	r3, [r7, #20]
    temp1.OCPolarity = sConfig->OCPolarity;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	61bb      	str	r3, [r7, #24]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	61fb      	str	r3, [r7, #28]
    temp1.OCIdleState = sConfig->OCIdleState;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (OutputChannel)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d009      	beq.n	8004fc8 <HAL_TIM_OnePulse_ConfigChannel+0x80>
 8004fb4:	e011      	b.n	8004fda <HAL_TIM_OnePulse_ConfigChannel+0x92>
    {
      case TIM_CHANNEL_1:
      {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        TIM_OC1_SetConfig(htim->Instance, &temp1);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f107 0210 	add.w	r2, r7, #16
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f96b 	bl	800529c <TIM_OC1_SetConfig>
        break;
 8004fc6:	e00c      	b.n	8004fe2 <HAL_TIM_OnePulse_ConfigChannel+0x9a>

      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f107 0210 	add.w	r2, r7, #16
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f9c8 	bl	8005368 <TIM_OC2_SetConfig>
        break;
 8004fd8:	e003      	b.n	8004fe2 <HAL_TIM_OnePulse_ConfigChannel+0x9a>
      }

      default:
        status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8004fe0:	bf00      	nop
    }

    if (status == HAL_OK)
 8004fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d170      	bne.n	80050cc <HAL_TIM_OnePulse_ConfigChannel+0x184>
    {
      switch (InputChannel)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_TIM_OnePulse_ConfigChannel+0xb0>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d033      	beq.n	800505e <HAL_TIM_OnePulse_ConfigChannel+0x116>
 8004ff6:	e065      	b.n	80050c4 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
      {
        case TIM_CHANNEL_1:
        {
          assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

          TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6818      	ldr	r0, [r3, #0]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	6999      	ldr	r1, [r3, #24]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f000 fb66 	bl	80056d8 <TIM_TI1_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC1PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 020c 	bic.w	r2, r2, #12
 800501a:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800502a:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800503a:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0207 	bic.w	r2, r2, #7
 800504a:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0206 	orr.w	r2, r2, #6
 800505a:	609a      	str	r2, [r3, #8]
          break;
 800505c:	e037      	b.n	80050ce <HAL_TIM_OnePulse_ConfigChannel+0x186>

        case TIM_CHANNEL_2:
        {
          assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

          TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f000 fbca 	bl	8005806 <TIM_TI2_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC2PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005080:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005090:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80050a0:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0207 	bic.w	r2, r2, #7
 80050b0:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0206 	orr.w	r2, r2, #6
 80050c0:	609a      	str	r2, [r3, #8]
          break;
 80050c2:	e004      	b.n	80050ce <HAL_TIM_OnePulse_ConfigChannel+0x186>
        }

        default:
          status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 80050ca:	e000      	b.n	80050ce <HAL_TIM_OnePulse_ConfigChannel+0x186>
      }
    }
 80050cc:	bf00      	nop

    htim->State = HAL_TIM_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return status;
 80050de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050e2:	e000      	b.n	80050e6 <HAL_TIM_OnePulse_ConfigChannel+0x19e>
  }
  else
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
  }
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3730      	adds	r7, #48	; 0x30
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005102:	2302      	movs	r3, #2
 8005104:	e031      	b.n	800516a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005116:	6839      	ldr	r1, [r7, #0]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fa4b 	bl	80055b4 <TIM_SlaveTimer_SetConfig>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e018      	b.n	800516a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005146:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005156:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a34      	ldr	r2, [pc, #208]	; (8005280 <TIM_Base_SetConfig+0xe4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00f      	beq.n	80051d4 <TIM_Base_SetConfig+0x38>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d00b      	beq.n	80051d4 <TIM_Base_SetConfig+0x38>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a31      	ldr	r2, [pc, #196]	; (8005284 <TIM_Base_SetConfig+0xe8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_Base_SetConfig+0x38>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a30      	ldr	r2, [pc, #192]	; (8005288 <TIM_Base_SetConfig+0xec>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_Base_SetConfig+0x38>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <TIM_Base_SetConfig+0xf0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d108      	bne.n	80051e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a25      	ldr	r2, [pc, #148]	; (8005280 <TIM_Base_SetConfig+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01b      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f4:	d017      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a22      	ldr	r2, [pc, #136]	; (8005284 <TIM_Base_SetConfig+0xe8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <TIM_Base_SetConfig+0xec>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00f      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a20      	ldr	r2, [pc, #128]	; (800528c <TIM_Base_SetConfig+0xf0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00b      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <TIM_Base_SetConfig+0xf4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d007      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <TIM_Base_SetConfig+0xf8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d003      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <TIM_Base_SetConfig+0xfc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d108      	bne.n	8005238 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a08      	ldr	r2, [pc, #32]	; (8005280 <TIM_Base_SetConfig+0xe4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40010000 	.word	0x40010000
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40000c00 	.word	0x40000c00
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800

0800529c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 0302 	bic.w	r3, r3, #2
 80052e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <TIM_OC1_SetConfig+0xc8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d10c      	bne.n	8005312 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0308 	bic.w	r3, r3, #8
 80052fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 0304 	bic.w	r3, r3, #4
 8005310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a13      	ldr	r2, [pc, #76]	; (8005364 <TIM_OC1_SetConfig+0xc8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d111      	bne.n	800533e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40010000 	.word	0x40010000

08005368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0210 	bic.w	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0320 	bic.w	r3, r3, #32
 80053b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <TIM_OC2_SetConfig+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10d      	bne.n	80053e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <TIM_OC2_SetConfig+0xd4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d113      	bne.n	8005414 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000

08005440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0303 	bic.w	r3, r3, #3
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <TIM_OC3_SetConfig+0xd0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d10d      	bne.n	80054ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a14      	ldr	r2, [pc, #80]	; (8005510 <TIM_OC3_SetConfig+0xd0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d113      	bne.n	80054ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40010000 	.word	0x40010000

08005514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800555e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	031b      	lsls	r3, r3, #12
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <TIM_OC4_SetConfig+0x9c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d109      	bne.n	8005588 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800557a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	019b      	lsls	r3, r3, #6
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000

080055b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f023 0307 	bic.w	r3, r3, #7
 80055e2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b70      	cmp	r3, #112	; 0x70
 80055fc:	d01a      	beq.n	8005634 <TIM_SlaveTimer_SetConfig+0x80>
 80055fe:	2b70      	cmp	r3, #112	; 0x70
 8005600:	d860      	bhi.n	80056c4 <TIM_SlaveTimer_SetConfig+0x110>
 8005602:	2b60      	cmp	r3, #96	; 0x60
 8005604:	d054      	beq.n	80056b0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005606:	2b60      	cmp	r3, #96	; 0x60
 8005608:	d85c      	bhi.n	80056c4 <TIM_SlaveTimer_SetConfig+0x110>
 800560a:	2b50      	cmp	r3, #80	; 0x50
 800560c:	d046      	beq.n	800569c <TIM_SlaveTimer_SetConfig+0xe8>
 800560e:	2b50      	cmp	r3, #80	; 0x50
 8005610:	d858      	bhi.n	80056c4 <TIM_SlaveTimer_SetConfig+0x110>
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d019      	beq.n	800564a <TIM_SlaveTimer_SetConfig+0x96>
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d854      	bhi.n	80056c4 <TIM_SlaveTimer_SetConfig+0x110>
 800561a:	2b30      	cmp	r3, #48	; 0x30
 800561c:	d055      	beq.n	80056ca <TIM_SlaveTimer_SetConfig+0x116>
 800561e:	2b30      	cmp	r3, #48	; 0x30
 8005620:	d850      	bhi.n	80056c4 <TIM_SlaveTimer_SetConfig+0x110>
 8005622:	2b20      	cmp	r3, #32
 8005624:	d051      	beq.n	80056ca <TIM_SlaveTimer_SetConfig+0x116>
 8005626:	2b20      	cmp	r3, #32
 8005628:	d84c      	bhi.n	80056c4 <TIM_SlaveTimer_SetConfig+0x110>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d04d      	beq.n	80056ca <TIM_SlaveTimer_SetConfig+0x116>
 800562e:	2b10      	cmp	r3, #16
 8005630:	d04b      	beq.n	80056ca <TIM_SlaveTimer_SetConfig+0x116>
 8005632:	e047      	b.n	80056c4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68d9      	ldr	r1, [r3, #12]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f000 f94c 	bl	80058e0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005648:	e040      	b.n	80056cc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b05      	cmp	r3, #5
 8005650:	d101      	bne.n	8005656 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e03b      	b.n	80056ce <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800567c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
      break;
 800569a:	e017      	b.n	80056cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6899      	ldr	r1, [r3, #8]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	461a      	mov	r2, r3
 80056aa:	f000 f87d 	bl	80057a8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80056ae:	e00d      	b.n	80056cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6899      	ldr	r1, [r3, #8]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	461a      	mov	r2, r3
 80056be:	f000 f8df 	bl	8005880 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80056c2:	e003      	b.n	80056cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	75fb      	strb	r3, [r7, #23]
      break;
 80056c8:	e000      	b.n	80056cc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80056ca:	bf00      	nop
  }

  return status;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f023 0201 	bic.w	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4a24      	ldr	r2, [pc, #144]	; (8005794 <TIM_TI1_SetConfig+0xbc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <TIM_TI1_SetConfig+0x56>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570c:	d00f      	beq.n	800572e <TIM_TI1_SetConfig+0x56>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a21      	ldr	r2, [pc, #132]	; (8005798 <TIM_TI1_SetConfig+0xc0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_TI1_SetConfig+0x56>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <TIM_TI1_SetConfig+0xc4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_TI1_SetConfig+0x56>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <TIM_TI1_SetConfig+0xc8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_TI1_SetConfig+0x56>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <TIM_TI1_SetConfig+0xcc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d101      	bne.n	8005732 <TIM_TI1_SetConfig+0x5a>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <TIM_TI1_SetConfig+0x5c>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e003      	b.n	8005752 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	b2db      	uxtb	r3, r3
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f023 030a 	bic.w	r3, r3, #10
 800576c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f003 030a 	and.w	r3, r3, #10
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40014000 	.word	0x40014000

080057a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0201 	bic.w	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 030a 	bic.w	r3, r3, #10
 80057e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005806:	b480      	push	{r7}
 8005808:	b087      	sub	sp, #28
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f023 0210 	bic.w	r2, r3, #16
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	b29b      	uxth	r3, r3
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005858:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f023 0210 	bic.w	r2, r3, #16
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	031b      	lsls	r3, r3, #12
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	021a      	lsls	r2, r3, #8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	431a      	orrs	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4313      	orrs	r3, r2
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	609a      	str	r2, [r3, #8]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2201      	movs	r2, #1
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1a      	ldr	r2, [r3, #32]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a1a      	ldr	r2, [r3, #32]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	431a      	orrs	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
	...

0800596c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005980:	2302      	movs	r3, #2
 8005982:	e050      	b.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d0:	d013      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10c      	bne.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40014000 	.word	0x40014000

08005a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a70:	b084      	sub	sp, #16
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	f107 001c 	add.w	r0, r7, #28
 8005a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d122      	bne.n	8005ace <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d105      	bne.n	8005ac2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fbee 	bl	80072a4 <USB_CoreReset>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	e01a      	b.n	8005b04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 fbe2 	bl	80072a4 <USB_CoreReset>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38
 8005af6:	e005      	b.n	8005b04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d10b      	bne.n	8005b22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f043 0206 	orr.w	r2, r3, #6
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f043 0220 	orr.w	r2, r3, #32
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b2e:	b004      	add	sp, #16
 8005b30:	4770      	bx	lr
	...

08005b34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d165      	bne.n	8005c14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4a41      	ldr	r2, [pc, #260]	; (8005c50 <USB_SetTurnaroundTime+0x11c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d906      	bls.n	8005b5e <USB_SetTurnaroundTime+0x2a>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4a40      	ldr	r2, [pc, #256]	; (8005c54 <USB_SetTurnaroundTime+0x120>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d202      	bcs.n	8005b5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b58:	230f      	movs	r3, #15
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	e062      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4a3c      	ldr	r2, [pc, #240]	; (8005c54 <USB_SetTurnaroundTime+0x120>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d306      	bcc.n	8005b74 <USB_SetTurnaroundTime+0x40>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4a3b      	ldr	r2, [pc, #236]	; (8005c58 <USB_SetTurnaroundTime+0x124>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d202      	bcs.n	8005b74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b6e:	230e      	movs	r3, #14
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e057      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4a38      	ldr	r2, [pc, #224]	; (8005c58 <USB_SetTurnaroundTime+0x124>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d306      	bcc.n	8005b8a <USB_SetTurnaroundTime+0x56>
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4a37      	ldr	r2, [pc, #220]	; (8005c5c <USB_SetTurnaroundTime+0x128>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d202      	bcs.n	8005b8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b84:	230d      	movs	r3, #13
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e04c      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4a33      	ldr	r2, [pc, #204]	; (8005c5c <USB_SetTurnaroundTime+0x128>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d306      	bcc.n	8005ba0 <USB_SetTurnaroundTime+0x6c>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4a32      	ldr	r2, [pc, #200]	; (8005c60 <USB_SetTurnaroundTime+0x12c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d802      	bhi.n	8005ba0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e041      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4a2f      	ldr	r2, [pc, #188]	; (8005c60 <USB_SetTurnaroundTime+0x12c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d906      	bls.n	8005bb6 <USB_SetTurnaroundTime+0x82>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4a2e      	ldr	r2, [pc, #184]	; (8005c64 <USB_SetTurnaroundTime+0x130>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d802      	bhi.n	8005bb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005bb0:	230b      	movs	r3, #11
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e036      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4a2a      	ldr	r2, [pc, #168]	; (8005c64 <USB_SetTurnaroundTime+0x130>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d906      	bls.n	8005bcc <USB_SetTurnaroundTime+0x98>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <USB_SetTurnaroundTime+0x134>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d802      	bhi.n	8005bcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005bc6:	230a      	movs	r3, #10
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e02b      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <USB_SetTurnaroundTime+0x134>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d906      	bls.n	8005be2 <USB_SetTurnaroundTime+0xae>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <USB_SetTurnaroundTime+0x138>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d202      	bcs.n	8005be2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005bdc:	2309      	movs	r3, #9
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	e020      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4a21      	ldr	r2, [pc, #132]	; (8005c6c <USB_SetTurnaroundTime+0x138>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d306      	bcc.n	8005bf8 <USB_SetTurnaroundTime+0xc4>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4a20      	ldr	r2, [pc, #128]	; (8005c70 <USB_SetTurnaroundTime+0x13c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d802      	bhi.n	8005bf8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e015      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <USB_SetTurnaroundTime+0x13c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d906      	bls.n	8005c0e <USB_SetTurnaroundTime+0xda>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <USB_SetTurnaroundTime+0x140>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d202      	bcs.n	8005c0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c08:	2307      	movs	r3, #7
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	e00a      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c0e:	2306      	movs	r3, #6
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e007      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c1a:	2309      	movs	r3, #9
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e001      	b.n	8005c24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c20:	2309      	movs	r3, #9
 8005c22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	029b      	lsls	r3, r3, #10
 8005c38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	00d8acbf 	.word	0x00d8acbf
 8005c54:	00e4e1c0 	.word	0x00e4e1c0
 8005c58:	00f42400 	.word	0x00f42400
 8005c5c:	01067380 	.word	0x01067380
 8005c60:	011a499f 	.word	0x011a499f
 8005c64:	01312cff 	.word	0x01312cff
 8005c68:	014ca43f 	.word	0x014ca43f
 8005c6c:	016e3600 	.word	0x016e3600
 8005c70:	01a6ab1f 	.word	0x01a6ab1f
 8005c74:	01e84800 	.word	0x01e84800

08005c78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f043 0201 	orr.w	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f023 0201 	bic.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d115      	bne.n	8005d0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cea:	2001      	movs	r0, #1
 8005cec:	f7fb fd16 	bl	800171c <HAL_Delay>
      ms++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 fa45 	bl	8007186 <USB_GetMode>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d01e      	beq.n	8005d40 <USB_SetCurrentMode+0x84>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b31      	cmp	r3, #49	; 0x31
 8005d06:	d9f0      	bls.n	8005cea <USB_SetCurrentMode+0x2e>
 8005d08:	e01a      	b.n	8005d40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d115      	bne.n	8005d3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f7fb fcfd 	bl	800171c <HAL_Delay>
      ms++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 fa2c 	bl	8007186 <USB_GetMode>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <USB_SetCurrentMode+0x84>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b31      	cmp	r3, #49	; 0x31
 8005d38:	d9f0      	bls.n	8005d1c <USB_SetCurrentMode+0x60>
 8005d3a:	e001      	b.n	8005d40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e005      	b.n	8005d4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b32      	cmp	r3, #50	; 0x32
 8005d44:	d101      	bne.n	8005d4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d54:	b084      	sub	sp, #16
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b086      	sub	sp, #24
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	e009      	b.n	8005d88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	3340      	adds	r3, #64	; 0x40
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3301      	adds	r3, #1
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b0e      	cmp	r3, #14
 8005d8c:	d9f2      	bls.n	8005d74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d11c      	bne.n	8005dce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da2:	f043 0302 	orr.w	r3, r3, #2
 8005da6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
 8005dcc:	e00b      	b.n	8005de6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dec:	461a      	mov	r2, r3
 8005dee:	2300      	movs	r3, #0
 8005df0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	4619      	mov	r1, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e00:	461a      	mov	r2, r3
 8005e02:	680b      	ldr	r3, [r1, #0]
 8005e04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d10c      	bne.n	8005e26 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e12:	2100      	movs	r1, #0
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f965 	bl	80060e4 <USB_SetDevSpeed>
 8005e1a:	e008      	b.n	8005e2e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f960 	bl	80060e4 <USB_SetDevSpeed>
 8005e24:	e003      	b.n	8005e2e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e26:	2103      	movs	r1, #3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f95b 	bl	80060e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e2e:	2110      	movs	r1, #16
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8f3 	bl	800601c <USB_FlushTxFifo>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f91f 	bl	8006084 <USB_FlushRxFifo>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	461a      	mov	r2, r3
 8005e58:	2300      	movs	r3, #0
 8005e5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	461a      	mov	r2, r3
 8005e64:	2300      	movs	r3, #0
 8005e66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2300      	movs	r3, #0
 8005e72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	e043      	b.n	8005f02 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e90:	d118      	bne.n	8005ec4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e013      	b.n	8005ed6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e008      	b.n	8005ed6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005efa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	3301      	adds	r3, #1
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d3b7      	bcc.n	8005e7a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	e043      	b.n	8005f98 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f26:	d118      	bne.n	8005f5a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e013      	b.n	8005f6c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	e008      	b.n	8005f6c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3301      	adds	r3, #1
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d3b7      	bcc.n	8005f10 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005fc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d105      	bne.n	8005fd4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f043 0210 	orr.w	r2, r3, #16
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699a      	ldr	r2, [r3, #24]
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <USB_DevInit+0x2c4>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f043 0208 	orr.w	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d107      	bne.n	8006008 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006000:	f043 0304 	orr.w	r3, r3, #4
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006008:	7dfb      	ldrb	r3, [r7, #23]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006014:	b004      	add	sp, #16
 8006016:	4770      	bx	lr
 8006018:	803c3800 	.word	0x803c3800

0800601c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a13      	ldr	r2, [pc, #76]	; (8006080 <USB_FlushTxFifo+0x64>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d901      	bls.n	800603c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e01b      	b.n	8006074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	daf2      	bge.n	800602a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	019b      	lsls	r3, r3, #6
 800604c:	f043 0220 	orr.w	r2, r3, #32
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a08      	ldr	r2, [pc, #32]	; (8006080 <USB_FlushTxFifo+0x64>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e006      	b.n	8006074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b20      	cmp	r3, #32
 8006070:	d0f0      	beq.n	8006054 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	00030d40 	.word	0x00030d40

08006084 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <USB_FlushRxFifo+0x5c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e018      	b.n	80060d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	daf2      	bge.n	8006090 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2210      	movs	r2, #16
 80060b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <USB_FlushRxFifo+0x5c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e006      	b.n	80060d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d0f0      	beq.n	80060b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	00030d40 	.word	0x00030d40

080060e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006104:	4313      	orrs	r3, r2
 8006106:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006116:	b480      	push	{r7}
 8006118:	b087      	sub	sp, #28
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0306 	and.w	r3, r3, #6
 800612e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]
 800613a:	e00a      	b.n	8006152 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d002      	beq.n	8006148 <USB_GetDevSpeed+0x32>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b06      	cmp	r3, #6
 8006146:	d102      	bne.n	800614e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006148:	2302      	movs	r3, #2
 800614a:	75fb      	strb	r3, [r7, #23]
 800614c:	e001      	b.n	8006152 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800614e:	230f      	movs	r3, #15
 8006150:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
}
 8006154:	4618      	mov	r0, r3
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d13a      	bne.n	80061f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	2101      	movs	r1, #1
 800618e:	fa01 f303 	lsl.w	r3, r1, r3
 8006192:	b29b      	uxth	r3, r3
 8006194:	68f9      	ldr	r1, [r7, #12]
 8006196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800619a:	4313      	orrs	r3, r2
 800619c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d155      	bne.n	8006260 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	791b      	ldrb	r3, [r3, #4]
 80061ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	059b      	lsls	r3, r3, #22
 80061d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061d8:	4313      	orrs	r3, r2
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e036      	b.n	8006260 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f8:	69da      	ldr	r2, [r3, #28]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	2101      	movs	r1, #1
 8006204:	fa01 f303 	lsl.w	r3, r1, r3
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006210:	4313      	orrs	r3, r2
 8006212:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d11a      	bne.n	8006260 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	791b      	ldrb	r3, [r3, #4]
 8006244:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006246:	430b      	orrs	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d161      	bne.n	8006350 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800629e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062a2:	d11f      	bne.n	80062e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006304:	4013      	ands	r3, r2
 8006306:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	2101      	movs	r1, #1
 800631a:	fa01 f303 	lsl.w	r3, r1, r3
 800631e:	b29b      	uxth	r3, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	68f9      	ldr	r1, [r7, #12]
 8006324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006328:	4013      	ands	r3, r2
 800632a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	0159      	lsls	r1, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	440b      	add	r3, r1
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	4619      	mov	r1, r3
 8006348:	4b35      	ldr	r3, [pc, #212]	; (8006420 <USB_DeactivateEndpoint+0x1b0>)
 800634a:	4013      	ands	r3, r2
 800634c:	600b      	str	r3, [r1, #0]
 800634e:	e060      	b.n	8006412 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006366:	d11f      	bne.n	80063a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006386:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	2101      	movs	r1, #1
 80063ba:	fa01 f303 	lsl.w	r3, r1, r3
 80063be:	041b      	lsls	r3, r3, #16
 80063c0:	43db      	mvns	r3, r3
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c8:	4013      	ands	r3, r2
 80063ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	2101      	movs	r1, #1
 80063de:	fa01 f303 	lsl.w	r3, r1, r3
 80063e2:	041b      	lsls	r3, r3, #16
 80063e4:	43db      	mvns	r3, r3
 80063e6:	68f9      	ldr	r1, [r7, #12]
 80063e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ec:	4013      	ands	r3, r2
 80063ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	0159      	lsls	r1, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	440b      	add	r3, r1
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	4619      	mov	r1, r3
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <USB_DeactivateEndpoint+0x1b4>)
 800640e:	4013      	ands	r3, r2
 8006410:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	ec337800 	.word	0xec337800
 8006424:	eff37800 	.word	0xeff37800

08006428 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	; 0x28
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	2b01      	cmp	r3, #1
 8006446:	f040 815c 	bne.w	8006702 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d132      	bne.n	80064b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	440a      	add	r2, r1
 800648c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006494:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b0:	0cdb      	lsrs	r3, r3, #19
 80064b2:	04db      	lsls	r3, r3, #19
 80064b4:	6113      	str	r3, [r2, #16]
 80064b6:	e074      	b.n	80065a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d2:	0cdb      	lsrs	r3, r3, #19
 80064d4:	04db      	lsls	r3, r3, #19
 80064d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	440b      	add	r3, r1
 8006514:	1e59      	subs	r1, r3, #1
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	fbb1 f3f3 	udiv	r3, r1, r3
 800651e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006520:	4b9d      	ldr	r3, [pc, #628]	; (8006798 <USB_EPStartXfer+0x370>)
 8006522:	400b      	ands	r3, r1
 8006524:	69b9      	ldr	r1, [r7, #24]
 8006526:	0148      	lsls	r0, r1, #5
 8006528:	69f9      	ldr	r1, [r7, #28]
 800652a:	4401      	add	r1, r0
 800652c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006530:	4313      	orrs	r3, r2
 8006532:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	0148      	lsls	r0, r1, #5
 800654e:	69f9      	ldr	r1, [r7, #28]
 8006550:	4401      	add	r1, r0
 8006552:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006556:	4313      	orrs	r3, r2
 8006558:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	791b      	ldrb	r3, [r3, #4]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d11f      	bne.n	80065a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	0151      	lsls	r1, r2, #5
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	440a      	add	r2, r1
 8006578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006580:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d14b      	bne.n	8006640 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065bc:	461a      	mov	r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	791b      	ldrb	r3, [r3, #4]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d128      	bne.n	800661e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d110      	bne.n	80065fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	e00f      	b.n	800661e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006638:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	e133      	b.n	80068a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800665e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	791b      	ldrb	r3, [r3, #4]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d015      	beq.n	8006694 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 811b 	beq.w	80068a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	2101      	movs	r1, #1
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	69f9      	ldr	r1, [r7, #28]
 800668a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800668e:	4313      	orrs	r3, r2
 8006690:	634b      	str	r3, [r1, #52]	; 0x34
 8006692:	e109      	b.n	80068a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d110      	bne.n	80066c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	e00f      	b.n	80066e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6919      	ldr	r1, [r3, #16]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	b298      	uxth	r0, r3
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	4603      	mov	r3, r0
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fade 	bl	8006cbc <USB_WritePacket>
 8006700:	e0d2      	b.n	80068a8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671c:	0cdb      	lsrs	r3, r3, #19
 800671e:	04db      	lsls	r3, r3, #19
 8006720:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	440a      	add	r2, r1
 8006738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800673c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006740:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006744:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d126      	bne.n	800679c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006764:	69b9      	ldr	r1, [r7, #24]
 8006766:	0148      	lsls	r0, r1, #5
 8006768:	69f9      	ldr	r1, [r7, #28]
 800676a:	4401      	add	r1, r0
 800676c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006770:	4313      	orrs	r3, r2
 8006772:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	440a      	add	r2, r1
 800678a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006792:	6113      	str	r3, [r2, #16]
 8006794:	e03a      	b.n	800680c <USB_EPStartXfer+0x3e4>
 8006796:	bf00      	nop
 8006798:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	1e5a      	subs	r2, r3, #1
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	8afa      	ldrh	r2, [r7, #22]
 80067b8:	fb03 f202 	mul.w	r2, r3, r2
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	8afb      	ldrh	r3, [r7, #22]
 80067d0:	04d9      	lsls	r1, r3, #19
 80067d2:	4b38      	ldr	r3, [pc, #224]	; (80068b4 <USB_EPStartXfer+0x48c>)
 80067d4:	400b      	ands	r3, r1
 80067d6:	69b9      	ldr	r1, [r7, #24]
 80067d8:	0148      	lsls	r0, r1, #5
 80067da:	69f9      	ldr	r1, [r7, #28]
 80067dc:	4401      	add	r1, r0
 80067de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067e2:	4313      	orrs	r3, r2
 80067e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067fc:	69b9      	ldr	r1, [r7, #24]
 80067fe:	0148      	lsls	r0, r1, #5
 8006800:	69f9      	ldr	r1, [r7, #28]
 8006802:	4401      	add	r1, r0
 8006804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006808:	4313      	orrs	r3, r2
 800680a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d10d      	bne.n	800682e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6919      	ldr	r1, [r3, #16]
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	460a      	mov	r2, r1
 800682c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	791b      	ldrb	r3, [r3, #4]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d128      	bne.n	8006888 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d110      	bne.n	8006868 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	440a      	add	r2, r1
 800685c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e00f      	b.n	8006888 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	440a      	add	r2, r1
 800687e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006886:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	440a      	add	r2, r1
 800689e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	1ff80000 	.word	0x1ff80000

080068b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4613      	mov	r3, r2
 80068c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	f040 80ce 	bne.w	8006a76 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d132      	bne.n	8006948 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006900:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006904:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	440a      	add	r2, r1
 800691c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006924:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	0151      	lsls	r1, r2, #5
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	440a      	add	r2, r1
 800693c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006940:	0cdb      	lsrs	r3, r3, #19
 8006942:	04db      	lsls	r3, r3, #19
 8006944:	6113      	str	r3, [r2, #16]
 8006946:	e04e      	b.n	80069e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	440a      	add	r2, r1
 800695e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006962:	0cdb      	lsrs	r3, r3, #19
 8006964:	04db      	lsls	r3, r3, #19
 8006966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006982:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006986:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800698a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	699a      	ldr	r2, [r3, #24]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	429a      	cmp	r2, r3
 8006996:	d903      	bls.n	80069a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069d6:	6939      	ldr	r1, [r7, #16]
 80069d8:	0148      	lsls	r0, r1, #5
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	4401      	add	r1, r0
 80069de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069e2:	4313      	orrs	r3, r2
 80069e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d11e      	bne.n	8006a2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d009      	beq.n	8006a08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	461a      	mov	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	e097      	b.n	8006b5a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 8083 	beq.w	8006b5a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	2101      	movs	r1, #1
 8006a66:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6a:	6979      	ldr	r1, [r7, #20]
 8006a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a70:	4313      	orrs	r3, r2
 8006a72:	634b      	str	r3, [r1, #52]	; 0x34
 8006a74:	e071      	b.n	8006b5a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a90:	0cdb      	lsrs	r3, r3, #19
 8006a92:	04db      	lsls	r3, r3, #19
 8006a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ab4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ab8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006af0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afe:	691a      	ldr	r2, [r3, #16]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b08:	6939      	ldr	r1, [r7, #16]
 8006b0a:	0148      	lsls	r0, r1, #5
 8006b0c:	6979      	ldr	r1, [r7, #20]
 8006b0e:	4401      	add	r1, r0
 8006b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b14:	4313      	orrs	r3, r2
 8006b16:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d10d      	bne.n	8006b3a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6919      	ldr	r1, [r3, #16]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	460a      	mov	r2, r1
 8006b38:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d14a      	bne.n	8006c1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b9e:	f040 8086 	bne.w	8006cae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	7812      	ldrb	r2, [r2, #0]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	7812      	ldrb	r2, [r2, #0]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d902      	bls.n	8006c00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006bfe:	e056      	b.n	8006cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c18:	d0e7      	beq.n	8006bea <USB_EPStopXfer+0x82>
 8006c1a:	e048      	b.n	8006cae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c34:	d13b      	bne.n	8006cae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	7812      	ldrb	r2, [r2, #0]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	7812      	ldrb	r2, [r2, #0]
 8006c6e:	0151      	lsls	r1, r2, #5
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	440a      	add	r2, r1
 8006c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3301      	adds	r3, #1
 8006c82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d902      	bls.n	8006c94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
          break;
 8006c92:	e00c      	b.n	8006cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cac:	d0e7      	beq.n	8006c7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	; 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	461a      	mov	r2, r3
 8006cca:	460b      	mov	r3, r1
 8006ccc:	71fb      	strb	r3, [r7, #7]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006cda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d123      	bne.n	8006d2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ce2:	88bb      	ldrh	r3, [r7, #4]
 8006ce4:	3303      	adds	r3, #3
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	e018      	b.n	8006d22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	031a      	lsls	r2, r3, #12
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	3301      	adds	r3, #1
 8006d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d3e2      	bcc.n	8006cf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3724      	adds	r7, #36	; 0x24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b08b      	sub	sp, #44	; 0x2c
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	089b      	lsrs	r3, r3, #2
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	623b      	str	r3, [r7, #32]
 8006d62:	e014      	b.n	8006d8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	3301      	adds	r3, #1
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	3301      	adds	r3, #1
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	3301      	adds	r3, #1
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	3301      	adds	r3, #1
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	6a3a      	ldr	r2, [r7, #32]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d3e6      	bcc.n	8006d64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d96:	8bfb      	ldrh	r3, [r7, #30]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01e      	beq.n	8006dda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da6:	461a      	mov	r2, r3
 8006da8:	f107 0310 	add.w	r3, r7, #16
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	701a      	strb	r2, [r3, #0]
      i++;
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	3301      	adds	r3, #1
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006dce:	8bfb      	ldrh	r3, [r7, #30]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006dd4:	8bfb      	ldrh	r3, [r7, #30]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ea      	bne.n	8006db0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	372c      	adds	r7, #44	; 0x2c
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d12c      	bne.n	8006e5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	db12      	blt.n	8006e3c <USB_EPSetStall+0x54>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00f      	beq.n	8006e3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	e02b      	b.n	8006eb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	db12      	blt.n	8006e96 <USB_EPSetStall+0xae>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00f      	beq.n	8006e96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d128      	bne.n	8006f32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006efe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	791b      	ldrb	r3, [r3, #4]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d003      	beq.n	8006f10 <USB_EPClearStall+0x4c>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	791b      	ldrb	r3, [r3, #4]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d138      	bne.n	8006f82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e027      	b.n	8006f82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	791b      	ldrb	r3, [r3, #4]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d003      	beq.n	8006f62 <USB_EPClearStall+0x9e>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	791b      	ldrb	r3, [r3, #4]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d10f      	bne.n	8006f82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ff6:	f023 0303 	bic.w	r3, r3, #3
 8006ffa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700a:	f023 0302 	bic.w	r3, r3, #2
 800700e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007038:	f023 0303 	bic.w	r3, r3, #3
 800703c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800704c:	f043 0302 	orr.w	r3, r3, #2
 8007050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4013      	ands	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007078:	68fb      	ldr	r3, [r7, #12]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	4013      	ands	r3, r2
 80070a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	0c1b      	lsrs	r3, r3, #16
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	4013      	ands	r3, r2
 80070dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	b29b      	uxth	r3, r3
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4013      	ands	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800711c:	68bb      	ldr	r3, [r7, #8]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	fa22 f303 	lsr.w	r3, r2, r3
 800715a:	01db      	lsls	r3, r3, #7
 800715c:	b2db      	uxtb	r3, r3
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4013      	ands	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007178:	68bb      	ldr	r3, [r7, #8]
}
 800717a:	4618      	mov	r0, r3
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f003 0301 	and.w	r3, r3, #1
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071c0:	f023 0307 	bic.w	r3, r3, #7
 80071c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	460b      	mov	r3, r1
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	333c      	adds	r3, #60	; 0x3c
 80071fe:	3304      	adds	r3, #4
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4a26      	ldr	r2, [pc, #152]	; (80072a0 <USB_EP0_OutStart+0xb8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d90a      	bls.n	8007222 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800721c:	d101      	bne.n	8007222 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	e037      	b.n	8007292 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007228:	461a      	mov	r2, r3
 800722a:	2300      	movs	r3, #0
 800722c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007240:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007250:	f043 0318 	orr.w	r3, r3, #24
 8007254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007264:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007268:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d10f      	bne.n	8007290 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007276:	461a      	mov	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800728e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	4f54300a 	.word	0x4f54300a

080072a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a13      	ldr	r2, [pc, #76]	; (8007308 <USB_CoreReset+0x64>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d901      	bls.n	80072c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e01b      	b.n	80072fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	daf2      	bge.n	80072b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f043 0201 	orr.w	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4a09      	ldr	r2, [pc, #36]	; (8007308 <USB_CoreReset+0x64>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d901      	bls.n	80072ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e006      	b.n	80072fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d0f0      	beq.n	80072da <USB_CoreReset+0x36>

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	00030d40 	.word	0x00030d40

0800730c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007318:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800731c:	f002 fc1e 	bl	8009b5c <USBD_static_malloc>
 8007320:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	32b0      	adds	r2, #176	; 0xb0
 8007332:	2100      	movs	r1, #0
 8007334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007338:	2302      	movs	r3, #2
 800733a:	e0d4      	b.n	80074e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800733c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007340:	2100      	movs	r1, #0
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f002 fc72 	bl	8009c2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	32b0      	adds	r2, #176	; 0xb0
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	32b0      	adds	r2, #176	; 0xb0
 8007362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7c1b      	ldrb	r3, [r3, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d138      	bne.n	80073e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007374:	4b5e      	ldr	r3, [pc, #376]	; (80074f0 <USBD_CDC_Init+0x1e4>)
 8007376:	7819      	ldrb	r1, [r3, #0]
 8007378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800737c:	2202      	movs	r2, #2
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f002 fac9 	bl	8009916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007384:	4b5a      	ldr	r3, [pc, #360]	; (80074f0 <USBD_CDC_Init+0x1e4>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	f003 020f 	and.w	r2, r3, #15
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	3324      	adds	r3, #36	; 0x24
 800739a:	2201      	movs	r2, #1
 800739c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800739e:	4b55      	ldr	r3, [pc, #340]	; (80074f4 <USBD_CDC_Init+0x1e8>)
 80073a0:	7819      	ldrb	r1, [r3, #0]
 80073a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a6:	2202      	movs	r2, #2
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f002 fab4 	bl	8009916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073ae:	4b51      	ldr	r3, [pc, #324]	; (80074f4 <USBD_CDC_Init+0x1e8>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f003 020f 	and.w	r2, r3, #15
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073c6:	2201      	movs	r2, #1
 80073c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073ca:	4b4b      	ldr	r3, [pc, #300]	; (80074f8 <USBD_CDC_Init+0x1ec>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	f003 020f 	and.w	r2, r3, #15
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	3326      	adds	r3, #38	; 0x26
 80073e0:	2210      	movs	r2, #16
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	e035      	b.n	8007452 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073e6:	4b42      	ldr	r3, [pc, #264]	; (80074f0 <USBD_CDC_Init+0x1e4>)
 80073e8:	7819      	ldrb	r1, [r3, #0]
 80073ea:	2340      	movs	r3, #64	; 0x40
 80073ec:	2202      	movs	r2, #2
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f002 fa91 	bl	8009916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073f4:	4b3e      	ldr	r3, [pc, #248]	; (80074f0 <USBD_CDC_Init+0x1e4>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f003 020f 	and.w	r2, r3, #15
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	3324      	adds	r3, #36	; 0x24
 800740a:	2201      	movs	r2, #1
 800740c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800740e:	4b39      	ldr	r3, [pc, #228]	; (80074f4 <USBD_CDC_Init+0x1e8>)
 8007410:	7819      	ldrb	r1, [r3, #0]
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	2202      	movs	r2, #2
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f002 fa7d 	bl	8009916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800741c:	4b35      	ldr	r3, [pc, #212]	; (80074f4 <USBD_CDC_Init+0x1e8>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 020f 	and.w	r2, r3, #15
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	440b      	add	r3, r1
 8007430:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007434:	2201      	movs	r2, #1
 8007436:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007438:	4b2f      	ldr	r3, [pc, #188]	; (80074f8 <USBD_CDC_Init+0x1ec>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	f003 020f 	and.w	r2, r3, #15
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	3326      	adds	r3, #38	; 0x26
 800744e:	2210      	movs	r2, #16
 8007450:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007452:	4b29      	ldr	r3, [pc, #164]	; (80074f8 <USBD_CDC_Init+0x1ec>)
 8007454:	7819      	ldrb	r1, [r3, #0]
 8007456:	2308      	movs	r3, #8
 8007458:	2203      	movs	r2, #3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f002 fa5b 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007460:	4b25      	ldr	r3, [pc, #148]	; (80074f8 <USBD_CDC_Init+0x1ec>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 020f 	and.w	r2, r3, #15
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	3324      	adds	r3, #36	; 0x24
 8007476:	2201      	movs	r2, #1
 8007478:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	33b0      	adds	r3, #176	; 0xb0
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80074b0:	2302      	movs	r3, #2
 80074b2:	e018      	b.n	80074e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7c1b      	ldrb	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074bc:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <USBD_CDC_Init+0x1e8>)
 80074be:	7819      	ldrb	r1, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f002 fb12 	bl	8009af4 <USBD_LL_PrepareReceive>
 80074d0:	e008      	b.n	80074e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074d2:	4b08      	ldr	r3, [pc, #32]	; (80074f4 <USBD_CDC_Init+0x1e8>)
 80074d4:	7819      	ldrb	r1, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074dc:	2340      	movs	r3, #64	; 0x40
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f002 fb08 	bl	8009af4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000097 	.word	0x20000097
 80074f4:	20000098 	.word	0x20000098
 80074f8:	20000099 	.word	0x20000099

080074fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007508:	4b3a      	ldr	r3, [pc, #232]	; (80075f4 <USBD_CDC_DeInit+0xf8>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f002 fa27 	bl	8009962 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007514:	4b37      	ldr	r3, [pc, #220]	; (80075f4 <USBD_CDC_DeInit+0xf8>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 020f 	and.w	r2, r3, #15
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	440b      	add	r3, r1
 8007528:	3324      	adds	r3, #36	; 0x24
 800752a:	2200      	movs	r2, #0
 800752c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800752e:	4b32      	ldr	r3, [pc, #200]	; (80075f8 <USBD_CDC_DeInit+0xfc>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f002 fa14 	bl	8009962 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800753a:	4b2f      	ldr	r3, [pc, #188]	; (80075f8 <USBD_CDC_DeInit+0xfc>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	f003 020f 	and.w	r2, r3, #15
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007552:	2200      	movs	r2, #0
 8007554:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007556:	4b29      	ldr	r3, [pc, #164]	; (80075fc <USBD_CDC_DeInit+0x100>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f002 fa00 	bl	8009962 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007562:	4b26      	ldr	r3, [pc, #152]	; (80075fc <USBD_CDC_DeInit+0x100>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	f003 020f 	and.w	r2, r3, #15
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	3324      	adds	r3, #36	; 0x24
 8007578:	2200      	movs	r2, #0
 800757a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800757c:	4b1f      	ldr	r3, [pc, #124]	; (80075fc <USBD_CDC_DeInit+0x100>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	f003 020f 	and.w	r2, r3, #15
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	4613      	mov	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	440b      	add	r3, r1
 8007590:	3326      	adds	r3, #38	; 0x26
 8007592:	2200      	movs	r2, #0
 8007594:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	32b0      	adds	r2, #176	; 0xb0
 80075a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01f      	beq.n	80075e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	33b0      	adds	r3, #176	; 0xb0
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32b0      	adds	r2, #176	; 0xb0
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f002 fad4 	bl	8009b78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	32b0      	adds	r2, #176	; 0xb0
 80075da:	2100      	movs	r1, #0
 80075dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000097 	.word	0x20000097
 80075f8:	20000098 	.word	0x20000098
 80075fc:	20000099 	.word	0x20000099

08007600 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	32b0      	adds	r2, #176	; 0xb0
 8007614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007618:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800762c:	2303      	movs	r3, #3
 800762e:	e0bf      	b.n	80077b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007638:	2b00      	cmp	r3, #0
 800763a:	d050      	beq.n	80076de <USBD_CDC_Setup+0xde>
 800763c:	2b20      	cmp	r3, #32
 800763e:	f040 80af 	bne.w	80077a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	88db      	ldrh	r3, [r3, #6]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d03a      	beq.n	80076c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	b25b      	sxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	da1b      	bge.n	800768c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	33b0      	adds	r3, #176	; 0xb0
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800766a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	88d2      	ldrh	r2, [r2, #6]
 8007670:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	88db      	ldrh	r3, [r3, #6]
 8007676:	2b07      	cmp	r3, #7
 8007678:	bf28      	it	cs
 800767a:	2307      	movcs	r3, #7
 800767c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	89fa      	ldrh	r2, [r7, #14]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 fd43 	bl	8009110 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800768a:	e090      	b.n	80077ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	785a      	ldrb	r2, [r3, #1]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	88db      	ldrh	r3, [r3, #6]
 800769a:	2b3f      	cmp	r3, #63	; 0x3f
 800769c:	d803      	bhi.n	80076a6 <USBD_CDC_Setup+0xa6>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	88db      	ldrh	r3, [r3, #6]
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	e000      	b.n	80076a8 <USBD_CDC_Setup+0xa8>
 80076a6:	2240      	movs	r2, #64	; 0x40
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80076ae:	6939      	ldr	r1, [r7, #16]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80076b6:	461a      	mov	r2, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fd55 	bl	8009168 <USBD_CtlPrepareRx>
      break;
 80076be:	e076      	b.n	80077ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	33b0      	adds	r3, #176	; 0xb0
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	7850      	ldrb	r0, [r2, #1]
 80076d6:	2200      	movs	r2, #0
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	4798      	blx	r3
      break;
 80076dc:	e067      	b.n	80077ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	785b      	ldrb	r3, [r3, #1]
 80076e2:	2b0b      	cmp	r3, #11
 80076e4:	d851      	bhi.n	800778a <USBD_CDC_Setup+0x18a>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <USBD_CDC_Setup+0xec>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	0800771d 	.word	0x0800771d
 80076f0:	08007799 	.word	0x08007799
 80076f4:	0800778b 	.word	0x0800778b
 80076f8:	0800778b 	.word	0x0800778b
 80076fc:	0800778b 	.word	0x0800778b
 8007700:	0800778b 	.word	0x0800778b
 8007704:	0800778b 	.word	0x0800778b
 8007708:	0800778b 	.word	0x0800778b
 800770c:	0800778b 	.word	0x0800778b
 8007710:	0800778b 	.word	0x0800778b
 8007714:	08007747 	.word	0x08007747
 8007718:	08007771 	.word	0x08007771
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b03      	cmp	r3, #3
 8007726:	d107      	bne.n	8007738 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007728:	f107 030a 	add.w	r3, r7, #10
 800772c:	2202      	movs	r2, #2
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 fced 	bl	8009110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007736:	e032      	b.n	800779e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fc77 	bl	800902e <USBD_CtlError>
            ret = USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	75fb      	strb	r3, [r7, #23]
          break;
 8007744:	e02b      	b.n	800779e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b03      	cmp	r3, #3
 8007750:	d107      	bne.n	8007762 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007752:	f107 030d 	add.w	r3, r7, #13
 8007756:	2201      	movs	r2, #1
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 fcd8 	bl	8009110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007760:	e01d      	b.n	800779e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fc62 	bl	800902e <USBD_CtlError>
            ret = USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	75fb      	strb	r3, [r7, #23]
          break;
 800776e:	e016      	b.n	800779e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b03      	cmp	r3, #3
 800777a:	d00f      	beq.n	800779c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fc55 	bl	800902e <USBD_CtlError>
            ret = USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007788:	e008      	b.n	800779c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fc4e 	bl	800902e <USBD_CtlError>
          ret = USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	75fb      	strb	r3, [r7, #23]
          break;
 8007796:	e002      	b.n	800779e <USBD_CDC_Setup+0x19e>
          break;
 8007798:	bf00      	nop
 800779a:	e008      	b.n	80077ae <USBD_CDC_Setup+0x1ae>
          break;
 800779c:	bf00      	nop
      }
      break;
 800779e:	e006      	b.n	80077ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 fc43 	bl	800902e <USBD_CtlError>
      ret = USBD_FAIL;
 80077a8:	2303      	movs	r3, #3
 80077aa:	75fb      	strb	r3, [r7, #23]
      break;
 80077ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32b0      	adds	r2, #176	; 0xb0
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80077de:	2303      	movs	r3, #3
 80077e0:	e065      	b.n	80078ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	32b0      	adds	r2, #176	; 0xb0
 80077ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	3318      	adds	r3, #24
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d02f      	beq.n	800786c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f003 020f 	and.w	r2, r3, #15
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	3318      	adds	r3, #24
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	f003 010f 	and.w	r1, r3, #15
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	460b      	mov	r3, r1
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	440b      	add	r3, r1
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4403      	add	r3, r0
 8007834:	3348      	adds	r3, #72	; 0x48
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	fbb2 f1f3 	udiv	r1, r2, r3
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007842:	2b00      	cmp	r3, #0
 8007844:	d112      	bne.n	800786c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007846:	78fb      	ldrb	r3, [r7, #3]
 8007848:	f003 020f 	and.w	r2, r3, #15
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	3318      	adds	r3, #24
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800785e:	78f9      	ldrb	r1, [r7, #3]
 8007860:	2300      	movs	r3, #0
 8007862:	2200      	movs	r2, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f002 f924 	bl	8009ab2 <USBD_LL_Transmit>
 800786a:	e01f      	b.n	80078ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	33b0      	adds	r3, #176	; 0xb0
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d010      	beq.n	80078ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	33b0      	adds	r3, #176	; 0xb0
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	32b0      	adds	r2, #176	; 0xb0
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	32b0      	adds	r2, #176	; 0xb0
 80078dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e01a      	b.n	800791e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f002 f922 	bl	8009b36 <USBD_LL_GetRxDataSize>
 80078f2:	4602      	mov	r2, r0
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	33b0      	adds	r3, #176	; 0xb0
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007918:	4611      	mov	r1, r2
 800791a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	32b0      	adds	r2, #176	; 0xb0
 8007938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	e025      	b.n	8007994 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	33b0      	adds	r3, #176	; 0xb0
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01a      	beq.n	8007992 <USBD_CDC_EP0_RxReady+0x6c>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007962:	2bff      	cmp	r3, #255	; 0xff
 8007964:	d015      	beq.n	8007992 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	33b0      	adds	r3, #176	; 0xb0
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800797e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007986:	b292      	uxth	r2, r2
 8007988:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	22ff      	movs	r2, #255	; 0xff
 800798e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079a4:	2182      	movs	r1, #130	; 0x82
 80079a6:	4818      	ldr	r0, [pc, #96]	; (8007a08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079a8:	f000 fd09 	bl	80083be <USBD_GetEpDesc>
 80079ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079ae:	2101      	movs	r1, #1
 80079b0:	4815      	ldr	r0, [pc, #84]	; (8007a08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079b2:	f000 fd04 	bl	80083be <USBD_GetEpDesc>
 80079b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079b8:	2181      	movs	r1, #129	; 0x81
 80079ba:	4813      	ldr	r0, [pc, #76]	; (8007a08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079bc:	f000 fcff 	bl	80083be <USBD_GetEpDesc>
 80079c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2210      	movs	r2, #16
 80079cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079dc:	711a      	strb	r2, [r3, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f0:	711a      	strb	r2, [r3, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2243      	movs	r2, #67	; 0x43
 80079fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079fc:	4b02      	ldr	r3, [pc, #8]	; (8007a08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000054 	.word	0x20000054

08007a0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a14:	2182      	movs	r1, #130	; 0x82
 8007a16:	4818      	ldr	r0, [pc, #96]	; (8007a78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a18:	f000 fcd1 	bl	80083be <USBD_GetEpDesc>
 8007a1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4815      	ldr	r0, [pc, #84]	; (8007a78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a22:	f000 fccc 	bl	80083be <USBD_GetEpDesc>
 8007a26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a28:	2181      	movs	r1, #129	; 0x81
 8007a2a:	4813      	ldr	r0, [pc, #76]	; (8007a78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a2c:	f000 fcc7 	bl	80083be <USBD_GetEpDesc>
 8007a30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2210      	movs	r2, #16
 8007a3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d006      	beq.n	8007a52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2200      	movs	r2, #0
 8007a48:	711a      	strb	r2, [r3, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f042 0202 	orr.w	r2, r2, #2
 8007a50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d006      	beq.n	8007a66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	711a      	strb	r2, [r3, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f042 0202 	orr.w	r2, r2, #2
 8007a64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2243      	movs	r2, #67	; 0x43
 8007a6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a6c:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000054 	.word	0x20000054

08007a7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a84:	2182      	movs	r1, #130	; 0x82
 8007a86:	4818      	ldr	r0, [pc, #96]	; (8007ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a88:	f000 fc99 	bl	80083be <USBD_GetEpDesc>
 8007a8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a8e:	2101      	movs	r1, #1
 8007a90:	4815      	ldr	r0, [pc, #84]	; (8007ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a92:	f000 fc94 	bl	80083be <USBD_GetEpDesc>
 8007a96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a98:	2181      	movs	r1, #129	; 0x81
 8007a9a:	4813      	ldr	r0, [pc, #76]	; (8007ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a9c:	f000 fc8f 	bl	80083be <USBD_GetEpDesc>
 8007aa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d006      	beq.n	8007ac2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007abc:	711a      	strb	r2, [r3, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d006      	beq.n	8007ad6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ad0:	711a      	strb	r2, [r3, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2243      	movs	r2, #67	; 0x43
 8007ada:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000054 	.word	0x20000054

08007aec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	220a      	movs	r2, #10
 8007af8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007afa:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	20000010 	.word	0x20000010

08007b0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e009      	b.n	8007b34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	33b0      	adds	r3, #176	; 0xb0
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	32b0      	adds	r2, #176	; 0xb0
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e008      	b.n	8007b78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	371c      	adds	r7, #28
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	32b0      	adds	r2, #176	; 0xb0
 8007b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e004      	b.n	8007bb2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
	...

08007bc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	32b0      	adds	r2, #176	; 0xb0
 8007bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	32b0      	adds	r2, #176	; 0xb0
 8007be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e018      	b.n	8007c20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7c1b      	ldrb	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <USBD_CDC_ReceivePacket+0x68>)
 8007bf8:	7819      	ldrb	r1, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 ff75 	bl	8009af4 <USBD_LL_PrepareReceive>
 8007c0a:	e008      	b.n	8007c1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <USBD_CDC_ReceivePacket+0x68>)
 8007c0e:	7819      	ldrb	r1, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c16:	2340      	movs	r3, #64	; 0x40
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 ff6b 	bl	8009af4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20000098 	.word	0x20000098

08007c2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e01f      	b.n	8007c84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	79fa      	ldrb	r2, [r7, #7]
 8007c76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f001 fde5 	bl	8009848 <USBD_LL_Init>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e025      	b.n	8007cf0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	32ae      	adds	r2, #174	; 0xae
 8007cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00f      	beq.n	8007ce0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	32ae      	adds	r2, #174	; 0xae
 8007cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	f107 020e 	add.w	r2, r7, #14
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	4602      	mov	r2, r0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fded 	bl	80098e0 <USBD_LL_Start>
 8007d06:	4603      	mov	r3, r0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d009      	beq.n	8007d54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	78fa      	ldrb	r2, [r7, #3]
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	78fa      	ldrb	r2, [r7, #3]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 f908 	bl	8008fba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007db8:	461a      	mov	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dc6:	f003 031f 	and.w	r3, r3, #31
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d01a      	beq.n	8007e04 <USBD_LL_SetupStage+0x72>
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d822      	bhi.n	8007e18 <USBD_LL_SetupStage+0x86>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <USBD_LL_SetupStage+0x4a>
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d00a      	beq.n	8007df0 <USBD_LL_SetupStage+0x5e>
 8007dda:	e01d      	b.n	8007e18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fb5f 	bl	80084a8 <USBD_StdDevReq>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
      break;
 8007dee:	e020      	b.n	8007e32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fbc7 	bl	800858c <USBD_StdItfReq>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]
      break;
 8007e02:	e016      	b.n	8007e32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc29 	bl	8008664 <USBD_StdEPReq>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
      break;
 8007e16:	e00c      	b.n	8007e32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fdba 	bl	80099a0 <USBD_LL_StallEP>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e30:	bf00      	nop
  }

  return ret;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	460b      	mov	r3, r1
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d16e      	bne.n	8007f32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	f040 8098 	bne.w	8007f98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d913      	bls.n	8007e9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	1ad2      	subs	r2, r2, r3
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	bf28      	it	cs
 8007e8e:	4613      	movcs	r3, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f001 f984 	bl	80091a2 <USBD_CtlContinueRx>
 8007e9a:	e07d      	b.n	8007f98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d014      	beq.n	8007ed4 <USBD_LL_DataOutStage+0x98>
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d81d      	bhi.n	8007eea <USBD_LL_DataOutStage+0xae>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <USBD_LL_DataOutStage+0x7c>
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d003      	beq.n	8007ebe <USBD_LL_DataOutStage+0x82>
 8007eb6:	e018      	b.n	8007eea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	75bb      	strb	r3, [r7, #22]
            break;
 8007ebc:	e018      	b.n	8007ef0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 fa5e 	bl	800838a <USBD_CoreFindIF>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75bb      	strb	r3, [r7, #22]
            break;
 8007ed2:	e00d      	b.n	8007ef0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	4619      	mov	r1, r3
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 fa60 	bl	80083a4 <USBD_CoreFindEP>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75bb      	strb	r3, [r7, #22]
            break;
 8007ee8:	e002      	b.n	8007ef0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75bb      	strb	r3, [r7, #22]
            break;
 8007eee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ef0:	7dbb      	ldrb	r3, [r7, #22]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d119      	bne.n	8007f2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d113      	bne.n	8007f2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f02:	7dba      	ldrb	r2, [r7, #22]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	32ae      	adds	r2, #174	; 0xae
 8007f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007f12:	7dba      	ldrb	r2, [r7, #22]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007f1a:	7dba      	ldrb	r2, [r7, #22]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	32ae      	adds	r2, #174	; 0xae
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f001 f94a 	bl	80091c4 <USBD_CtlSendStatus>
 8007f30:	e032      	b.n	8007f98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 fa31 	bl	80083a4 <USBD_CoreFindEP>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f46:	7dbb      	ldrb	r3, [r7, #22]
 8007f48:	2bff      	cmp	r3, #255	; 0xff
 8007f4a:	d025      	beq.n	8007f98 <USBD_LL_DataOutStage+0x15c>
 8007f4c:	7dbb      	ldrb	r3, [r7, #22]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d122      	bne.n	8007f98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d117      	bne.n	8007f8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007f5e:	7dba      	ldrb	r2, [r7, #22]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	32ae      	adds	r2, #174	; 0xae
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00f      	beq.n	8007f8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007f6e:	7dba      	ldrb	r2, [r7, #22]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007f76:	7dba      	ldrb	r2, [r7, #22]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	32ae      	adds	r2, #174	; 0xae
 8007f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	7afa      	ldrb	r2, [r7, #11]
 8007f84:	4611      	mov	r1, r2
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	4798      	blx	r3
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	e000      	b.n	8007f9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b086      	sub	sp, #24
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	460b      	mov	r3, r1
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d16f      	bne.n	8008096 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3314      	adds	r3, #20
 8007fba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d15a      	bne.n	800807c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d914      	bls.n	8007ffc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f001 f8ac 	bl	8009146 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f001 fd7d 	bl	8009af4 <USBD_LL_PrepareReceive>
 8007ffa:	e03f      	b.n	800807c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	429a      	cmp	r2, r3
 8008006:	d11c      	bne.n	8008042 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008010:	429a      	cmp	r2, r3
 8008012:	d316      	bcc.n	8008042 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800801e:	429a      	cmp	r2, r3
 8008020:	d20f      	bcs.n	8008042 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008022:	2200      	movs	r2, #0
 8008024:	2100      	movs	r1, #0
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f001 f88d 	bl	8009146 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008034:	2300      	movs	r3, #0
 8008036:	2200      	movs	r2, #0
 8008038:	2100      	movs	r1, #0
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f001 fd5a 	bl	8009af4 <USBD_LL_PrepareReceive>
 8008040:	e01c      	b.n	800807c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b03      	cmp	r3, #3
 800804c:	d10f      	bne.n	800806e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d009      	beq.n	800806e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800806e:	2180      	movs	r1, #128	; 0x80
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f001 fc95 	bl	80099a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f001 f8b7 	bl	80091ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d03a      	beq.n	80080fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fe42 	bl	8007d10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008094:	e032      	b.n	80080fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800809c:	b2db      	uxtb	r3, r3
 800809e:	4619      	mov	r1, r3
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f97f 	bl	80083a4 <USBD_CoreFindEP>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2bff      	cmp	r3, #255	; 0xff
 80080ae:	d025      	beq.n	80080fc <USBD_LL_DataInStage+0x15a>
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d122      	bne.n	80080fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d11c      	bne.n	80080fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80080c2:	7dfa      	ldrb	r2, [r7, #23]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	32ae      	adds	r2, #174	; 0xae
 80080c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d014      	beq.n	80080fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80080d2:	7dfa      	ldrb	r2, [r7, #23]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80080da:	7dfa      	ldrb	r2, [r7, #23]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	32ae      	adds	r2, #174	; 0xae
 80080e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	7afa      	ldrb	r2, [r7, #11]
 80080e8:	4611      	mov	r1, r2
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	4798      	blx	r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80080f2:	7dbb      	ldrb	r3, [r7, #22]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80080f8:	7dbb      	ldrb	r3, [r7, #22]
 80080fa:	e000      	b.n	80080fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d014      	beq.n	800816c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00e      	beq.n	800816c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6852      	ldr	r2, [r2, #4]
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	4611      	mov	r1, r2
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	2200      	movs	r2, #0
 8008170:	2100      	movs	r1, #0
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 fbcf 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008188:	2340      	movs	r3, #64	; 0x40
 800818a:	2200      	movs	r2, #0
 800818c:	2180      	movs	r1, #128	; 0x80
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 fbc1 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2240      	movs	r2, #64	; 0x40
 800819e:	621a      	str	r2, [r3, #32]

  return ret;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b083      	sub	sp, #12
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2204      	movs	r2, #4
 80081e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b04      	cmp	r3, #4
 8008208:	d106      	bne.n	8008218 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008210:	b2da      	uxtb	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b03      	cmp	r3, #3
 8008238:	d110      	bne.n	800825c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	32ae      	adds	r2, #174	; 0xae
 800827c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	e01c      	b.n	80082c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b03      	cmp	r3, #3
 8008292:	d115      	bne.n	80082c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	32ae      	adds	r2, #174	; 0xae
 800829e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	32ae      	adds	r2, #174	; 0xae
 80082b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	78fa      	ldrb	r2, [r7, #3]
 80082ba:	4611      	mov	r1, r2
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	32ae      	adds	r2, #174	; 0xae
 80082e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e01c      	b.n	8008326 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d115      	bne.n	8008324 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32ae      	adds	r2, #174	; 0xae
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32ae      	adds	r2, #174	; 0xae
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	4611      	mov	r1, r2
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00e      	beq.n	8008380 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6852      	ldr	r2, [r2, #4]
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	4611      	mov	r1, r2
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	4798      	blx	r3
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800837c:	2303      	movs	r3, #3
 800837e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008396:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80083b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	885b      	ldrh	r3, [r3, #2]
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d920      	bls.n	8008428 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80083ee:	e013      	b.n	8008418 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80083f0:	f107 030a 	add.w	r3, r7, #10
 80083f4:	4619      	mov	r1, r3
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	f000 f81b 	bl	8008432 <USBD_GetNextDesc>
 80083fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b05      	cmp	r3, #5
 8008404:	d108      	bne.n	8008418 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	789b      	ldrb	r3, [r3, #2]
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	429a      	cmp	r2, r3
 8008412:	d008      	beq.n	8008426 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	885b      	ldrh	r3, [r3, #2]
 800841c:	b29a      	uxth	r2, r3
 800841e:	897b      	ldrh	r3, [r7, #10]
 8008420:	429a      	cmp	r2, r3
 8008422:	d8e5      	bhi.n	80083f0 <USBD_GetEpDesc+0x32>
 8008424:	e000      	b.n	8008428 <USBD_GetEpDesc+0x6a>
          break;
 8008426:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008428:	693b      	ldr	r3, [r7, #16]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	881a      	ldrh	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	4413      	add	r3, r2
 800844c:	b29a      	uxth	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800845e:	68fb      	ldr	r3, [r7, #12]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3301      	adds	r3, #1
 8008482:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800848a:	8a3b      	ldrh	r3, [r7, #16]
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	b21a      	sxth	r2, r3
 8008490:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008494:	4313      	orrs	r3, r2
 8008496:	b21b      	sxth	r3, r3
 8008498:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800849a:	89fb      	ldrh	r3, [r7, #14]
}
 800849c:	4618      	mov	r0, r3
 800849e:	371c      	adds	r7, #28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084be:	2b40      	cmp	r3, #64	; 0x40
 80084c0:	d005      	beq.n	80084ce <USBD_StdDevReq+0x26>
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d857      	bhi.n	8008576 <USBD_StdDevReq+0xce>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00f      	beq.n	80084ea <USBD_StdDevReq+0x42>
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d153      	bne.n	8008576 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	32ae      	adds	r2, #174	; 0xae
 80084d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]
      break;
 80084e8:	e04a      	b.n	8008580 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d83b      	bhi.n	800856a <USBD_StdDevReq+0xc2>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USBD_StdDevReq+0x50>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	0800854d 	.word	0x0800854d
 80084fc:	08008561 	.word	0x08008561
 8008500:	0800856b 	.word	0x0800856b
 8008504:	08008557 	.word	0x08008557
 8008508:	0800856b 	.word	0x0800856b
 800850c:	0800852b 	.word	0x0800852b
 8008510:	08008521 	.word	0x08008521
 8008514:	0800856b 	.word	0x0800856b
 8008518:	08008543 	.word	0x08008543
 800851c:	08008535 	.word	0x08008535
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa3c 	bl	80089a0 <USBD_GetDescriptor>
          break;
 8008528:	e024      	b.n	8008574 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fba1 	bl	8008c74 <USBD_SetAddress>
          break;
 8008532:	e01f      	b.n	8008574 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fbe0 	bl	8008cfc <USBD_SetConfig>
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]
          break;
 8008540:	e018      	b.n	8008574 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fc83 	bl	8008e50 <USBD_GetConfig>
          break;
 800854a:	e013      	b.n	8008574 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fcb4 	bl	8008ebc <USBD_GetStatus>
          break;
 8008554:	e00e      	b.n	8008574 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fce3 	bl	8008f24 <USBD_SetFeature>
          break;
 800855e:	e009      	b.n	8008574 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fd07 	bl	8008f76 <USBD_ClrFeature>
          break;
 8008568:	e004      	b.n	8008574 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fd5e 	bl	800902e <USBD_CtlError>
          break;
 8008572:	bf00      	nop
      }
      break;
 8008574:	e004      	b.n	8008580 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fd58 	bl	800902e <USBD_CtlError>
      break;
 800857e:	bf00      	nop
  }

  return ret;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop

0800858c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d005      	beq.n	80085b2 <USBD_StdItfReq+0x26>
 80085a6:	2b40      	cmp	r3, #64	; 0x40
 80085a8:	d852      	bhi.n	8008650 <USBD_StdItfReq+0xc4>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <USBD_StdItfReq+0x26>
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	d14e      	bne.n	8008650 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d840      	bhi.n	8008642 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	889b      	ldrh	r3, [r3, #4]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d836      	bhi.n	8008638 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	889b      	ldrh	r3, [r3, #4]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff fed9 	bl	800838a <USBD_CoreFindIF>
 80085d8:	4603      	mov	r3, r0
 80085da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2bff      	cmp	r3, #255	; 0xff
 80085e0:	d01d      	beq.n	800861e <USBD_StdItfReq+0x92>
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11a      	bne.n	800861e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80085e8:	7bba      	ldrb	r2, [r7, #14]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	32ae      	adds	r2, #174	; 0xae
 80085ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00f      	beq.n	8008618 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80085f8:	7bba      	ldrb	r2, [r7, #14]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008600:	7bba      	ldrb	r2, [r7, #14]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	32ae      	adds	r2, #174	; 0xae
 8008606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008616:	e004      	b.n	8008622 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008618:	2303      	movs	r3, #3
 800861a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800861c:	e001      	b.n	8008622 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	88db      	ldrh	r3, [r3, #6]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d110      	bne.n	800864c <USBD_StdItfReq+0xc0>
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10d      	bne.n	800864c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fdc7 	bl	80091c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008636:	e009      	b.n	800864c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fcf7 	bl	800902e <USBD_CtlError>
          break;
 8008640:	e004      	b.n	800864c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fcf2 	bl	800902e <USBD_CtlError>
          break;
 800864a:	e000      	b.n	800864e <USBD_StdItfReq+0xc2>
          break;
 800864c:	bf00      	nop
      }
      break;
 800864e:	e004      	b.n	800865a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fceb 	bl	800902e <USBD_CtlError>
      break;
 8008658:	bf00      	nop
  }

  return ret;
 800865a:	7bfb      	ldrb	r3, [r7, #15]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	889b      	ldrh	r3, [r3, #4]
 8008676:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008680:	2b40      	cmp	r3, #64	; 0x40
 8008682:	d007      	beq.n	8008694 <USBD_StdEPReq+0x30>
 8008684:	2b40      	cmp	r3, #64	; 0x40
 8008686:	f200 817f 	bhi.w	8008988 <USBD_StdEPReq+0x324>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d02a      	beq.n	80086e4 <USBD_StdEPReq+0x80>
 800868e:	2b20      	cmp	r3, #32
 8008690:	f040 817a 	bne.w	8008988 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fe83 	bl	80083a4 <USBD_CoreFindEP>
 800869e:	4603      	mov	r3, r0
 80086a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086a2:	7b7b      	ldrb	r3, [r7, #13]
 80086a4:	2bff      	cmp	r3, #255	; 0xff
 80086a6:	f000 8174 	beq.w	8008992 <USBD_StdEPReq+0x32e>
 80086aa:	7b7b      	ldrb	r3, [r7, #13]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f040 8170 	bne.w	8008992 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80086b2:	7b7a      	ldrb	r2, [r7, #13]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80086ba:	7b7a      	ldrb	r2, [r7, #13]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	32ae      	adds	r2, #174	; 0xae
 80086c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 8163 	beq.w	8008992 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80086cc:	7b7a      	ldrb	r2, [r7, #13]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	32ae      	adds	r2, #174	; 0xae
 80086d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086e2:	e156      	b.n	8008992 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d008      	beq.n	80086fe <USBD_StdEPReq+0x9a>
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	f300 8145 	bgt.w	800897c <USBD_StdEPReq+0x318>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 809b 	beq.w	800882e <USBD_StdEPReq+0x1ca>
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d03c      	beq.n	8008776 <USBD_StdEPReq+0x112>
 80086fc:	e13e      	b.n	800897c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d002      	beq.n	8008710 <USBD_StdEPReq+0xac>
 800870a:	2b03      	cmp	r3, #3
 800870c:	d016      	beq.n	800873c <USBD_StdEPReq+0xd8>
 800870e:	e02c      	b.n	800876a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00d      	beq.n	8008732 <USBD_StdEPReq+0xce>
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b80      	cmp	r3, #128	; 0x80
 800871a:	d00a      	beq.n	8008732 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f93d 	bl	80099a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008726:	2180      	movs	r1, #128	; 0x80
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 f939 	bl	80099a0 <USBD_LL_StallEP>
 800872e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008730:	e020      	b.n	8008774 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fc7a 	bl	800902e <USBD_CtlError>
              break;
 800873a:	e01b      	b.n	8008774 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	885b      	ldrh	r3, [r3, #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10e      	bne.n	8008762 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00b      	beq.n	8008762 <USBD_StdEPReq+0xfe>
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b80      	cmp	r3, #128	; 0x80
 800874e:	d008      	beq.n	8008762 <USBD_StdEPReq+0xfe>
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	88db      	ldrh	r3, [r3, #6]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d104      	bne.n	8008762 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 f91f 	bl	80099a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fd2e 	bl	80091c4 <USBD_CtlSendStatus>

              break;
 8008768:	e004      	b.n	8008774 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fc5e 	bl	800902e <USBD_CtlError>
              break;
 8008772:	bf00      	nop
          }
          break;
 8008774:	e107      	b.n	8008986 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b02      	cmp	r3, #2
 8008780:	d002      	beq.n	8008788 <USBD_StdEPReq+0x124>
 8008782:	2b03      	cmp	r3, #3
 8008784:	d016      	beq.n	80087b4 <USBD_StdEPReq+0x150>
 8008786:	e04b      	b.n	8008820 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00d      	beq.n	80087aa <USBD_StdEPReq+0x146>
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	2b80      	cmp	r3, #128	; 0x80
 8008792:	d00a      	beq.n	80087aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 f901 	bl	80099a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800879e:	2180      	movs	r1, #128	; 0x80
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 f8fd 	bl	80099a0 <USBD_LL_StallEP>
 80087a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087a8:	e040      	b.n	800882c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fc3e 	bl	800902e <USBD_CtlError>
              break;
 80087b2:	e03b      	b.n	800882c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	885b      	ldrh	r3, [r3, #2]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d136      	bne.n	800882a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d004      	beq.n	80087d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 f907 	bl	80099de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fcf7 	bl	80091c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fde2 	bl	80083a4 <USBD_CoreFindEP>
 80087e0:	4603      	mov	r3, r0
 80087e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087e4:	7b7b      	ldrb	r3, [r7, #13]
 80087e6:	2bff      	cmp	r3, #255	; 0xff
 80087e8:	d01f      	beq.n	800882a <USBD_StdEPReq+0x1c6>
 80087ea:	7b7b      	ldrb	r3, [r7, #13]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11c      	bne.n	800882a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80087f0:	7b7a      	ldrb	r2, [r7, #13]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80087f8:	7b7a      	ldrb	r2, [r7, #13]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	32ae      	adds	r2, #174	; 0xae
 80087fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d010      	beq.n	800882a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008808:	7b7a      	ldrb	r2, [r7, #13]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	32ae      	adds	r2, #174	; 0xae
 800880e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800881e:	e004      	b.n	800882a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fc03 	bl	800902e <USBD_CtlError>
              break;
 8008828:	e000      	b.n	800882c <USBD_StdEPReq+0x1c8>
              break;
 800882a:	bf00      	nop
          }
          break;
 800882c:	e0ab      	b.n	8008986 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d002      	beq.n	8008840 <USBD_StdEPReq+0x1dc>
 800883a:	2b03      	cmp	r3, #3
 800883c:	d032      	beq.n	80088a4 <USBD_StdEPReq+0x240>
 800883e:	e097      	b.n	8008970 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d007      	beq.n	8008856 <USBD_StdEPReq+0x1f2>
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b80      	cmp	r3, #128	; 0x80
 800884a:	d004      	beq.n	8008856 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fbed 	bl	800902e <USBD_CtlError>
                break;
 8008854:	e091      	b.n	800897a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800885a:	2b00      	cmp	r3, #0
 800885c:	da0b      	bge.n	8008876 <USBD_StdEPReq+0x212>
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	3310      	adds	r3, #16
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	3304      	adds	r3, #4
 8008874:	e00b      	b.n	800888e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800887c:	4613      	mov	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	4413      	add	r3, r2
 800888c:	3304      	adds	r3, #4
 800888e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2202      	movs	r2, #2
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fc37 	bl	8009110 <USBD_CtlSendData>
              break;
 80088a2:	e06a      	b.n	800897a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80088a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	da11      	bge.n	80088d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	f003 020f 	and.w	r2, r3, #15
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	3324      	adds	r3, #36	; 0x24
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d117      	bne.n	80088f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fbb0 	bl	800902e <USBD_CtlError>
                  break;
 80088ce:	e054      	b.n	800897a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	f003 020f 	and.w	r2, r3, #15
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
 80088e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb9d 	bl	800902e <USBD_CtlError>
                  break;
 80088f4:	e041      	b.n	800897a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	da0b      	bge.n	8008916 <USBD_StdEPReq+0x2b2>
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
 8008900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	3310      	adds	r3, #16
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	3304      	adds	r3, #4
 8008914:	e00b      	b.n	800892e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	4413      	add	r3, r2
 800892c:	3304      	adds	r3, #4
 800892e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <USBD_StdEPReq+0x2d8>
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b80      	cmp	r3, #128	; 0x80
 800893a:	d103      	bne.n	8008944 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	e00e      	b.n	8008962 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 f867 	bl	8009a1c <USBD_LL_IsStallEP>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e002      	b.n	8008962 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2202      	movs	r2, #2
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fbd1 	bl	8009110 <USBD_CtlSendData>
              break;
 800896e:	e004      	b.n	800897a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fb5b 	bl	800902e <USBD_CtlError>
              break;
 8008978:	bf00      	nop
          }
          break;
 800897a:	e004      	b.n	8008986 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fb55 	bl	800902e <USBD_CtlError>
          break;
 8008984:	bf00      	nop
      }
      break;
 8008986:	e005      	b.n	8008994 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fb4f 	bl	800902e <USBD_CtlError>
      break;
 8008990:	e000      	b.n	8008994 <USBD_StdEPReq+0x330>
      break;
 8008992:	bf00      	nop
  }

  return ret;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	885b      	ldrh	r3, [r3, #2]
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	2b06      	cmp	r3, #6
 80089c2:	f200 8128 	bhi.w	8008c16 <USBD_GetDescriptor+0x276>
 80089c6:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <USBD_GetDescriptor+0x2c>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	080089e9 	.word	0x080089e9
 80089d0:	08008a01 	.word	0x08008a01
 80089d4:	08008a41 	.word	0x08008a41
 80089d8:	08008c17 	.word	0x08008c17
 80089dc:	08008c17 	.word	0x08008c17
 80089e0:	08008bb7 	.word	0x08008bb7
 80089e4:	08008be3 	.word	0x08008be3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	7c12      	ldrb	r2, [r2, #16]
 80089f4:	f107 0108 	add.w	r1, r7, #8
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	60f8      	str	r0, [r7, #12]
      break;
 80089fe:	e112      	b.n	8008c26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7c1b      	ldrb	r3, [r3, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10d      	bne.n	8008a24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a10:	f107 0208 	add.w	r2, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	2202      	movs	r2, #2
 8008a20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a22:	e100      	b.n	8008c26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	f107 0208 	add.w	r2, r7, #8
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	701a      	strb	r2, [r3, #0]
      break;
 8008a3e:	e0f2      	b.n	8008c26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	885b      	ldrh	r3, [r3, #2]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b05      	cmp	r3, #5
 8008a48:	f200 80ac 	bhi.w	8008ba4 <USBD_GetDescriptor+0x204>
 8008a4c:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <USBD_GetDescriptor+0xb4>)
 8008a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a52:	bf00      	nop
 8008a54:	08008a6d 	.word	0x08008a6d
 8008a58:	08008aa1 	.word	0x08008aa1
 8008a5c:	08008ad5 	.word	0x08008ad5
 8008a60:	08008b09 	.word	0x08008b09
 8008a64:	08008b3d 	.word	0x08008b3d
 8008a68:	08008b71 	.word	0x08008b71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8e:	e091      	b.n	8008bb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 facb 	bl	800902e <USBD_CtlError>
            err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9e:	e089      	b.n	8008bb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7c12      	ldrb	r2, [r2, #16]
 8008ab8:	f107 0108 	add.w	r1, r7, #8
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac2:	e077      	b.n	8008bb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fab1 	bl	800902e <USBD_CtlError>
            err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ad2:	e06f      	b.n	8008bb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008af6:	e05d      	b.n	8008bb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa97 	bl	800902e <USBD_CtlError>
            err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
          break;
 8008b06:	e055      	b.n	8008bb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 0108 	add.w	r1, r7, #8
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b2a:	e043      	b.n	8008bb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa7d 	bl	800902e <USBD_CtlError>
            err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
          break;
 8008b3a:	e03b      	b.n	8008bb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7c12      	ldrb	r2, [r2, #16]
 8008b54:	f107 0108 	add.w	r1, r7, #8
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b5e:	e029      	b.n	8008bb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa63 	bl	800902e <USBD_CtlError>
            err++;
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b6e:	e021      	b.n	8008bb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	7c12      	ldrb	r2, [r2, #16]
 8008b88:	f107 0108 	add.w	r1, r7, #8
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b92:	e00f      	b.n	8008bb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa49 	bl	800902e <USBD_CtlError>
            err++;
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ba2:	e007      	b.n	8008bb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa41 	bl	800902e <USBD_CtlError>
          err++;
 8008bac:	7afb      	ldrb	r3, [r7, #11]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008bb2:	bf00      	nop
      }
      break;
 8008bb4:	e037      	b.n	8008c26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	7c1b      	ldrb	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc6:	f107 0208 	add.w	r2, r7, #8
 8008bca:	4610      	mov	r0, r2
 8008bcc:	4798      	blx	r3
 8008bce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bd0:	e029      	b.n	8008c26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fa2a 	bl	800902e <USBD_CtlError>
        err++;
 8008bda:	7afb      	ldrb	r3, [r7, #11]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	72fb      	strb	r3, [r7, #11]
      break;
 8008be0:	e021      	b.n	8008c26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	7c1b      	ldrb	r3, [r3, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10d      	bne.n	8008c06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf2:	f107 0208 	add.w	r2, r7, #8
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	4798      	blx	r3
 8008bfa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	2207      	movs	r2, #7
 8008c02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c04:	e00f      	b.n	8008c26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fa10 	bl	800902e <USBD_CtlError>
        err++;
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	3301      	adds	r3, #1
 8008c12:	72fb      	strb	r3, [r7, #11]
      break;
 8008c14:	e007      	b.n	8008c26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fa08 	bl	800902e <USBD_CtlError>
      err++;
 8008c1e:	7afb      	ldrb	r3, [r7, #11]
 8008c20:	3301      	adds	r3, #1
 8008c22:	72fb      	strb	r3, [r7, #11]
      break;
 8008c24:	bf00      	nop
  }

  if (err != 0U)
 8008c26:	7afb      	ldrb	r3, [r7, #11]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d11e      	bne.n	8008c6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	88db      	ldrh	r3, [r3, #6]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d016      	beq.n	8008c62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008c34:	893b      	ldrh	r3, [r7, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00e      	beq.n	8008c58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	88da      	ldrh	r2, [r3, #6]
 8008c3e:	893b      	ldrh	r3, [r7, #8]
 8008c40:	4293      	cmp	r3, r2
 8008c42:	bf28      	it	cs
 8008c44:	4613      	movcs	r3, r2
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c4a:	893b      	ldrh	r3, [r7, #8]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	68f9      	ldr	r1, [r7, #12]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fa5d 	bl	8009110 <USBD_CtlSendData>
 8008c56:	e009      	b.n	8008c6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f9e7 	bl	800902e <USBD_CtlError>
 8008c60:	e004      	b.n	8008c6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 faae 	bl	80091c4 <USBD_CtlSendStatus>
 8008c68:	e000      	b.n	8008c6c <USBD_GetDescriptor+0x2cc>
    return;
 8008c6a:	bf00      	nop
  }
}
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop

08008c74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	889b      	ldrh	r3, [r3, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d131      	bne.n	8008cea <USBD_SetAddress+0x76>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	88db      	ldrh	r3, [r3, #6]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d12d      	bne.n	8008cea <USBD_SetAddress+0x76>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	885b      	ldrh	r3, [r3, #2]
 8008c92:	2b7f      	cmp	r3, #127	; 0x7f
 8008c94:	d829      	bhi.n	8008cea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	885b      	ldrh	r3, [r3, #2]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d104      	bne.n	8008cb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f9bc 	bl	800902e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb6:	e01d      	b.n	8008cf4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	7bfa      	ldrb	r2, [r7, #15]
 8008cbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fed5 	bl	8009a74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa7a 	bl	80091c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d004      	beq.n	8008ce0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cde:	e009      	b.n	8008cf4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce8:	e004      	b.n	8008cf4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f99e 	bl	800902e <USBD_CtlError>
  }
}
 8008cf2:	bf00      	nop
 8008cf4:	bf00      	nop
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	885b      	ldrh	r3, [r3, #2]
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	4b4e      	ldr	r3, [pc, #312]	; (8008e4c <USBD_SetConfig+0x150>)
 8008d12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d14:	4b4d      	ldr	r3, [pc, #308]	; (8008e4c <USBD_SetConfig+0x150>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d905      	bls.n	8008d28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f985 	bl	800902e <USBD_CtlError>
    return USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e08c      	b.n	8008e42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d002      	beq.n	8008d3a <USBD_SetConfig+0x3e>
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d029      	beq.n	8008d8c <USBD_SetConfig+0x90>
 8008d38:	e075      	b.n	8008e26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d3a:	4b44      	ldr	r3, [pc, #272]	; (8008e4c <USBD_SetConfig+0x150>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d020      	beq.n	8008d84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008d42:	4b42      	ldr	r3, [pc, #264]	; (8008e4c <USBD_SetConfig+0x150>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d4c:	4b3f      	ldr	r3, [pc, #252]	; (8008e4c <USBD_SetConfig+0x150>)
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fe ffe7 	bl	8007d26 <USBD_SetClassConfig>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d008      	beq.n	8008d74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f962 	bl	800902e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d72:	e065      	b.n	8008e40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fa25 	bl	80091c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d82:	e05d      	b.n	8008e40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fa1d 	bl	80091c4 <USBD_CtlSendStatus>
      break;
 8008d8a:	e059      	b.n	8008e40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d8c:	4b2f      	ldr	r3, [pc, #188]	; (8008e4c <USBD_SetConfig+0x150>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d112      	bne.n	8008dba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d9c:	4b2b      	ldr	r3, [pc, #172]	; (8008e4c <USBD_SetConfig+0x150>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008da6:	4b29      	ldr	r3, [pc, #164]	; (8008e4c <USBD_SetConfig+0x150>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7fe ffd6 	bl	8007d5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa06 	bl	80091c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008db8:	e042      	b.n	8008e40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008dba:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <USBD_SetConfig+0x150>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d02a      	beq.n	8008e1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7fe ffc4 	bl	8007d5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <USBD_SetConfig+0x150>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008de0:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <USBD_SetConfig+0x150>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fe ff9d 	bl	8007d26 <USBD_SetClassConfig>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00f      	beq.n	8008e16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f918 	bl	800902e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7fe ffa9 	bl	8007d5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e14:	e014      	b.n	8008e40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f9d4 	bl	80091c4 <USBD_CtlSendStatus>
      break;
 8008e1c:	e010      	b.n	8008e40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9d0 	bl	80091c4 <USBD_CtlSendStatus>
      break;
 8008e24:	e00c      	b.n	8008e40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f900 	bl	800902e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e2e:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <USBD_SetConfig+0x150>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7fe ff92 	bl	8007d5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3e:	bf00      	nop
  }

  return ret;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200002d8 	.word	0x200002d8

08008e50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d004      	beq.n	8008e6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f8e2 	bl	800902e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e6a:	e023      	b.n	8008eb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	dc02      	bgt.n	8008e7e <USBD_GetConfig+0x2e>
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dc03      	bgt.n	8008e84 <USBD_GetConfig+0x34>
 8008e7c:	e015      	b.n	8008eaa <USBD_GetConfig+0x5a>
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d00b      	beq.n	8008e9a <USBD_GetConfig+0x4a>
 8008e82:	e012      	b.n	8008eaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	2201      	movs	r2, #1
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f93c 	bl	8009110 <USBD_CtlSendData>
        break;
 8008e98:	e00c      	b.n	8008eb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f934 	bl	8009110 <USBD_CtlSendData>
        break;
 8008ea8:	e004      	b.n	8008eb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f8be 	bl	800902e <USBD_CtlError>
        break;
 8008eb2:	bf00      	nop
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d81e      	bhi.n	8008f12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	88db      	ldrh	r3, [r3, #6]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d004      	beq.n	8008ee6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f8a5 	bl	800902e <USBD_CtlError>
        break;
 8008ee4:	e01a      	b.n	8008f1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f043 0202 	orr.w	r2, r3, #2
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	330c      	adds	r3, #12
 8008f06:	2202      	movs	r2, #2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f900 	bl	8009110 <USBD_CtlSendData>
      break;
 8008f10:	e004      	b.n	8008f1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f88a 	bl	800902e <USBD_CtlError>
      break;
 8008f1a:	bf00      	nop
  }
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	885b      	ldrh	r3, [r3, #2]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d107      	bne.n	8008f46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f940 	bl	80091c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008f44:	e013      	b.n	8008f6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d10b      	bne.n	8008f66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	889b      	ldrh	r3, [r3, #4]
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f930 	bl	80091c4 <USBD_CtlSendStatus>
}
 8008f64:	e003      	b.n	8008f6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f860 	bl	800902e <USBD_CtlError>
}
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d80b      	bhi.n	8008fa6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	885b      	ldrh	r3, [r3, #2]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d10c      	bne.n	8008fb0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f910 	bl	80091c4 <USBD_CtlSendStatus>
      }
      break;
 8008fa4:	e004      	b.n	8008fb0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f840 	bl	800902e <USBD_CtlError>
      break;
 8008fae:	e000      	b.n	8008fb2 <USBD_ClrFeature+0x3c>
      break;
 8008fb0:	bf00      	nop
  }
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	781a      	ldrb	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	781a      	ldrb	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7ff fa41 	bl	800846c <SWAPBYTE>
 8008fea:	4603      	mov	r3, r0
 8008fec:	461a      	mov	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7ff fa34 	bl	800846c <SWAPBYTE>
 8009004:	4603      	mov	r3, r0
 8009006:	461a      	mov	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3301      	adds	r3, #1
 8009010:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7ff fa27 	bl	800846c <SWAPBYTE>
 800901e:	4603      	mov	r3, r0
 8009020:	461a      	mov	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	80da      	strh	r2, [r3, #6]
}
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009038:	2180      	movs	r1, #128	; 0x80
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fcb0 	bl	80099a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009040:	2100      	movs	r1, #0
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fcac 	bl	80099a0 <USBD_LL_StallEP>
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d036      	beq.n	80090d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800906a:	6938      	ldr	r0, [r7, #16]
 800906c:	f000 f836 	bl	80090dc <USBD_GetLen>
 8009070:	4603      	mov	r3, r0
 8009072:	3301      	adds	r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	4413      	add	r3, r2
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	7812      	ldrb	r2, [r2, #0]
 8009088:	701a      	strb	r2, [r3, #0]
  idx++;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	3301      	adds	r3, #1
 800908e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	4413      	add	r3, r2
 8009096:	2203      	movs	r2, #3
 8009098:	701a      	strb	r2, [r3, #0]
  idx++;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	3301      	adds	r3, #1
 800909e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80090a0:	e013      	b.n	80090ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	4413      	add	r3, r2
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	3301      	adds	r3, #1
 80090b2:	613b      	str	r3, [r7, #16]
    idx++;
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	3301      	adds	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	4413      	add	r3, r2
 80090c0:	2200      	movs	r2, #0
 80090c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	3301      	adds	r3, #1
 80090c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e7      	bne.n	80090a2 <USBD_GetString+0x52>
 80090d2:	e000      	b.n	80090d6 <USBD_GetString+0x86>
    return;
 80090d4:	bf00      	nop
  }
}
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80090ec:	e005      	b.n	80090fa <USBD_GetLen+0x1e>
  {
    len++;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	3301      	adds	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1f5      	bne.n	80090ee <USBD_GetLen+0x12>
  }

  return len;
 8009102:	7bfb      	ldrb	r3, [r7, #15]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2202      	movs	r2, #2
 8009120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	2100      	movs	r1, #0
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 fcbb 	bl	8009ab2 <USBD_LL_Transmit>

  return USBD_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	2100      	movs	r1, #0
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 fcaa 	bl	8009ab2 <USBD_LL_Transmit>

  return USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2203      	movs	r2, #3
 8009178:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	2100      	movs	r1, #0
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 fcae 	bl	8009af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	2100      	movs	r1, #0
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fc9d 	bl	8009af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2204      	movs	r2, #4
 80091d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091d4:	2300      	movs	r3, #0
 80091d6:	2200      	movs	r2, #0
 80091d8:	2100      	movs	r1, #0
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fc69 	bl	8009ab2 <USBD_LL_Transmit>

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2205      	movs	r2, #5
 80091f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091fa:	2300      	movs	r3, #0
 80091fc:	2200      	movs	r2, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fc77 	bl	8009af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009214:	2200      	movs	r2, #0
 8009216:	4912      	ldr	r1, [pc, #72]	; (8009260 <MX_USB_DEVICE_Init+0x50>)
 8009218:	4812      	ldr	r0, [pc, #72]	; (8009264 <MX_USB_DEVICE_Init+0x54>)
 800921a:	f7fe fd07 	bl	8007c2c <USBD_Init>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009224:	f7f7 ff2c 	bl	8001080 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009228:	490f      	ldr	r1, [pc, #60]	; (8009268 <MX_USB_DEVICE_Init+0x58>)
 800922a:	480e      	ldr	r0, [pc, #56]	; (8009264 <MX_USB_DEVICE_Init+0x54>)
 800922c:	f7fe fd2e 	bl	8007c8c <USBD_RegisterClass>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009236:	f7f7 ff23 	bl	8001080 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800923a:	490c      	ldr	r1, [pc, #48]	; (800926c <MX_USB_DEVICE_Init+0x5c>)
 800923c:	4809      	ldr	r0, [pc, #36]	; (8009264 <MX_USB_DEVICE_Init+0x54>)
 800923e:	f7fe fc65 	bl	8007b0c <USBD_CDC_RegisterInterface>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009248:	f7f7 ff1a 	bl	8001080 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800924c:	4805      	ldr	r0, [pc, #20]	; (8009264 <MX_USB_DEVICE_Init+0x54>)
 800924e:	f7fe fd53 	bl	8007cf8 <USBD_Start>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009258:	f7f7 ff12 	bl	8001080 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800925c:	bf00      	nop
 800925e:	bd80      	pop	{r7, pc}
 8009260:	200000b0 	.word	0x200000b0
 8009264:	200002dc 	.word	0x200002dc
 8009268:	2000001c 	.word	0x2000001c
 800926c:	2000009c 	.word	0x2000009c

08009270 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009274:	2200      	movs	r2, #0
 8009276:	4905      	ldr	r1, [pc, #20]	; (800928c <CDC_Init_FS+0x1c>)
 8009278:	4805      	ldr	r0, [pc, #20]	; (8009290 <CDC_Init_FS+0x20>)
 800927a:	f7fe fc61 	bl	8007b40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800927e:	4905      	ldr	r1, [pc, #20]	; (8009294 <CDC_Init_FS+0x24>)
 8009280:	4803      	ldr	r0, [pc, #12]	; (8009290 <CDC_Init_FS+0x20>)
 8009282:	f7fe fc7f 	bl	8007b84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009286:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009288:	4618      	mov	r0, r3
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20000db8 	.word	0x20000db8
 8009290:	200002dc 	.word	0x200002dc
 8009294:	200005b8 	.word	0x200005b8

08009298 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800929c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800929e:	4618      	mov	r0, r3
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	6039      	str	r1, [r7, #0]
 80092b2:	71fb      	strb	r3, [r7, #7]
 80092b4:	4613      	mov	r3, r2
 80092b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b23      	cmp	r3, #35	; 0x23
 80092bc:	d84a      	bhi.n	8009354 <CDC_Control_FS+0xac>
 80092be:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <CDC_Control_FS+0x1c>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	08009355 	.word	0x08009355
 80092c8:	08009355 	.word	0x08009355
 80092cc:	08009355 	.word	0x08009355
 80092d0:	08009355 	.word	0x08009355
 80092d4:	08009355 	.word	0x08009355
 80092d8:	08009355 	.word	0x08009355
 80092dc:	08009355 	.word	0x08009355
 80092e0:	08009355 	.word	0x08009355
 80092e4:	08009355 	.word	0x08009355
 80092e8:	08009355 	.word	0x08009355
 80092ec:	08009355 	.word	0x08009355
 80092f0:	08009355 	.word	0x08009355
 80092f4:	08009355 	.word	0x08009355
 80092f8:	08009355 	.word	0x08009355
 80092fc:	08009355 	.word	0x08009355
 8009300:	08009355 	.word	0x08009355
 8009304:	08009355 	.word	0x08009355
 8009308:	08009355 	.word	0x08009355
 800930c:	08009355 	.word	0x08009355
 8009310:	08009355 	.word	0x08009355
 8009314:	08009355 	.word	0x08009355
 8009318:	08009355 	.word	0x08009355
 800931c:	08009355 	.word	0x08009355
 8009320:	08009355 	.word	0x08009355
 8009324:	08009355 	.word	0x08009355
 8009328:	08009355 	.word	0x08009355
 800932c:	08009355 	.word	0x08009355
 8009330:	08009355 	.word	0x08009355
 8009334:	08009355 	.word	0x08009355
 8009338:	08009355 	.word	0x08009355
 800933c:	08009355 	.word	0x08009355
 8009340:	08009355 	.word	0x08009355
 8009344:	08009355 	.word	0x08009355
 8009348:	08009355 	.word	0x08009355
 800934c:	08009355 	.word	0x08009355
 8009350:	08009355 	.word	0x08009355
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009354:	bf00      	nop
  }

  return (USBD_OK);
 8009356:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4805      	ldr	r0, [pc, #20]	; (8009388 <CDC_Receive_FS+0x24>)
 8009372:	f7fe fc07 	bl	8007b84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009376:	4804      	ldr	r0, [pc, #16]	; (8009388 <CDC_Receive_FS+0x24>)
 8009378:	f7fe fc22 	bl	8007bc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800937c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	200002dc 	.word	0x200002dc

0800938c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	4613      	mov	r3, r2
 8009398:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800939e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
	...

080093b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2212      	movs	r2, #18
 80093c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093c2:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	200000cc 	.word	0x200000cc

080093d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	2204      	movs	r2, #4
 80093e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093e6:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	200000e0 	.word	0x200000e0

080093f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d105      	bne.n	8009416 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	4907      	ldr	r1, [pc, #28]	; (800942c <USBD_FS_ProductStrDescriptor+0x34>)
 800940e:	4808      	ldr	r0, [pc, #32]	; (8009430 <USBD_FS_ProductStrDescriptor+0x38>)
 8009410:	f7ff fe1e 	bl	8009050 <USBD_GetString>
 8009414:	e004      	b.n	8009420 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	4904      	ldr	r1, [pc, #16]	; (800942c <USBD_FS_ProductStrDescriptor+0x34>)
 800941a:	4805      	ldr	r0, [pc, #20]	; (8009430 <USBD_FS_ProductStrDescriptor+0x38>)
 800941c:	f7ff fe18 	bl	8009050 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009420:	4b02      	ldr	r3, [pc, #8]	; (800942c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	200015b8 	.word	0x200015b8
 8009430:	08009c54 	.word	0x08009c54

08009434 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	4904      	ldr	r1, [pc, #16]	; (8009454 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009444:	4804      	ldr	r0, [pc, #16]	; (8009458 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009446:	f7ff fe03 	bl	8009050 <USBD_GetString>
  return USBD_StrDesc;
 800944a:	4b02      	ldr	r3, [pc, #8]	; (8009454 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	200015b8 	.word	0x200015b8
 8009458:	08009c6c 	.word	0x08009c6c

0800945c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	221a      	movs	r2, #26
 800946c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800946e:	f000 f843 	bl	80094f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009472:	4b02      	ldr	r3, [pc, #8]	; (800947c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	200000e4 	.word	0x200000e4

08009480 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d105      	bne.n	800949e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	4907      	ldr	r1, [pc, #28]	; (80094b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009496:	4808      	ldr	r0, [pc, #32]	; (80094b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009498:	f7ff fdda 	bl	8009050 <USBD_GetString>
 800949c:	e004      	b.n	80094a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4904      	ldr	r1, [pc, #16]	; (80094b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094a2:	4805      	ldr	r0, [pc, #20]	; (80094b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094a4:	f7ff fdd4 	bl	8009050 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094a8:	4b02      	ldr	r3, [pc, #8]	; (80094b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200015b8 	.word	0x200015b8
 80094b8:	08009c78 	.word	0x08009c78

080094bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4907      	ldr	r1, [pc, #28]	; (80094f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094d2:	4808      	ldr	r0, [pc, #32]	; (80094f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094d4:	f7ff fdbc 	bl	8009050 <USBD_GetString>
 80094d8:	e004      	b.n	80094e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	4904      	ldr	r1, [pc, #16]	; (80094f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094de:	4805      	ldr	r0, [pc, #20]	; (80094f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094e0:	f7ff fdb6 	bl	8009050 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e4:	4b02      	ldr	r3, [pc, #8]	; (80094f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	200015b8 	.word	0x200015b8
 80094f4:	08009c84 	.word	0x08009c84

080094f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094fe:	4b0f      	ldr	r3, [pc, #60]	; (800953c <Get_SerialNum+0x44>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009504:	4b0e      	ldr	r3, [pc, #56]	; (8009540 <Get_SerialNum+0x48>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800950a:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <Get_SerialNum+0x4c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800951e:	2208      	movs	r2, #8
 8009520:	4909      	ldr	r1, [pc, #36]	; (8009548 <Get_SerialNum+0x50>)
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 f814 	bl	8009550 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009528:	2204      	movs	r2, #4
 800952a:	4908      	ldr	r1, [pc, #32]	; (800954c <Get_SerialNum+0x54>)
 800952c:	68b8      	ldr	r0, [r7, #8]
 800952e:	f000 f80f 	bl	8009550 <IntToUnicode>
  }
}
 8009532:	bf00      	nop
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	1fff7a10 	.word	0x1fff7a10
 8009540:	1fff7a14 	.word	0x1fff7a14
 8009544:	1fff7a18 	.word	0x1fff7a18
 8009548:	200000e6 	.word	0x200000e6
 800954c:	200000f6 	.word	0x200000f6

08009550 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]
 8009566:	e027      	b.n	80095b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	0f1b      	lsrs	r3, r3, #28
 800956c:	2b09      	cmp	r3, #9
 800956e:	d80b      	bhi.n	8009588 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	0f1b      	lsrs	r3, r3, #28
 8009574:	b2da      	uxtb	r2, r3
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	4619      	mov	r1, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	440b      	add	r3, r1
 8009580:	3230      	adds	r2, #48	; 0x30
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e00a      	b.n	800959e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	0f1b      	lsrs	r3, r3, #28
 800958c:	b2da      	uxtb	r2, r3
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	4619      	mov	r1, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	440b      	add	r3, r1
 8009598:	3237      	adds	r2, #55	; 0x37
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	011b      	lsls	r3, r3, #4
 80095a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	3301      	adds	r3, #1
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	4413      	add	r3, r2
 80095ae:	2200      	movs	r2, #0
 80095b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	3301      	adds	r3, #1
 80095b6:	75fb      	strb	r3, [r7, #23]
 80095b8:	7dfa      	ldrb	r2, [r7, #23]
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d3d3      	bcc.n	8009568 <IntToUnicode+0x18>
  }
}
 80095c0:	bf00      	nop
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	; 0x28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095d8:	f107 0314 	add.w	r3, r7, #20
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	605a      	str	r2, [r3, #4]
 80095e2:	609a      	str	r2, [r3, #8]
 80095e4:	60da      	str	r2, [r3, #12]
 80095e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095f0:	d13a      	bne.n	8009668 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f2:	2300      	movs	r3, #0
 80095f4:	613b      	str	r3, [r7, #16]
 80095f6:	4b1e      	ldr	r3, [pc, #120]	; (8009670 <HAL_PCD_MspInit+0xa0>)
 80095f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fa:	4a1d      	ldr	r2, [pc, #116]	; (8009670 <HAL_PCD_MspInit+0xa0>)
 80095fc:	f043 0301 	orr.w	r3, r3, #1
 8009600:	6313      	str	r3, [r2, #48]	; 0x30
 8009602:	4b1b      	ldr	r3, [pc, #108]	; (8009670 <HAL_PCD_MspInit+0xa0>)
 8009604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009606:	f003 0301 	and.w	r3, r3, #1
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800960e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009614:	2302      	movs	r3, #2
 8009616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009618:	2300      	movs	r3, #0
 800961a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800961c:	2303      	movs	r3, #3
 800961e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009620:	230a      	movs	r3, #10
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009624:	f107 0314 	add.w	r3, r7, #20
 8009628:	4619      	mov	r1, r3
 800962a:	4812      	ldr	r0, [pc, #72]	; (8009674 <HAL_PCD_MspInit+0xa4>)
 800962c:	f7f8 fc1e 	bl	8001e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009630:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <HAL_PCD_MspInit+0xa0>)
 8009632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009634:	4a0e      	ldr	r2, [pc, #56]	; (8009670 <HAL_PCD_MspInit+0xa0>)
 8009636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963a:	6353      	str	r3, [r2, #52]	; 0x34
 800963c:	2300      	movs	r3, #0
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <HAL_PCD_MspInit+0xa0>)
 8009642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009644:	4a0a      	ldr	r2, [pc, #40]	; (8009670 <HAL_PCD_MspInit+0xa0>)
 8009646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800964a:	6453      	str	r3, [r2, #68]	; 0x44
 800964c:	4b08      	ldr	r3, [pc, #32]	; (8009670 <HAL_PCD_MspInit+0xa0>)
 800964e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009658:	2200      	movs	r2, #0
 800965a:	2100      	movs	r1, #0
 800965c:	2043      	movs	r0, #67	; 0x43
 800965e:	f7f8 fbce 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009662:	2043      	movs	r0, #67	; 0x43
 8009664:	f7f8 fbe7 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009668:	bf00      	nop
 800966a:	3728      	adds	r7, #40	; 0x28
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	40023800 	.word	0x40023800
 8009674:	40020000 	.word	0x40020000

08009678 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800968c:	4619      	mov	r1, r3
 800968e:	4610      	mov	r0, r2
 8009690:	f7fe fb7f 	bl	8007d92 <USBD_LL_SetupStage>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80096ae:	78fa      	ldrb	r2, [r7, #3]
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	78fb      	ldrb	r3, [r7, #3]
 80096c4:	4619      	mov	r1, r3
 80096c6:	f7fe fbb9 	bl	8007e3c <USBD_LL_DataOutStage>
}
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	4613      	mov	r3, r2
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	4413      	add	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	440b      	add	r3, r1
 80096f2:	334c      	adds	r3, #76	; 0x4c
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	78fb      	ldrb	r3, [r7, #3]
 80096f8:	4619      	mov	r1, r3
 80096fa:	f7fe fc52 	bl	8007fa2 <USBD_LL_DataInStage>
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fd86 	bl	8008226 <USBD_LL_SOF>
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800972a:	2301      	movs	r3, #1
 800972c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d001      	beq.n	800973a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009736:	f7f7 fca3 	bl	8001080 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009740:	7bfa      	ldrb	r2, [r7, #15]
 8009742:	4611      	mov	r1, r2
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe fd30 	bl	80081aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009750:	4618      	mov	r0, r3
 8009752:	f7fe fcd8 	bl	8008106 <USBD_LL_Reset>
}
 8009756:	bf00      	nop
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fd2b 	bl	80081ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6812      	ldr	r2, [r2, #0]
 8009782:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009786:	f043 0301 	orr.w	r3, r3, #1
 800978a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d005      	beq.n	80097a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009794:	4b04      	ldr	r3, [pc, #16]	; (80097a8 <HAL_PCD_SuspendCallback+0x48>)
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	4a03      	ldr	r2, [pc, #12]	; (80097a8 <HAL_PCD_SuspendCallback+0x48>)
 800979a:	f043 0306 	orr.w	r3, r3, #6
 800979e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	e000ed00 	.word	0xe000ed00

080097ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe fd1b 	bl	80081f6 <USBD_LL_Resume>
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097da:	78fa      	ldrb	r2, [r7, #3]
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fd73 	bl	80082ca <USBD_LL_IsoOUTIncomplete>
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	4611      	mov	r1, r2
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fd2f 	bl	8008266 <USBD_LL_IsoINIncomplete>
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fd85 	bl	800832e <USBD_LL_DevConnected>
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fd82 	bl	8008344 <USBD_LL_DevDisconnected>
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d13c      	bne.n	80098d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009858:	4a20      	ldr	r2, [pc, #128]	; (80098dc <USBD_LL_Init+0x94>)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a1e      	ldr	r2, [pc, #120]	; (80098dc <USBD_LL_Init+0x94>)
 8009864:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009868:	4b1c      	ldr	r3, [pc, #112]	; (80098dc <USBD_LL_Init+0x94>)
 800986a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800986e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009870:	4b1a      	ldr	r3, [pc, #104]	; (80098dc <USBD_LL_Init+0x94>)
 8009872:	2204      	movs	r2, #4
 8009874:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009876:	4b19      	ldr	r3, [pc, #100]	; (80098dc <USBD_LL_Init+0x94>)
 8009878:	2202      	movs	r2, #2
 800987a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800987c:	4b17      	ldr	r3, [pc, #92]	; (80098dc <USBD_LL_Init+0x94>)
 800987e:	2200      	movs	r2, #0
 8009880:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009882:	4b16      	ldr	r3, [pc, #88]	; (80098dc <USBD_LL_Init+0x94>)
 8009884:	2202      	movs	r2, #2
 8009886:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009888:	4b14      	ldr	r3, [pc, #80]	; (80098dc <USBD_LL_Init+0x94>)
 800988a:	2200      	movs	r2, #0
 800988c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800988e:	4b13      	ldr	r3, [pc, #76]	; (80098dc <USBD_LL_Init+0x94>)
 8009890:	2200      	movs	r2, #0
 8009892:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009894:	4b11      	ldr	r3, [pc, #68]	; (80098dc <USBD_LL_Init+0x94>)
 8009896:	2200      	movs	r2, #0
 8009898:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800989a:	4b10      	ldr	r3, [pc, #64]	; (80098dc <USBD_LL_Init+0x94>)
 800989c:	2200      	movs	r2, #0
 800989e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80098a0:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <USBD_LL_Init+0x94>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80098a6:	480d      	ldr	r0, [pc, #52]	; (80098dc <USBD_LL_Init+0x94>)
 80098a8:	f7f8 fcc8 	bl	800223c <HAL_PCD_Init>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80098b2:	f7f7 fbe5 	bl	8001080 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80098b6:	2180      	movs	r1, #128	; 0x80
 80098b8:	4808      	ldr	r0, [pc, #32]	; (80098dc <USBD_LL_Init+0x94>)
 80098ba:	f7f9 ff20 	bl	80036fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80098be:	2240      	movs	r2, #64	; 0x40
 80098c0:	2100      	movs	r1, #0
 80098c2:	4806      	ldr	r0, [pc, #24]	; (80098dc <USBD_LL_Init+0x94>)
 80098c4:	f7f9 fed4 	bl	8003670 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80098c8:	2280      	movs	r2, #128	; 0x80
 80098ca:	2101      	movs	r1, #1
 80098cc:	4803      	ldr	r0, [pc, #12]	; (80098dc <USBD_LL_Init+0x94>)
 80098ce:	f7f9 fecf 	bl	8003670 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	200017b8 	.word	0x200017b8

080098e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f8 fdbd 	bl	8002476 <HAL_PCD_Start>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f942 	bl	8009b8c <USBD_Get_USB_Status>
 8009908:	4603      	mov	r3, r0
 800990a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990c:	7bbb      	ldrb	r3, [r7, #14]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	4608      	mov	r0, r1
 8009920:	4611      	mov	r1, r2
 8009922:	461a      	mov	r2, r3
 8009924:	4603      	mov	r3, r0
 8009926:	70fb      	strb	r3, [r7, #3]
 8009928:	460b      	mov	r3, r1
 800992a:	70bb      	strb	r3, [r7, #2]
 800992c:	4613      	mov	r3, r2
 800992e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800993e:	78bb      	ldrb	r3, [r7, #2]
 8009940:	883a      	ldrh	r2, [r7, #0]
 8009942:	78f9      	ldrb	r1, [r7, #3]
 8009944:	f7f9 fa8e 	bl	8002e64 <HAL_PCD_EP_Open>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 f91c 	bl	8009b8c <USBD_Get_USB_Status>
 8009954:	4603      	mov	r3, r0
 8009956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009958:	7bbb      	ldrb	r3, [r7, #14]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f7f9 fad7 	bl	8002f34 <HAL_PCD_EP_Close>
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f8fd 	bl	8009b8c <USBD_Get_USB_Status>
 8009992:	4603      	mov	r3, r0
 8009994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009996:	7bbb      	ldrb	r3, [r7, #14]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099ba:	78fa      	ldrb	r2, [r7, #3]
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7f9 fbaf 	bl	8003122 <HAL_PCD_EP_SetStall>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f8de 	bl	8009b8c <USBD_Get_USB_Status>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099f8:	78fa      	ldrb	r2, [r7, #3]
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f9 fbf4 	bl	80031ea <HAL_PCD_EP_ClrStall>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 f8bf 	bl	8009b8c <USBD_Get_USB_Status>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	da0b      	bge.n	8009a50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a3e:	68f9      	ldr	r1, [r7, #12]
 8009a40:	4613      	mov	r3, r2
 8009a42:	00db      	lsls	r3, r3, #3
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	333e      	adds	r3, #62	; 0x3e
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	e00b      	b.n	8009a68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a56:	68f9      	ldr	r1, [r7, #12]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009a66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a8e:	78fa      	ldrb	r2, [r7, #3]
 8009a90:	4611      	mov	r1, r2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f9 f9c1 	bl	8002e1a <HAL_PCD_SetAddress>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 f874 	bl	8009b8c <USBD_Get_USB_Status>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b086      	sub	sp, #24
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	603b      	str	r3, [r7, #0]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ad0:	7af9      	ldrb	r1, [r7, #11]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	f7f9 fada 	bl	800308e <HAL_PCD_EP_Transmit>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 f853 	bl	8009b8c <USBD_Get_USB_Status>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009aea:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	460b      	mov	r3, r1
 8009b02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b12:	7af9      	ldrb	r1, [r7, #11]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	f7f9 fa56 	bl	8002fc8 <HAL_PCD_EP_Receive>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 f832 	bl	8009b8c <USBD_Get_USB_Status>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b48:	78fa      	ldrb	r2, [r7, #3]
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7f9 fa86 	bl	800305e <HAL_PCD_EP_GetRxCount>
 8009b52:	4603      	mov	r3, r0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b64:	4b03      	ldr	r3, [pc, #12]	; (8009b74 <USBD_static_malloc+0x18>)
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20001cc4 	.word	0x20001cc4

08009b78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]

}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b9a:	79fb      	ldrb	r3, [r7, #7]
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d817      	bhi.n	8009bd0 <USBD_Get_USB_Status+0x44>
 8009ba0:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <USBD_Get_USB_Status+0x1c>)
 8009ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba6:	bf00      	nop
 8009ba8:	08009bb9 	.word	0x08009bb9
 8009bac:	08009bbf 	.word	0x08009bbf
 8009bb0:	08009bc5 	.word	0x08009bc5
 8009bb4:	08009bcb 	.word	0x08009bcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73fb      	strb	r3, [r7, #15]
    break;
 8009bbc:	e00b      	b.n	8009bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc2:	e008      	b.n	8009bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc8:	e005      	b.n	8009bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bce:	e002      	b.n	8009bd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd4:	bf00      	nop
  }
  return usb_status;
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <__libc_init_array>:
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	4d0d      	ldr	r5, [pc, #52]	; (8009c1c <__libc_init_array+0x38>)
 8009be8:	4c0d      	ldr	r4, [pc, #52]	; (8009c20 <__libc_init_array+0x3c>)
 8009bea:	1b64      	subs	r4, r4, r5
 8009bec:	10a4      	asrs	r4, r4, #2
 8009bee:	2600      	movs	r6, #0
 8009bf0:	42a6      	cmp	r6, r4
 8009bf2:	d109      	bne.n	8009c08 <__libc_init_array+0x24>
 8009bf4:	4d0b      	ldr	r5, [pc, #44]	; (8009c24 <__libc_init_array+0x40>)
 8009bf6:	4c0c      	ldr	r4, [pc, #48]	; (8009c28 <__libc_init_array+0x44>)
 8009bf8:	f000 f820 	bl	8009c3c <_init>
 8009bfc:	1b64      	subs	r4, r4, r5
 8009bfe:	10a4      	asrs	r4, r4, #2
 8009c00:	2600      	movs	r6, #0
 8009c02:	42a6      	cmp	r6, r4
 8009c04:	d105      	bne.n	8009c12 <__libc_init_array+0x2e>
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
 8009c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c0c:	4798      	blx	r3
 8009c0e:	3601      	adds	r6, #1
 8009c10:	e7ee      	b.n	8009bf0 <__libc_init_array+0xc>
 8009c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c16:	4798      	blx	r3
 8009c18:	3601      	adds	r6, #1
 8009c1a:	e7f2      	b.n	8009c02 <__libc_init_array+0x1e>
 8009c1c:	08009cac 	.word	0x08009cac
 8009c20:	08009cac 	.word	0x08009cac
 8009c24:	08009cac 	.word	0x08009cac
 8009c28:	08009cb0 	.word	0x08009cb0

08009c2c <memset>:
 8009c2c:	4402      	add	r2, r0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d100      	bne.n	8009c36 <memset+0xa>
 8009c34:	4770      	bx	lr
 8009c36:	f803 1b01 	strb.w	r1, [r3], #1
 8009c3a:	e7f9      	b.n	8009c30 <memset+0x4>

08009c3c <_init>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr

08009c48 <_fini>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr
